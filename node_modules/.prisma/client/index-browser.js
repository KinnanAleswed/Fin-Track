
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.ActivitiesScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  userId: 'userId',
  date: 'date',
  hours: 'hours',
  progress: 'progress',
  notes: 'notes'
};

exports.Prisma.BudgetAllocationsScalarFieldEnum = {
  id: 'id',
  budgetId: 'budgetId',
  userId: 'userId',
  hours: 'hours',
  rate: 'rate'
};

exports.Prisma.BudgetsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  itemType: 'itemType',
  description: 'description',
  status: 'status',
  createdById: 'createdById'
};

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CostSplitsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  cost: 'cost',
  splitWith: 'splitWith',
  approvedBy: 'approvedBy'
};

exports.Prisma.ExchangeRatesScalarFieldEnum = {
  id: 'id',
  currency: 'currency',
  rate: 'rate',
  createdAt: 'createdAt'
};

exports.Prisma.ExpensesScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  submittedBy: 'submittedBy',
  expenseType: 'expenseType',
  isBillable: 'isBillable',
  amount: 'amount',
  description: 'description',
  expenseDate: 'expenseDate'
};

exports.Prisma.ProjectsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  clientId: 'clientId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  billingType: 'billingType',
  billingRateTimePeriod: 'billingRateTimePeriod',
  managerId: 'managerId',
  totalContract: 'totalContract',
  approvedBudget: 'approvedBudget',
  allocatedBudget: 'allocatedBudget',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleRatesScalarFieldEnum = {
  id: 'id',
  rate: 'rate',
  validFrom: 'validFrom'
};

exports.Prisma.SysdiagramsScalarFieldEnum = {
  name: 'name',
  principal_id: 'principal_id',
  diagram_id: 'diagram_id',
  version: 'version',
  definition: 'definition'
};

exports.Prisma.TravelRequestsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  requesterId: 'requesterId',
  destination: 'destination',
  purpose: 'purpose',
  cost: 'cost',
  status: 'status'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.ApprovalsScalarFieldEnum = {
  id: 'id',
  entityId: 'entityId',
  entityType: 'entityType',
  approverId: 'approverId',
  status: 'status',
  comment: 'comment',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  actionType: 'actionType',
  entityType: 'entityType',
  entityId: 'entityId',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.LookupsScalarFieldEnum = {
  id: 'id',
  category: 'category',
  code: 'code',
  label: 'label',
  isActive: 'isActive',
  sortOrder: 'sortOrder'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Activities: 'Activities',
  BudgetAllocations: 'BudgetAllocations',
  Budgets: 'Budgets',
  Clients: 'Clients',
  CostSplits: 'CostSplits',
  ExchangeRates: 'ExchangeRates',
  Expenses: 'Expenses',
  Projects: 'Projects',
  RoleRates: 'RoleRates',
  sysdiagrams: 'sysdiagrams',
  TravelRequests: 'TravelRequests',
  Notifications: 'Notifications',
  Approvals: 'Approvals',
  AuditLogs: 'AuditLogs',
  Lookups: 'Lookups',
  Users: 'Users',
  roles: 'roles'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
