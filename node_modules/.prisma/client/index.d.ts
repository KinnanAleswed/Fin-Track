
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Activities
 * 
 */
export type Activities = $Result.DefaultSelection<Prisma.$ActivitiesPayload>
/**
 * Model BudgetAllocations
 * 
 */
export type BudgetAllocations = $Result.DefaultSelection<Prisma.$BudgetAllocationsPayload>
/**
 * Model Budgets
 * 
 */
export type Budgets = $Result.DefaultSelection<Prisma.$BudgetsPayload>
/**
 * Model Clients
 * 
 */
export type Clients = $Result.DefaultSelection<Prisma.$ClientsPayload>
/**
 * Model CostSplits
 * 
 */
export type CostSplits = $Result.DefaultSelection<Prisma.$CostSplitsPayload>
/**
 * Model ExchangeRates
 * 
 */
export type ExchangeRates = $Result.DefaultSelection<Prisma.$ExchangeRatesPayload>
/**
 * Model Expenses
 * 
 */
export type Expenses = $Result.DefaultSelection<Prisma.$ExpensesPayload>
/**
 * Model Projects
 * 
 */
export type Projects = $Result.DefaultSelection<Prisma.$ProjectsPayload>
/**
 * Model RoleRates
 * 
 */
export type RoleRates = $Result.DefaultSelection<Prisma.$RoleRatesPayload>
/**
 * Model sysdiagrams
 * 
 */
export type sysdiagrams = $Result.DefaultSelection<Prisma.$sysdiagramsPayload>
/**
 * Model TravelRequests
 * 
 */
export type TravelRequests = $Result.DefaultSelection<Prisma.$TravelRequestsPayload>
/**
 * Model Notifications
 * Notifications and alerts generated for users
 */
export type Notifications = $Result.DefaultSelection<Prisma.$NotificationsPayload>
/**
 * Model Approvals
 * Records of approval workflow actions and decisions
 */
export type Approvals = $Result.DefaultSelection<Prisma.$ApprovalsPayload>
/**
 * Model AuditLogs
 * System audit log entries (changes, events)
 */
export type AuditLogs = $Result.DefaultSelection<Prisma.$AuditLogsPayload>
/**
 * Model Lookups
 * Key-value lookup options (for dropdowns, types, etc.)
 */
export type Lookups = $Result.DefaultSelection<Prisma.$LookupsPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model roles
 * 
 */
export type roles = $Result.DefaultSelection<Prisma.$rolesPayload>
/**
 * Model Managers
 * 
 */
export type Managers = $Result.DefaultSelection<Prisma.$ManagersPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Activities
 * const activities = await prisma.activities.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Activities
   * const activities = await prisma.activities.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.activities`: Exposes CRUD operations for the **Activities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activities.findMany()
    * ```
    */
  get activities(): Prisma.ActivitiesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budgetAllocations`: Exposes CRUD operations for the **BudgetAllocations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BudgetAllocations
    * const budgetAllocations = await prisma.budgetAllocations.findMany()
    * ```
    */
  get budgetAllocations(): Prisma.BudgetAllocationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.budgets`: Exposes CRUD operations for the **Budgets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budgets.findMany()
    * ```
    */
  get budgets(): Prisma.BudgetsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **Clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.ClientsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.costSplits`: Exposes CRUD operations for the **CostSplits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CostSplits
    * const costSplits = await prisma.costSplits.findMany()
    * ```
    */
  get costSplits(): Prisma.CostSplitsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exchangeRates`: Exposes CRUD operations for the **ExchangeRates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExchangeRates
    * const exchangeRates = await prisma.exchangeRates.findMany()
    * ```
    */
  get exchangeRates(): Prisma.ExchangeRatesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expenses`: Exposes CRUD operations for the **Expenses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expenses.findMany()
    * ```
    */
  get expenses(): Prisma.ExpensesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **Projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.ProjectsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roleRates`: Exposes CRUD operations for the **RoleRates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoleRates
    * const roleRates = await prisma.roleRates.findMany()
    * ```
    */
  get roleRates(): Prisma.RoleRatesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sysdiagrams`: Exposes CRUD operations for the **sysdiagrams** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sysdiagrams
    * const sysdiagrams = await prisma.sysdiagrams.findMany()
    * ```
    */
  get sysdiagrams(): Prisma.sysdiagramsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.travelRequests`: Exposes CRUD operations for the **TravelRequests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TravelRequests
    * const travelRequests = await prisma.travelRequests.findMany()
    * ```
    */
  get travelRequests(): Prisma.TravelRequestsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notifications`: Exposes CRUD operations for the **Notifications** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notifications.findMany()
    * ```
    */
  get notifications(): Prisma.NotificationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approvals`: Exposes CRUD operations for the **Approvals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approvals.findMany()
    * ```
    */
  get approvals(): Prisma.ApprovalsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLogs`: Exposes CRUD operations for the **AuditLogs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLogs.findMany()
    * ```
    */
  get auditLogs(): Prisma.AuditLogsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lookups`: Exposes CRUD operations for the **Lookups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lookups
    * const lookups = await prisma.lookups.findMany()
    * ```
    */
  get lookups(): Prisma.LookupsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.rolesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.managers`: Exposes CRUD operations for the **Managers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Managers
    * const managers = await prisma.managers.findMany()
    * ```
    */
  get managers(): Prisma.ManagersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Activities: 'Activities',
    BudgetAllocations: 'BudgetAllocations',
    Budgets: 'Budgets',
    Clients: 'Clients',
    CostSplits: 'CostSplits',
    ExchangeRates: 'ExchangeRates',
    Expenses: 'Expenses',
    Projects: 'Projects',
    RoleRates: 'RoleRates',
    sysdiagrams: 'sysdiagrams',
    TravelRequests: 'TravelRequests',
    Notifications: 'Notifications',
    Approvals: 'Approvals',
    AuditLogs: 'AuditLogs',
    Lookups: 'Lookups',
    Users: 'Users',
    roles: 'roles',
    Managers: 'Managers'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "activities" | "budgetAllocations" | "budgets" | "clients" | "costSplits" | "exchangeRates" | "expenses" | "projects" | "roleRates" | "sysdiagrams" | "travelRequests" | "notifications" | "approvals" | "auditLogs" | "lookups" | "users" | "roles" | "managers"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Activities: {
        payload: Prisma.$ActivitiesPayload<ExtArgs>
        fields: Prisma.ActivitiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivitiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivitiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          findFirst: {
            args: Prisma.ActivitiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivitiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          findMany: {
            args: Prisma.ActivitiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>[]
          }
          create: {
            args: Prisma.ActivitiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          createMany: {
            args: Prisma.ActivitiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ActivitiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          update: {
            args: Prisma.ActivitiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          deleteMany: {
            args: Prisma.ActivitiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivitiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActivitiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitiesPayload>
          }
          aggregate: {
            args: Prisma.ActivitiesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivities>
          }
          groupBy: {
            args: Prisma.ActivitiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivitiesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivitiesCountArgs<ExtArgs>
            result: $Utils.Optional<ActivitiesCountAggregateOutputType> | number
          }
        }
      }
      BudgetAllocations: {
        payload: Prisma.$BudgetAllocationsPayload<ExtArgs>
        fields: Prisma.BudgetAllocationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetAllocationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetAllocationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          findFirst: {
            args: Prisma.BudgetAllocationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetAllocationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          findMany: {
            args: Prisma.BudgetAllocationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>[]
          }
          create: {
            args: Prisma.BudgetAllocationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          createMany: {
            args: Prisma.BudgetAllocationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BudgetAllocationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          update: {
            args: Prisma.BudgetAllocationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          deleteMany: {
            args: Prisma.BudgetAllocationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetAllocationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetAllocationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetAllocationsPayload>
          }
          aggregate: {
            args: Prisma.BudgetAllocationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgetAllocations>
          }
          groupBy: {
            args: Prisma.BudgetAllocationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetAllocationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetAllocationsCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetAllocationsCountAggregateOutputType> | number
          }
        }
      }
      Budgets: {
        payload: Prisma.$BudgetsPayload<ExtArgs>
        fields: Prisma.BudgetsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          findFirst: {
            args: Prisma.BudgetsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          findMany: {
            args: Prisma.BudgetsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>[]
          }
          create: {
            args: Prisma.BudgetsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          createMany: {
            args: Prisma.BudgetsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BudgetsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          update: {
            args: Prisma.BudgetsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          deleteMany: {
            args: Prisma.BudgetsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetsPayload>
          }
          aggregate: {
            args: Prisma.BudgetsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgets>
          }
          groupBy: {
            args: Prisma.BudgetsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetsCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetsCountAggregateOutputType> | number
          }
        }
      }
      Clients: {
        payload: Prisma.$ClientsPayload<ExtArgs>
        fields: Prisma.ClientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          findFirst: {
            args: Prisma.ClientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          findMany: {
            args: Prisma.ClientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>[]
          }
          create: {
            args: Prisma.ClientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          createMany: {
            args: Prisma.ClientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          update: {
            args: Prisma.ClientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          deleteMany: {
            args: Prisma.ClientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientsPayload>
          }
          aggregate: {
            args: Prisma.ClientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClients>
          }
          groupBy: {
            args: Prisma.ClientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientsCountArgs<ExtArgs>
            result: $Utils.Optional<ClientsCountAggregateOutputType> | number
          }
        }
      }
      CostSplits: {
        payload: Prisma.$CostSplitsPayload<ExtArgs>
        fields: Prisma.CostSplitsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CostSplitsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CostSplitsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          findFirst: {
            args: Prisma.CostSplitsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CostSplitsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          findMany: {
            args: Prisma.CostSplitsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>[]
          }
          create: {
            args: Prisma.CostSplitsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          createMany: {
            args: Prisma.CostSplitsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CostSplitsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          update: {
            args: Prisma.CostSplitsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          deleteMany: {
            args: Prisma.CostSplitsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CostSplitsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CostSplitsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostSplitsPayload>
          }
          aggregate: {
            args: Prisma.CostSplitsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCostSplits>
          }
          groupBy: {
            args: Prisma.CostSplitsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CostSplitsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CostSplitsCountArgs<ExtArgs>
            result: $Utils.Optional<CostSplitsCountAggregateOutputType> | number
          }
        }
      }
      ExchangeRates: {
        payload: Prisma.$ExchangeRatesPayload<ExtArgs>
        fields: Prisma.ExchangeRatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExchangeRatesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExchangeRatesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          findFirst: {
            args: Prisma.ExchangeRatesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExchangeRatesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          findMany: {
            args: Prisma.ExchangeRatesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>[]
          }
          create: {
            args: Prisma.ExchangeRatesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          createMany: {
            args: Prisma.ExchangeRatesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExchangeRatesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          update: {
            args: Prisma.ExchangeRatesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          deleteMany: {
            args: Prisma.ExchangeRatesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExchangeRatesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExchangeRatesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeRatesPayload>
          }
          aggregate: {
            args: Prisma.ExchangeRatesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExchangeRates>
          }
          groupBy: {
            args: Prisma.ExchangeRatesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExchangeRatesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExchangeRatesCountArgs<ExtArgs>
            result: $Utils.Optional<ExchangeRatesCountAggregateOutputType> | number
          }
        }
      }
      Expenses: {
        payload: Prisma.$ExpensesPayload<ExtArgs>
        fields: Prisma.ExpensesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpensesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpensesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          findFirst: {
            args: Prisma.ExpensesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpensesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          findMany: {
            args: Prisma.ExpensesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>[]
          }
          create: {
            args: Prisma.ExpensesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          createMany: {
            args: Prisma.ExpensesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExpensesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          update: {
            args: Prisma.ExpensesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          deleteMany: {
            args: Prisma.ExpensesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExpensesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExpensesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExpensesPayload>
          }
          aggregate: {
            args: Prisma.ExpensesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpenses>
          }
          groupBy: {
            args: Prisma.ExpensesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpensesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpensesCountArgs<ExtArgs>
            result: $Utils.Optional<ExpensesCountAggregateOutputType> | number
          }
        }
      }
      Projects: {
        payload: Prisma.$ProjectsPayload<ExtArgs>
        fields: Prisma.ProjectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findFirst: {
            args: Prisma.ProjectsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          findMany: {
            args: Prisma.ProjectsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>[]
          }
          create: {
            args: Prisma.ProjectsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          createMany: {
            args: Prisma.ProjectsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProjectsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          update: {
            args: Prisma.ProjectsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          deleteMany: {
            args: Prisma.ProjectsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectsPayload>
          }
          aggregate: {
            args: Prisma.ProjectsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjects>
          }
          groupBy: {
            args: Prisma.ProjectsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectsCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectsCountAggregateOutputType> | number
          }
        }
      }
      RoleRates: {
        payload: Prisma.$RoleRatesPayload<ExtArgs>
        fields: Prisma.RoleRatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleRatesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleRatesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          findFirst: {
            args: Prisma.RoleRatesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleRatesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          findMany: {
            args: Prisma.RoleRatesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>[]
          }
          create: {
            args: Prisma.RoleRatesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          createMany: {
            args: Prisma.RoleRatesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleRatesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          update: {
            args: Prisma.RoleRatesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          deleteMany: {
            args: Prisma.RoleRatesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleRatesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleRatesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleRatesPayload>
          }
          aggregate: {
            args: Prisma.RoleRatesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoleRates>
          }
          groupBy: {
            args: Prisma.RoleRatesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleRatesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleRatesCountArgs<ExtArgs>
            result: $Utils.Optional<RoleRatesCountAggregateOutputType> | number
          }
        }
      }
      sysdiagrams: {
        payload: Prisma.$sysdiagramsPayload<ExtArgs>
        fields: Prisma.sysdiagramsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sysdiagramsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sysdiagramsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          findFirst: {
            args: Prisma.sysdiagramsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sysdiagramsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          findMany: {
            args: Prisma.sysdiagramsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>[]
          }
          create: {
            args: Prisma.sysdiagramsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          createMany: {
            args: Prisma.sysdiagramsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sysdiagramsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          update: {
            args: Prisma.sysdiagramsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          deleteMany: {
            args: Prisma.sysdiagramsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sysdiagramsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sysdiagramsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sysdiagramsPayload>
          }
          aggregate: {
            args: Prisma.SysdiagramsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSysdiagrams>
          }
          groupBy: {
            args: Prisma.sysdiagramsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SysdiagramsGroupByOutputType>[]
          }
          count: {
            args: Prisma.sysdiagramsCountArgs<ExtArgs>
            result: $Utils.Optional<SysdiagramsCountAggregateOutputType> | number
          }
        }
      }
      TravelRequests: {
        payload: Prisma.$TravelRequestsPayload<ExtArgs>
        fields: Prisma.TravelRequestsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TravelRequestsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TravelRequestsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          findFirst: {
            args: Prisma.TravelRequestsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TravelRequestsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          findMany: {
            args: Prisma.TravelRequestsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>[]
          }
          create: {
            args: Prisma.TravelRequestsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          createMany: {
            args: Prisma.TravelRequestsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TravelRequestsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          update: {
            args: Prisma.TravelRequestsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          deleteMany: {
            args: Prisma.TravelRequestsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TravelRequestsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TravelRequestsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TravelRequestsPayload>
          }
          aggregate: {
            args: Prisma.TravelRequestsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTravelRequests>
          }
          groupBy: {
            args: Prisma.TravelRequestsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TravelRequestsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TravelRequestsCountArgs<ExtArgs>
            result: $Utils.Optional<TravelRequestsCountAggregateOutputType> | number
          }
        }
      }
      Notifications: {
        payload: Prisma.$NotificationsPayload<ExtArgs>
        fields: Prisma.NotificationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findFirst: {
            args: Prisma.NotificationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          findMany: {
            args: Prisma.NotificationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>[]
          }
          create: {
            args: Prisma.NotificationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          createMany: {
            args: Prisma.NotificationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          update: {
            args: Prisma.NotificationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationsPayload>
          }
          aggregate: {
            args: Prisma.NotificationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotifications>
          }
          groupBy: {
            args: Prisma.NotificationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationsCountAggregateOutputType> | number
          }
        }
      }
      Approvals: {
        payload: Prisma.$ApprovalsPayload<ExtArgs>
        fields: Prisma.ApprovalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          findFirst: {
            args: Prisma.ApprovalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          findMany: {
            args: Prisma.ApprovalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>[]
          }
          create: {
            args: Prisma.ApprovalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          createMany: {
            args: Prisma.ApprovalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApprovalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          update: {
            args: Prisma.ApprovalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApprovalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalsPayload>
          }
          aggregate: {
            args: Prisma.ApprovalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApprovals>
          }
          groupBy: {
            args: Prisma.ApprovalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalsCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalsCountAggregateOutputType> | number
          }
        }
      }
      AuditLogs: {
        payload: Prisma.$AuditLogsPayload<ExtArgs>
        fields: Prisma.AuditLogsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          findFirst: {
            args: Prisma.AuditLogsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          findMany: {
            args: Prisma.AuditLogsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>[]
          }
          create: {
            args: Prisma.AuditLogsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          createMany: {
            args: Prisma.AuditLogsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuditLogsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          update: {
            args: Prisma.AuditLogsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogsPayload>
          }
          aggregate: {
            args: Prisma.AuditLogsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLogs>
          }
          groupBy: {
            args: Prisma.AuditLogsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogsCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogsCountAggregateOutputType> | number
          }
        }
      }
      Lookups: {
        payload: Prisma.$LookupsPayload<ExtArgs>
        fields: Prisma.LookupsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LookupsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LookupsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          findFirst: {
            args: Prisma.LookupsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LookupsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          findMany: {
            args: Prisma.LookupsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>[]
          }
          create: {
            args: Prisma.LookupsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          createMany: {
            args: Prisma.LookupsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LookupsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          update: {
            args: Prisma.LookupsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          deleteMany: {
            args: Prisma.LookupsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LookupsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LookupsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LookupsPayload>
          }
          aggregate: {
            args: Prisma.LookupsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLookups>
          }
          groupBy: {
            args: Prisma.LookupsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LookupsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LookupsCountArgs<ExtArgs>
            result: $Utils.Optional<LookupsCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      roles: {
        payload: Prisma.$rolesPayload<ExtArgs>
        fields: Prisma.rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findFirst: {
            args: Prisma.rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findMany: {
            args: Prisma.rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          create: {
            args: Prisma.rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          createMany: {
            args: Prisma.rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          update: {
            args: Prisma.rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          deleteMany: {
            args: Prisma.rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.rolesCountArgs<ExtArgs>
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      Managers: {
        payload: Prisma.$ManagersPayload<ExtArgs>
        fields: Prisma.ManagersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManagersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManagersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          findFirst: {
            args: Prisma.ManagersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManagersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          findMany: {
            args: Prisma.ManagersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>[]
          }
          create: {
            args: Prisma.ManagersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          createMany: {
            args: Prisma.ManagersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ManagersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          update: {
            args: Prisma.ManagersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          deleteMany: {
            args: Prisma.ManagersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManagersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManagersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagersPayload>
          }
          aggregate: {
            args: Prisma.ManagersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManagers>
          }
          groupBy: {
            args: Prisma.ManagersGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManagersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManagersCountArgs<ExtArgs>
            result: $Utils.Optional<ManagersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    activities?: ActivitiesOmit
    budgetAllocations?: BudgetAllocationsOmit
    budgets?: BudgetsOmit
    clients?: ClientsOmit
    costSplits?: CostSplitsOmit
    exchangeRates?: ExchangeRatesOmit
    expenses?: ExpensesOmit
    projects?: ProjectsOmit
    roleRates?: RoleRatesOmit
    sysdiagrams?: sysdiagramsOmit
    travelRequests?: TravelRequestsOmit
    notifications?: NotificationsOmit
    approvals?: ApprovalsOmit
    auditLogs?: AuditLogsOmit
    lookups?: LookupsOmit
    users?: UsersOmit
    roles?: rolesOmit
    managers?: ManagersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BudgetsCountOutputType
   */

  export type BudgetsCountOutputType = {
    BudgetAllocations: number
  }

  export type BudgetsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BudgetAllocations?: boolean | BudgetsCountOutputTypeCountBudgetAllocationsArgs
  }

  // Custom InputTypes
  /**
   * BudgetsCountOutputType without action
   */
  export type BudgetsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetsCountOutputType
     */
    select?: BudgetsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BudgetsCountOutputType without action
   */
  export type BudgetsCountOutputTypeCountBudgetAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetAllocationsWhereInput
  }


  /**
   * Count Type ClientsCountOutputType
   */

  export type ClientsCountOutputType = {
    Projects: number
  }

  export type ClientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Projects?: boolean | ClientsCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }


  /**
   * Count Type ProjectsCountOutputType
   */

  export type ProjectsCountOutputType = {
    Activities: number
    Budgets: number
    CostSplits: number
    Expenses: number
    users: number
    TravelRequests: number
    Managers: number
  }

  export type ProjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Activities?: boolean | ProjectsCountOutputTypeCountActivitiesArgs
    Budgets?: boolean | ProjectsCountOutputTypeCountBudgetsArgs
    CostSplits?: boolean | ProjectsCountOutputTypeCountCostSplitsArgs
    Expenses?: boolean | ProjectsCountOutputTypeCountExpensesArgs
    users?: boolean | ProjectsCountOutputTypeCountUsersArgs
    TravelRequests?: boolean | ProjectsCountOutputTypeCountTravelRequestsArgs
    Managers?: boolean | ProjectsCountOutputTypeCountManagersArgs
  }

  // Custom InputTypes
  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsCountOutputType
     */
    select?: ProjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitiesWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountBudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountCostSplitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostSplitsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpensesWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountTravelRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelRequestsWhereInput
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagersWhereInput
  }


  /**
   * Count Type RoleRatesCountOutputType
   */

  export type RoleRatesCountOutputType = {
    roles: number
  }

  export type RoleRatesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | RoleRatesCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * RoleRatesCountOutputType without action
   */
  export type RoleRatesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRatesCountOutputType
     */
    select?: RoleRatesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleRatesCountOutputType without action
   */
  export type RoleRatesCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    Activities: number
    BudgetAllocations: number
    Budgets: number
    CostSplits: number
    Expenses: number
    Projects: number
    Managers: number
    TravelRequests: number
    Notifications: number
    Approvals: number
    AuditLogs: number
    roles: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Activities?: boolean | UsersCountOutputTypeCountActivitiesArgs
    BudgetAllocations?: boolean | UsersCountOutputTypeCountBudgetAllocationsArgs
    Budgets?: boolean | UsersCountOutputTypeCountBudgetsArgs
    CostSplits?: boolean | UsersCountOutputTypeCountCostSplitsArgs
    Expenses?: boolean | UsersCountOutputTypeCountExpensesArgs
    Projects?: boolean | UsersCountOutputTypeCountProjectsArgs
    Managers?: boolean | UsersCountOutputTypeCountManagersArgs
    TravelRequests?: boolean | UsersCountOutputTypeCountTravelRequestsArgs
    Notifications?: boolean | UsersCountOutputTypeCountNotificationsArgs
    Approvals?: boolean | UsersCountOutputTypeCountApprovalsArgs
    AuditLogs?: boolean | UsersCountOutputTypeCountAuditLogsArgs
    roles?: boolean | UsersCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitiesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBudgetAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetAllocationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCostSplitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostSplitsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpensesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTravelRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelRequestsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
  }


  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    Users: number
    RoleRates: number
    Managers: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | RolesCountOutputTypeCountUsersArgs
    RoleRates?: boolean | RolesCountOutputTypeCountRoleRatesArgs
    Managers?: boolean | RolesCountOutputTypeCountManagersArgs
  }

  // Custom InputTypes
  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountRoleRatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleRatesWhereInput
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagersWhereInput
  }


  /**
   * Count Type ManagersCountOutputType
   */

  export type ManagersCountOutputType = {
    Users: number
    roles: number
    Projects: number
  }

  export type ManagersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | ManagersCountOutputTypeCountUsersArgs
    roles?: boolean | ManagersCountOutputTypeCountRolesArgs
    Projects?: boolean | ManagersCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes
  /**
   * ManagersCountOutputType without action
   */
  export type ManagersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagersCountOutputType
     */
    select?: ManagersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ManagersCountOutputType without action
   */
  export type ManagersCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }

  /**
   * ManagersCountOutputType without action
   */
  export type ManagersCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
  }

  /**
   * ManagersCountOutputType without action
   */
  export type ManagersCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Activities
   */

  export type AggregateActivities = {
    _count: ActivitiesCountAggregateOutputType | null
    _avg: ActivitiesAvgAggregateOutputType | null
    _sum: ActivitiesSumAggregateOutputType | null
    _min: ActivitiesMinAggregateOutputType | null
    _max: ActivitiesMaxAggregateOutputType | null
  }

  export type ActivitiesAvgAggregateOutputType = {
    hours: number | null
    progress: number | null
  }

  export type ActivitiesSumAggregateOutputType = {
    hours: number | null
    progress: number | null
  }

  export type ActivitiesMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    date: Date | null
    hours: number | null
    progress: number | null
    notes: string | null
  }

  export type ActivitiesMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    userId: string | null
    date: Date | null
    hours: number | null
    progress: number | null
    notes: string | null
  }

  export type ActivitiesCountAggregateOutputType = {
    id: number
    projectId: number
    userId: number
    date: number
    hours: number
    progress: number
    notes: number
    _all: number
  }


  export type ActivitiesAvgAggregateInputType = {
    hours?: true
    progress?: true
  }

  export type ActivitiesSumAggregateInputType = {
    hours?: true
    progress?: true
  }

  export type ActivitiesMinAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    date?: true
    hours?: true
    progress?: true
    notes?: true
  }

  export type ActivitiesMaxAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    date?: true
    hours?: true
    progress?: true
    notes?: true
  }

  export type ActivitiesCountAggregateInputType = {
    id?: true
    projectId?: true
    userId?: true
    date?: true
    hours?: true
    progress?: true
    notes?: true
    _all?: true
  }

  export type ActivitiesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to aggregate.
     */
    where?: ActivitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivitiesMaxAggregateInputType
  }

  export type GetActivitiesAggregateType<T extends ActivitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateActivities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivities[P]>
      : GetScalarType<T[P], AggregateActivities[P]>
  }




  export type ActivitiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitiesWhereInput
    orderBy?: ActivitiesOrderByWithAggregationInput | ActivitiesOrderByWithAggregationInput[]
    by: ActivitiesScalarFieldEnum[] | ActivitiesScalarFieldEnum
    having?: ActivitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivitiesCountAggregateInputType | true
    _avg?: ActivitiesAvgAggregateInputType
    _sum?: ActivitiesSumAggregateInputType
    _min?: ActivitiesMinAggregateInputType
    _max?: ActivitiesMaxAggregateInputType
  }

  export type ActivitiesGroupByOutputType = {
    id: string
    projectId: string
    userId: string
    date: Date
    hours: number
    progress: number | null
    notes: string | null
    _count: ActivitiesCountAggregateOutputType | null
    _avg: ActivitiesAvgAggregateOutputType | null
    _sum: ActivitiesSumAggregateOutputType | null
    _min: ActivitiesMinAggregateOutputType | null
    _max: ActivitiesMaxAggregateOutputType | null
  }

  type GetActivitiesGroupByPayload<T extends ActivitiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivitiesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivitiesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivitiesGroupByOutputType[P]>
            : GetScalarType<T[P], ActivitiesGroupByOutputType[P]>
        }
      >
    >


  export type ActivitiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    userId?: boolean
    date?: boolean
    hours?: boolean
    progress?: boolean
    notes?: boolean
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activities"]>



  export type ActivitiesSelectScalar = {
    id?: boolean
    projectId?: boolean
    userId?: boolean
    date?: boolean
    hours?: boolean
    progress?: boolean
    notes?: boolean
  }

  export type ActivitiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "userId" | "date" | "hours" | "progress" | "notes", ExtArgs["result"]["activities"]>
  export type ActivitiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $ActivitiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activities"
    objects: {
      Projects: Prisma.$ProjectsPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      userId: string
      date: Date
      hours: number
      progress: number | null
      notes: string | null
    }, ExtArgs["result"]["activities"]>
    composites: {}
  }

  type ActivitiesGetPayload<S extends boolean | null | undefined | ActivitiesDefaultArgs> = $Result.GetResult<Prisma.$ActivitiesPayload, S>

  type ActivitiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivitiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivitiesCountAggregateInputType | true
    }

  export interface ActivitiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activities'], meta: { name: 'Activities' } }
    /**
     * Find zero or one Activities that matches the filter.
     * @param {ActivitiesFindUniqueArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivitiesFindUniqueArgs>(args: SelectSubset<T, ActivitiesFindUniqueArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activities that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivitiesFindUniqueOrThrowArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivitiesFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivitiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesFindFirstArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivitiesFindFirstArgs>(args?: SelectSubset<T, ActivitiesFindFirstArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activities that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesFindFirstOrThrowArgs} args - Arguments to find a Activities
     * @example
     * // Get one Activities
     * const activities = await prisma.activities.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivitiesFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivitiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activities.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activitiesWithIdOnly = await prisma.activities.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivitiesFindManyArgs>(args?: SelectSubset<T, ActivitiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activities.
     * @param {ActivitiesCreateArgs} args - Arguments to create a Activities.
     * @example
     * // Create one Activities
     * const Activities = await prisma.activities.create({
     *   data: {
     *     // ... data to create a Activities
     *   }
     * })
     * 
     */
    create<T extends ActivitiesCreateArgs>(args: SelectSubset<T, ActivitiesCreateArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivitiesCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activities = await prisma.activities.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivitiesCreateManyArgs>(args?: SelectSubset<T, ActivitiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activities.
     * @param {ActivitiesDeleteArgs} args - Arguments to delete one Activities.
     * @example
     * // Delete one Activities
     * const Activities = await prisma.activities.delete({
     *   where: {
     *     // ... filter to delete one Activities
     *   }
     * })
     * 
     */
    delete<T extends ActivitiesDeleteArgs>(args: SelectSubset<T, ActivitiesDeleteArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activities.
     * @param {ActivitiesUpdateArgs} args - Arguments to update one Activities.
     * @example
     * // Update one Activities
     * const activities = await prisma.activities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivitiesUpdateArgs>(args: SelectSubset<T, ActivitiesUpdateArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivitiesDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivitiesDeleteManyArgs>(args?: SelectSubset<T, ActivitiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activities = await prisma.activities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivitiesUpdateManyArgs>(args: SelectSubset<T, ActivitiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activities.
     * @param {ActivitiesUpsertArgs} args - Arguments to update or create a Activities.
     * @example
     * // Update or create a Activities
     * const activities = await prisma.activities.upsert({
     *   create: {
     *     // ... data to create a Activities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activities we want to update
     *   }
     * })
     */
    upsert<T extends ActivitiesUpsertArgs>(args: SelectSubset<T, ActivitiesUpsertArgs<ExtArgs>>): Prisma__ActivitiesClient<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activities.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivitiesCountArgs>(
      args?: Subset<T, ActivitiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivitiesAggregateArgs>(args: Subset<T, ActivitiesAggregateArgs>): Prisma.PrismaPromise<GetActivitiesAggregateType<T>>

    /**
     * Group by Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivitiesGroupByArgs['orderBy'] }
        : { orderBy?: ActivitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivitiesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activities model
   */
  readonly fields: ActivitiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivitiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Projects<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activities model
   */
  interface ActivitiesFieldRefs {
    readonly id: FieldRef<"Activities", 'String'>
    readonly projectId: FieldRef<"Activities", 'String'>
    readonly userId: FieldRef<"Activities", 'String'>
    readonly date: FieldRef<"Activities", 'DateTime'>
    readonly hours: FieldRef<"Activities", 'Float'>
    readonly progress: FieldRef<"Activities", 'Int'>
    readonly notes: FieldRef<"Activities", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Activities findUnique
   */
  export type ActivitiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where: ActivitiesWhereUniqueInput
  }

  /**
   * Activities findUniqueOrThrow
   */
  export type ActivitiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where: ActivitiesWhereUniqueInput
  }

  /**
   * Activities findFirst
   */
  export type ActivitiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivitiesScalarFieldEnum | ActivitiesScalarFieldEnum[]
  }

  /**
   * Activities findFirstOrThrow
   */
  export type ActivitiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivitiesScalarFieldEnum | ActivitiesScalarFieldEnum[]
  }

  /**
   * Activities findMany
   */
  export type ActivitiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivitiesScalarFieldEnum | ActivitiesScalarFieldEnum[]
  }

  /**
   * Activities create
   */
  export type ActivitiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * The data needed to create a Activities.
     */
    data: XOR<ActivitiesCreateInput, ActivitiesUncheckedCreateInput>
  }

  /**
   * Activities createMany
   */
  export type ActivitiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivitiesCreateManyInput | ActivitiesCreateManyInput[]
  }

  /**
   * Activities update
   */
  export type ActivitiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * The data needed to update a Activities.
     */
    data: XOR<ActivitiesUpdateInput, ActivitiesUncheckedUpdateInput>
    /**
     * Choose, which Activities to update.
     */
    where: ActivitiesWhereUniqueInput
  }

  /**
   * Activities updateMany
   */
  export type ActivitiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivitiesUpdateManyMutationInput, ActivitiesUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivitiesWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activities upsert
   */
  export type ActivitiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * The filter to search for the Activities to update in case it exists.
     */
    where: ActivitiesWhereUniqueInput
    /**
     * In case the Activities found by the `where` argument doesn't exist, create a new Activities with this data.
     */
    create: XOR<ActivitiesCreateInput, ActivitiesUncheckedCreateInput>
    /**
     * In case the Activities was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivitiesUpdateInput, ActivitiesUncheckedUpdateInput>
  }

  /**
   * Activities delete
   */
  export type ActivitiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    /**
     * Filter which Activities to delete.
     */
    where: ActivitiesWhereUniqueInput
  }

  /**
   * Activities deleteMany
   */
  export type ActivitiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivitiesWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activities without action
   */
  export type ActivitiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
  }


  /**
   * Model BudgetAllocations
   */

  export type AggregateBudgetAllocations = {
    _count: BudgetAllocationsCountAggregateOutputType | null
    _avg: BudgetAllocationsAvgAggregateOutputType | null
    _sum: BudgetAllocationsSumAggregateOutputType | null
    _min: BudgetAllocationsMinAggregateOutputType | null
    _max: BudgetAllocationsMaxAggregateOutputType | null
  }

  export type BudgetAllocationsAvgAggregateOutputType = {
    hours: number | null
    rate: Decimal | null
  }

  export type BudgetAllocationsSumAggregateOutputType = {
    hours: number | null
    rate: Decimal | null
  }

  export type BudgetAllocationsMinAggregateOutputType = {
    id: string | null
    budgetId: string | null
    userId: string | null
    hours: number | null
    rate: Decimal | null
  }

  export type BudgetAllocationsMaxAggregateOutputType = {
    id: string | null
    budgetId: string | null
    userId: string | null
    hours: number | null
    rate: Decimal | null
  }

  export type BudgetAllocationsCountAggregateOutputType = {
    id: number
    budgetId: number
    userId: number
    hours: number
    rate: number
    _all: number
  }


  export type BudgetAllocationsAvgAggregateInputType = {
    hours?: true
    rate?: true
  }

  export type BudgetAllocationsSumAggregateInputType = {
    hours?: true
    rate?: true
  }

  export type BudgetAllocationsMinAggregateInputType = {
    id?: true
    budgetId?: true
    userId?: true
    hours?: true
    rate?: true
  }

  export type BudgetAllocationsMaxAggregateInputType = {
    id?: true
    budgetId?: true
    userId?: true
    hours?: true
    rate?: true
  }

  export type BudgetAllocationsCountAggregateInputType = {
    id?: true
    budgetId?: true
    userId?: true
    hours?: true
    rate?: true
    _all?: true
  }

  export type BudgetAllocationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetAllocations to aggregate.
     */
    where?: BudgetAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetAllocations to fetch.
     */
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BudgetAllocations
    **/
    _count?: true | BudgetAllocationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetAllocationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetAllocationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetAllocationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetAllocationsMaxAggregateInputType
  }

  export type GetBudgetAllocationsAggregateType<T extends BudgetAllocationsAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgetAllocations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgetAllocations[P]>
      : GetScalarType<T[P], AggregateBudgetAllocations[P]>
  }




  export type BudgetAllocationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetAllocationsWhereInput
    orderBy?: BudgetAllocationsOrderByWithAggregationInput | BudgetAllocationsOrderByWithAggregationInput[]
    by: BudgetAllocationsScalarFieldEnum[] | BudgetAllocationsScalarFieldEnum
    having?: BudgetAllocationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetAllocationsCountAggregateInputType | true
    _avg?: BudgetAllocationsAvgAggregateInputType
    _sum?: BudgetAllocationsSumAggregateInputType
    _min?: BudgetAllocationsMinAggregateInputType
    _max?: BudgetAllocationsMaxAggregateInputType
  }

  export type BudgetAllocationsGroupByOutputType = {
    id: string
    budgetId: string
    userId: string
    hours: number
    rate: Decimal
    _count: BudgetAllocationsCountAggregateOutputType | null
    _avg: BudgetAllocationsAvgAggregateOutputType | null
    _sum: BudgetAllocationsSumAggregateOutputType | null
    _min: BudgetAllocationsMinAggregateOutputType | null
    _max: BudgetAllocationsMaxAggregateOutputType | null
  }

  type GetBudgetAllocationsGroupByPayload<T extends BudgetAllocationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetAllocationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetAllocationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetAllocationsGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetAllocationsGroupByOutputType[P]>
        }
      >
    >


  export type BudgetAllocationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    budgetId?: boolean
    userId?: boolean
    hours?: boolean
    rate?: boolean
    Budgets?: boolean | BudgetsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetAllocations"]>



  export type BudgetAllocationsSelectScalar = {
    id?: boolean
    budgetId?: boolean
    userId?: boolean
    hours?: boolean
    rate?: boolean
  }

  export type BudgetAllocationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "budgetId" | "userId" | "hours" | "rate", ExtArgs["result"]["budgetAllocations"]>
  export type BudgetAllocationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Budgets?: boolean | BudgetsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $BudgetAllocationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BudgetAllocations"
    objects: {
      Budgets: Prisma.$BudgetsPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      budgetId: string
      userId: string
      hours: number
      rate: Prisma.Decimal
    }, ExtArgs["result"]["budgetAllocations"]>
    composites: {}
  }

  type BudgetAllocationsGetPayload<S extends boolean | null | undefined | BudgetAllocationsDefaultArgs> = $Result.GetResult<Prisma.$BudgetAllocationsPayload, S>

  type BudgetAllocationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BudgetAllocationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetAllocationsCountAggregateInputType | true
    }

  export interface BudgetAllocationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BudgetAllocations'], meta: { name: 'BudgetAllocations' } }
    /**
     * Find zero or one BudgetAllocations that matches the filter.
     * @param {BudgetAllocationsFindUniqueArgs} args - Arguments to find a BudgetAllocations
     * @example
     * // Get one BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetAllocationsFindUniqueArgs>(args: SelectSubset<T, BudgetAllocationsFindUniqueArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BudgetAllocations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BudgetAllocationsFindUniqueOrThrowArgs} args - Arguments to find a BudgetAllocations
     * @example
     * // Get one BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetAllocationsFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetAllocationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BudgetAllocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsFindFirstArgs} args - Arguments to find a BudgetAllocations
     * @example
     * // Get one BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetAllocationsFindFirstArgs>(args?: SelectSubset<T, BudgetAllocationsFindFirstArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BudgetAllocations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsFindFirstOrThrowArgs} args - Arguments to find a BudgetAllocations
     * @example
     * // Get one BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetAllocationsFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetAllocationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BudgetAllocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findMany()
     * 
     * // Get first 10 BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetAllocationsWithIdOnly = await prisma.budgetAllocations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetAllocationsFindManyArgs>(args?: SelectSubset<T, BudgetAllocationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BudgetAllocations.
     * @param {BudgetAllocationsCreateArgs} args - Arguments to create a BudgetAllocations.
     * @example
     * // Create one BudgetAllocations
     * const BudgetAllocations = await prisma.budgetAllocations.create({
     *   data: {
     *     // ... data to create a BudgetAllocations
     *   }
     * })
     * 
     */
    create<T extends BudgetAllocationsCreateArgs>(args: SelectSubset<T, BudgetAllocationsCreateArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BudgetAllocations.
     * @param {BudgetAllocationsCreateManyArgs} args - Arguments to create many BudgetAllocations.
     * @example
     * // Create many BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetAllocationsCreateManyArgs>(args?: SelectSubset<T, BudgetAllocationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BudgetAllocations.
     * @param {BudgetAllocationsDeleteArgs} args - Arguments to delete one BudgetAllocations.
     * @example
     * // Delete one BudgetAllocations
     * const BudgetAllocations = await prisma.budgetAllocations.delete({
     *   where: {
     *     // ... filter to delete one BudgetAllocations
     *   }
     * })
     * 
     */
    delete<T extends BudgetAllocationsDeleteArgs>(args: SelectSubset<T, BudgetAllocationsDeleteArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BudgetAllocations.
     * @param {BudgetAllocationsUpdateArgs} args - Arguments to update one BudgetAllocations.
     * @example
     * // Update one BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetAllocationsUpdateArgs>(args: SelectSubset<T, BudgetAllocationsUpdateArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BudgetAllocations.
     * @param {BudgetAllocationsDeleteManyArgs} args - Arguments to filter BudgetAllocations to delete.
     * @example
     * // Delete a few BudgetAllocations
     * const { count } = await prisma.budgetAllocations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetAllocationsDeleteManyArgs>(args?: SelectSubset<T, BudgetAllocationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BudgetAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetAllocationsUpdateManyArgs>(args: SelectSubset<T, BudgetAllocationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BudgetAllocations.
     * @param {BudgetAllocationsUpsertArgs} args - Arguments to update or create a BudgetAllocations.
     * @example
     * // Update or create a BudgetAllocations
     * const budgetAllocations = await prisma.budgetAllocations.upsert({
     *   create: {
     *     // ... data to create a BudgetAllocations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BudgetAllocations we want to update
     *   }
     * })
     */
    upsert<T extends BudgetAllocationsUpsertArgs>(args: SelectSubset<T, BudgetAllocationsUpsertArgs<ExtArgs>>): Prisma__BudgetAllocationsClient<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BudgetAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsCountArgs} args - Arguments to filter BudgetAllocations to count.
     * @example
     * // Count the number of BudgetAllocations
     * const count = await prisma.budgetAllocations.count({
     *   where: {
     *     // ... the filter for the BudgetAllocations we want to count
     *   }
     * })
    **/
    count<T extends BudgetAllocationsCountArgs>(
      args?: Subset<T, BudgetAllocationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetAllocationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BudgetAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetAllocationsAggregateArgs>(args: Subset<T, BudgetAllocationsAggregateArgs>): Prisma.PrismaPromise<GetBudgetAllocationsAggregateType<T>>

    /**
     * Group by BudgetAllocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAllocationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetAllocationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetAllocationsGroupByArgs['orderBy'] }
        : { orderBy?: BudgetAllocationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetAllocationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetAllocationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BudgetAllocations model
   */
  readonly fields: BudgetAllocationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BudgetAllocations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetAllocationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Budgets<T extends BudgetsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BudgetsDefaultArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BudgetAllocations model
   */
  interface BudgetAllocationsFieldRefs {
    readonly id: FieldRef<"BudgetAllocations", 'String'>
    readonly budgetId: FieldRef<"BudgetAllocations", 'String'>
    readonly userId: FieldRef<"BudgetAllocations", 'String'>
    readonly hours: FieldRef<"BudgetAllocations", 'Float'>
    readonly rate: FieldRef<"BudgetAllocations", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * BudgetAllocations findUnique
   */
  export type BudgetAllocationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which BudgetAllocations to fetch.
     */
    where: BudgetAllocationsWhereUniqueInput
  }

  /**
   * BudgetAllocations findUniqueOrThrow
   */
  export type BudgetAllocationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which BudgetAllocations to fetch.
     */
    where: BudgetAllocationsWhereUniqueInput
  }

  /**
   * BudgetAllocations findFirst
   */
  export type BudgetAllocationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which BudgetAllocations to fetch.
     */
    where?: BudgetAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetAllocations to fetch.
     */
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetAllocations.
     */
    cursor?: BudgetAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetAllocations.
     */
    distinct?: BudgetAllocationsScalarFieldEnum | BudgetAllocationsScalarFieldEnum[]
  }

  /**
   * BudgetAllocations findFirstOrThrow
   */
  export type BudgetAllocationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which BudgetAllocations to fetch.
     */
    where?: BudgetAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetAllocations to fetch.
     */
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetAllocations.
     */
    cursor?: BudgetAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetAllocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetAllocations.
     */
    distinct?: BudgetAllocationsScalarFieldEnum | BudgetAllocationsScalarFieldEnum[]
  }

  /**
   * BudgetAllocations findMany
   */
  export type BudgetAllocationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter, which BudgetAllocations to fetch.
     */
    where?: BudgetAllocationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetAllocations to fetch.
     */
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BudgetAllocations.
     */
    cursor?: BudgetAllocationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetAllocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetAllocations.
     */
    skip?: number
    distinct?: BudgetAllocationsScalarFieldEnum | BudgetAllocationsScalarFieldEnum[]
  }

  /**
   * BudgetAllocations create
   */
  export type BudgetAllocationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * The data needed to create a BudgetAllocations.
     */
    data: XOR<BudgetAllocationsCreateInput, BudgetAllocationsUncheckedCreateInput>
  }

  /**
   * BudgetAllocations createMany
   */
  export type BudgetAllocationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BudgetAllocations.
     */
    data: BudgetAllocationsCreateManyInput | BudgetAllocationsCreateManyInput[]
  }

  /**
   * BudgetAllocations update
   */
  export type BudgetAllocationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * The data needed to update a BudgetAllocations.
     */
    data: XOR<BudgetAllocationsUpdateInput, BudgetAllocationsUncheckedUpdateInput>
    /**
     * Choose, which BudgetAllocations to update.
     */
    where: BudgetAllocationsWhereUniqueInput
  }

  /**
   * BudgetAllocations updateMany
   */
  export type BudgetAllocationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BudgetAllocations.
     */
    data: XOR<BudgetAllocationsUpdateManyMutationInput, BudgetAllocationsUncheckedUpdateManyInput>
    /**
     * Filter which BudgetAllocations to update
     */
    where?: BudgetAllocationsWhereInput
    /**
     * Limit how many BudgetAllocations to update.
     */
    limit?: number
  }

  /**
   * BudgetAllocations upsert
   */
  export type BudgetAllocationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * The filter to search for the BudgetAllocations to update in case it exists.
     */
    where: BudgetAllocationsWhereUniqueInput
    /**
     * In case the BudgetAllocations found by the `where` argument doesn't exist, create a new BudgetAllocations with this data.
     */
    create: XOR<BudgetAllocationsCreateInput, BudgetAllocationsUncheckedCreateInput>
    /**
     * In case the BudgetAllocations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetAllocationsUpdateInput, BudgetAllocationsUncheckedUpdateInput>
  }

  /**
   * BudgetAllocations delete
   */
  export type BudgetAllocationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    /**
     * Filter which BudgetAllocations to delete.
     */
    where: BudgetAllocationsWhereUniqueInput
  }

  /**
   * BudgetAllocations deleteMany
   */
  export type BudgetAllocationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetAllocations to delete
     */
    where?: BudgetAllocationsWhereInput
    /**
     * Limit how many BudgetAllocations to delete.
     */
    limit?: number
  }

  /**
   * BudgetAllocations without action
   */
  export type BudgetAllocationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
  }


  /**
   * Model Budgets
   */

  export type AggregateBudgets = {
    _count: BudgetsCountAggregateOutputType | null
    _min: BudgetsMinAggregateOutputType | null
    _max: BudgetsMaxAggregateOutputType | null
  }

  export type BudgetsMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    itemType: string | null
    description: string | null
    status: string | null
    createdById: string | null
  }

  export type BudgetsMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    itemType: string | null
    description: string | null
    status: string | null
    createdById: string | null
  }

  export type BudgetsCountAggregateOutputType = {
    id: number
    projectId: number
    itemType: number
    description: number
    status: number
    createdById: number
    _all: number
  }


  export type BudgetsMinAggregateInputType = {
    id?: true
    projectId?: true
    itemType?: true
    description?: true
    status?: true
    createdById?: true
  }

  export type BudgetsMaxAggregateInputType = {
    id?: true
    projectId?: true
    itemType?: true
    description?: true
    status?: true
    createdById?: true
  }

  export type BudgetsCountAggregateInputType = {
    id?: true
    projectId?: true
    itemType?: true
    description?: true
    status?: true
    createdById?: true
    _all?: true
  }

  export type BudgetsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budgets to aggregate.
     */
    where?: BudgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Budgets
    **/
    _count?: true | BudgetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetsMaxAggregateInputType
  }

  export type GetBudgetsAggregateType<T extends BudgetsAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgets[P]>
      : GetScalarType<T[P], AggregateBudgets[P]>
  }




  export type BudgetsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetsWhereInput
    orderBy?: BudgetsOrderByWithAggregationInput | BudgetsOrderByWithAggregationInput[]
    by: BudgetsScalarFieldEnum[] | BudgetsScalarFieldEnum
    having?: BudgetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetsCountAggregateInputType | true
    _min?: BudgetsMinAggregateInputType
    _max?: BudgetsMaxAggregateInputType
  }

  export type BudgetsGroupByOutputType = {
    id: string
    projectId: string
    itemType: string
    description: string | null
    status: string | null
    createdById: string
    _count: BudgetsCountAggregateOutputType | null
    _min: BudgetsMinAggregateOutputType | null
    _max: BudgetsMaxAggregateOutputType | null
  }

  type GetBudgetsGroupByPayload<T extends BudgetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetsGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetsGroupByOutputType[P]>
        }
      >
    >


  export type BudgetsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    itemType?: boolean
    description?: boolean
    status?: boolean
    createdById?: boolean
    BudgetAllocations?: boolean | Budgets$BudgetAllocationsArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    _count?: boolean | BudgetsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgets"]>



  export type BudgetsSelectScalar = {
    id?: boolean
    projectId?: boolean
    itemType?: boolean
    description?: boolean
    status?: boolean
    createdById?: boolean
  }

  export type BudgetsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "itemType" | "description" | "status" | "createdById", ExtArgs["result"]["budgets"]>
  export type BudgetsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    BudgetAllocations?: boolean | Budgets$BudgetAllocationsArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    _count?: boolean | BudgetsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BudgetsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Budgets"
    objects: {
      BudgetAllocations: Prisma.$BudgetAllocationsPayload<ExtArgs>[]
      Users: Prisma.$UsersPayload<ExtArgs>
      Projects: Prisma.$ProjectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      itemType: string
      description: string | null
      status: string | null
      createdById: string
    }, ExtArgs["result"]["budgets"]>
    composites: {}
  }

  type BudgetsGetPayload<S extends boolean | null | undefined | BudgetsDefaultArgs> = $Result.GetResult<Prisma.$BudgetsPayload, S>

  type BudgetsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BudgetsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BudgetsCountAggregateInputType | true
    }

  export interface BudgetsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Budgets'], meta: { name: 'Budgets' } }
    /**
     * Find zero or one Budgets that matches the filter.
     * @param {BudgetsFindUniqueArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetsFindUniqueArgs>(args: SelectSubset<T, BudgetsFindUniqueArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Budgets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BudgetsFindUniqueOrThrowArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetsFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsFindFirstArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetsFindFirstArgs>(args?: SelectSubset<T, BudgetsFindFirstArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Budgets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsFindFirstOrThrowArgs} args - Arguments to find a Budgets
     * @example
     * // Get one Budgets
     * const budgets = await prisma.budgets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetsFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budgets.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budgets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetsWithIdOnly = await prisma.budgets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetsFindManyArgs>(args?: SelectSubset<T, BudgetsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Budgets.
     * @param {BudgetsCreateArgs} args - Arguments to create a Budgets.
     * @example
     * // Create one Budgets
     * const Budgets = await prisma.budgets.create({
     *   data: {
     *     // ... data to create a Budgets
     *   }
     * })
     * 
     */
    create<T extends BudgetsCreateArgs>(args: SelectSubset<T, BudgetsCreateArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Budgets.
     * @param {BudgetsCreateManyArgs} args - Arguments to create many Budgets.
     * @example
     * // Create many Budgets
     * const budgets = await prisma.budgets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetsCreateManyArgs>(args?: SelectSubset<T, BudgetsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Budgets.
     * @param {BudgetsDeleteArgs} args - Arguments to delete one Budgets.
     * @example
     * // Delete one Budgets
     * const Budgets = await prisma.budgets.delete({
     *   where: {
     *     // ... filter to delete one Budgets
     *   }
     * })
     * 
     */
    delete<T extends BudgetsDeleteArgs>(args: SelectSubset<T, BudgetsDeleteArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Budgets.
     * @param {BudgetsUpdateArgs} args - Arguments to update one Budgets.
     * @example
     * // Update one Budgets
     * const budgets = await prisma.budgets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetsUpdateArgs>(args: SelectSubset<T, BudgetsUpdateArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Budgets.
     * @param {BudgetsDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budgets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetsDeleteManyArgs>(args?: SelectSubset<T, BudgetsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budgets = await prisma.budgets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetsUpdateManyArgs>(args: SelectSubset<T, BudgetsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Budgets.
     * @param {BudgetsUpsertArgs} args - Arguments to update or create a Budgets.
     * @example
     * // Update or create a Budgets
     * const budgets = await prisma.budgets.upsert({
     *   create: {
     *     // ... data to create a Budgets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budgets we want to update
     *   }
     * })
     */
    upsert<T extends BudgetsUpsertArgs>(args: SelectSubset<T, BudgetsUpsertArgs<ExtArgs>>): Prisma__BudgetsClient<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budgets.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends BudgetsCountArgs>(
      args?: Subset<T, BudgetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetsAggregateArgs>(args: Subset<T, BudgetsAggregateArgs>): Prisma.PrismaPromise<GetBudgetsAggregateType<T>>

    /**
     * Group by Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetsGroupByArgs['orderBy'] }
        : { orderBy?: BudgetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Budgets model
   */
  readonly fields: BudgetsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Budgets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    BudgetAllocations<T extends Budgets$BudgetAllocationsArgs<ExtArgs> = {}>(args?: Subset<T, Budgets$BudgetAllocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Projects<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Budgets model
   */
  interface BudgetsFieldRefs {
    readonly id: FieldRef<"Budgets", 'String'>
    readonly projectId: FieldRef<"Budgets", 'String'>
    readonly itemType: FieldRef<"Budgets", 'String'>
    readonly description: FieldRef<"Budgets", 'String'>
    readonly status: FieldRef<"Budgets", 'String'>
    readonly createdById: FieldRef<"Budgets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Budgets findUnique
   */
  export type BudgetsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where: BudgetsWhereUniqueInput
  }

  /**
   * Budgets findUniqueOrThrow
   */
  export type BudgetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where: BudgetsWhereUniqueInput
  }

  /**
   * Budgets findFirst
   */
  export type BudgetsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * Budgets findFirstOrThrow
   */
  export type BudgetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     */
    cursor?: BudgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     */
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * Budgets findMany
   */
  export type BudgetsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter, which Budgets to fetch.
     */
    where?: BudgetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     */
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Budgets.
     */
    cursor?: BudgetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     */
    skip?: number
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * Budgets create
   */
  export type BudgetsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * The data needed to create a Budgets.
     */
    data: XOR<BudgetsCreateInput, BudgetsUncheckedCreateInput>
  }

  /**
   * Budgets createMany
   */
  export type BudgetsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Budgets.
     */
    data: BudgetsCreateManyInput | BudgetsCreateManyInput[]
  }

  /**
   * Budgets update
   */
  export type BudgetsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * The data needed to update a Budgets.
     */
    data: XOR<BudgetsUpdateInput, BudgetsUncheckedUpdateInput>
    /**
     * Choose, which Budgets to update.
     */
    where: BudgetsWhereUniqueInput
  }

  /**
   * Budgets updateMany
   */
  export type BudgetsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Budgets.
     */
    data: XOR<BudgetsUpdateManyMutationInput, BudgetsUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     */
    where?: BudgetsWhereInput
    /**
     * Limit how many Budgets to update.
     */
    limit?: number
  }

  /**
   * Budgets upsert
   */
  export type BudgetsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * The filter to search for the Budgets to update in case it exists.
     */
    where: BudgetsWhereUniqueInput
    /**
     * In case the Budgets found by the `where` argument doesn't exist, create a new Budgets with this data.
     */
    create: XOR<BudgetsCreateInput, BudgetsUncheckedCreateInput>
    /**
     * In case the Budgets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetsUpdateInput, BudgetsUncheckedUpdateInput>
  }

  /**
   * Budgets delete
   */
  export type BudgetsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    /**
     * Filter which Budgets to delete.
     */
    where: BudgetsWhereUniqueInput
  }

  /**
   * Budgets deleteMany
   */
  export type BudgetsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Budgets to delete
     */
    where?: BudgetsWhereInput
    /**
     * Limit how many Budgets to delete.
     */
    limit?: number
  }

  /**
   * Budgets.BudgetAllocations
   */
  export type Budgets$BudgetAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    where?: BudgetAllocationsWhereInput
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    cursor?: BudgetAllocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetAllocationsScalarFieldEnum | BudgetAllocationsScalarFieldEnum[]
  }

  /**
   * Budgets without action
   */
  export type BudgetsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
  }


  /**
   * Model Clients
   */

  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ClientsMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ClientsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ClientsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClientsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ClientsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ClientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to aggregate.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type ClientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientsWhereInput
    orderBy?: ClientsOrderByWithAggregationInput | ClientsOrderByWithAggregationInput[]
    by: ClientsScalarFieldEnum[] | ClientsScalarFieldEnum
    having?: ClientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }

  export type ClientsGroupByOutputType = {
    id: string
    name: string
    _count: ClientsCountAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends ClientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type ClientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Projects?: boolean | Clients$ProjectsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clients"]>



  export type ClientsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ClientsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["clients"]>
  export type ClientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Projects?: boolean | Clients$ProjectsArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Clients"
    objects: {
      Projects: Prisma.$ProjectsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["clients"]>
    composites: {}
  }

  type ClientsGetPayload<S extends boolean | null | undefined | ClientsDefaultArgs> = $Result.GetResult<Prisma.$ClientsPayload, S>

  type ClientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface ClientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Clients'], meta: { name: 'Clients' } }
    /**
     * Find zero or one Clients that matches the filter.
     * @param {ClientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientsFindUniqueArgs>(args: SelectSubset<T, ClientsFindUniqueArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clients that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientsFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientsFindFirstArgs>(args?: SelectSubset<T, ClientsFindFirstArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientsFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientsWithIdOnly = await prisma.clients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientsFindManyArgs>(args?: SelectSubset<T, ClientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clients.
     * @param {ClientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
     */
    create<T extends ClientsCreateArgs>(args: SelectSubset<T, ClientsCreateArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientsCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const clients = await prisma.clients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientsCreateManyArgs>(args?: SelectSubset<T, ClientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {ClientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
     */
    delete<T extends ClientsDeleteArgs>(args: SelectSubset<T, ClientsDeleteArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clients.
     * @param {ClientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientsUpdateArgs>(args: SelectSubset<T, ClientsUpdateArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientsDeleteManyArgs>(args?: SelectSubset<T, ClientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientsUpdateManyArgs>(args: SelectSubset<T, ClientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {ClientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
     */
    upsert<T extends ClientsUpsertArgs>(args: SelectSubset<T, ClientsUpsertArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientsCountArgs>(
      args?: Subset<T, ClientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): Prisma.PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientsGroupByArgs['orderBy'] }
        : { orderBy?: ClientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Clients model
   */
  readonly fields: ClientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Projects<T extends Clients$ProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Clients$ProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Clients model
   */
  interface ClientsFieldRefs {
    readonly id: FieldRef<"Clients", 'String'>
    readonly name: FieldRef<"Clients", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Clients findUnique
   */
  export type ClientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients findUniqueOrThrow
   */
  export type ClientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients findFirst
   */
  export type ClientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients findFirstOrThrow
   */
  export type ClientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients findMany
   */
  export type ClientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientsOrderByWithRelationInput | ClientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * Clients create
   */
  export type ClientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The data needed to create a Clients.
     */
    data: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
  }

  /**
   * Clients createMany
   */
  export type ClientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientsCreateManyInput | ClientsCreateManyInput[]
  }

  /**
   * Clients update
   */
  export type ClientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The data needed to update a Clients.
     */
    data: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
    /**
     * Choose, which Clients to update.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients updateMany
   */
  export type ClientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientsUpdateManyMutationInput, ClientsUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientsWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Clients upsert
   */
  export type ClientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * The filter to search for the Clients to update in case it exists.
     */
    where: ClientsWhereUniqueInput
    /**
     * In case the Clients found by the `where` argument doesn't exist, create a new Clients with this data.
     */
    create: XOR<ClientsCreateInput, ClientsUncheckedCreateInput>
    /**
     * In case the Clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientsUpdateInput, ClientsUncheckedUpdateInput>
  }

  /**
   * Clients delete
   */
  export type ClientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    /**
     * Filter which Clients to delete.
     */
    where: ClientsWhereUniqueInput
  }

  /**
   * Clients deleteMany
   */
  export type ClientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientsWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Clients.Projects
   */
  export type Clients$ProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Clients without action
   */
  export type ClientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
  }


  /**
   * Model CostSplits
   */

  export type AggregateCostSplits = {
    _count: CostSplitsCountAggregateOutputType | null
    _avg: CostSplitsAvgAggregateOutputType | null
    _sum: CostSplitsSumAggregateOutputType | null
    _min: CostSplitsMinAggregateOutputType | null
    _max: CostSplitsMaxAggregateOutputType | null
  }

  export type CostSplitsAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type CostSplitsSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type CostSplitsMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    cost: Decimal | null
    splitWith: string | null
    approvedBy: string | null
  }

  export type CostSplitsMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    cost: Decimal | null
    splitWith: string | null
    approvedBy: string | null
  }

  export type CostSplitsCountAggregateOutputType = {
    id: number
    projectId: number
    cost: number
    splitWith: number
    approvedBy: number
    _all: number
  }


  export type CostSplitsAvgAggregateInputType = {
    cost?: true
  }

  export type CostSplitsSumAggregateInputType = {
    cost?: true
  }

  export type CostSplitsMinAggregateInputType = {
    id?: true
    projectId?: true
    cost?: true
    splitWith?: true
    approvedBy?: true
  }

  export type CostSplitsMaxAggregateInputType = {
    id?: true
    projectId?: true
    cost?: true
    splitWith?: true
    approvedBy?: true
  }

  export type CostSplitsCountAggregateInputType = {
    id?: true
    projectId?: true
    cost?: true
    splitWith?: true
    approvedBy?: true
    _all?: true
  }

  export type CostSplitsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostSplits to aggregate.
     */
    where?: CostSplitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostSplits to fetch.
     */
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CostSplitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostSplits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostSplits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CostSplits
    **/
    _count?: true | CostSplitsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostSplitsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostSplitsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostSplitsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostSplitsMaxAggregateInputType
  }

  export type GetCostSplitsAggregateType<T extends CostSplitsAggregateArgs> = {
        [P in keyof T & keyof AggregateCostSplits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCostSplits[P]>
      : GetScalarType<T[P], AggregateCostSplits[P]>
  }




  export type CostSplitsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostSplitsWhereInput
    orderBy?: CostSplitsOrderByWithAggregationInput | CostSplitsOrderByWithAggregationInput[]
    by: CostSplitsScalarFieldEnum[] | CostSplitsScalarFieldEnum
    having?: CostSplitsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostSplitsCountAggregateInputType | true
    _avg?: CostSplitsAvgAggregateInputType
    _sum?: CostSplitsSumAggregateInputType
    _min?: CostSplitsMinAggregateInputType
    _max?: CostSplitsMaxAggregateInputType
  }

  export type CostSplitsGroupByOutputType = {
    id: string
    projectId: string
    cost: Decimal
    splitWith: string
    approvedBy: string | null
    _count: CostSplitsCountAggregateOutputType | null
    _avg: CostSplitsAvgAggregateOutputType | null
    _sum: CostSplitsSumAggregateOutputType | null
    _min: CostSplitsMinAggregateOutputType | null
    _max: CostSplitsMaxAggregateOutputType | null
  }

  type GetCostSplitsGroupByPayload<T extends CostSplitsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CostSplitsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostSplitsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostSplitsGroupByOutputType[P]>
            : GetScalarType<T[P], CostSplitsGroupByOutputType[P]>
        }
      >
    >


  export type CostSplitsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    cost?: boolean
    splitWith?: boolean
    approvedBy?: boolean
    Users?: boolean | CostSplits$UsersArgs<ExtArgs>
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costSplits"]>



  export type CostSplitsSelectScalar = {
    id?: boolean
    projectId?: boolean
    cost?: boolean
    splitWith?: boolean
    approvedBy?: boolean
  }

  export type CostSplitsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "cost" | "splitWith" | "approvedBy", ExtArgs["result"]["costSplits"]>
  export type CostSplitsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | CostSplits$UsersArgs<ExtArgs>
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
  }

  export type $CostSplitsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CostSplits"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs> | null
      Projects: Prisma.$ProjectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      cost: Prisma.Decimal
      splitWith: string
      approvedBy: string | null
    }, ExtArgs["result"]["costSplits"]>
    composites: {}
  }

  type CostSplitsGetPayload<S extends boolean | null | undefined | CostSplitsDefaultArgs> = $Result.GetResult<Prisma.$CostSplitsPayload, S>

  type CostSplitsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CostSplitsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CostSplitsCountAggregateInputType | true
    }

  export interface CostSplitsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CostSplits'], meta: { name: 'CostSplits' } }
    /**
     * Find zero or one CostSplits that matches the filter.
     * @param {CostSplitsFindUniqueArgs} args - Arguments to find a CostSplits
     * @example
     * // Get one CostSplits
     * const costSplits = await prisma.costSplits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CostSplitsFindUniqueArgs>(args: SelectSubset<T, CostSplitsFindUniqueArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CostSplits that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CostSplitsFindUniqueOrThrowArgs} args - Arguments to find a CostSplits
     * @example
     * // Get one CostSplits
     * const costSplits = await prisma.costSplits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CostSplitsFindUniqueOrThrowArgs>(args: SelectSubset<T, CostSplitsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CostSplits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsFindFirstArgs} args - Arguments to find a CostSplits
     * @example
     * // Get one CostSplits
     * const costSplits = await prisma.costSplits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CostSplitsFindFirstArgs>(args?: SelectSubset<T, CostSplitsFindFirstArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CostSplits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsFindFirstOrThrowArgs} args - Arguments to find a CostSplits
     * @example
     * // Get one CostSplits
     * const costSplits = await prisma.costSplits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CostSplitsFindFirstOrThrowArgs>(args?: SelectSubset<T, CostSplitsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CostSplits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CostSplits
     * const costSplits = await prisma.costSplits.findMany()
     * 
     * // Get first 10 CostSplits
     * const costSplits = await prisma.costSplits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const costSplitsWithIdOnly = await prisma.costSplits.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CostSplitsFindManyArgs>(args?: SelectSubset<T, CostSplitsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CostSplits.
     * @param {CostSplitsCreateArgs} args - Arguments to create a CostSplits.
     * @example
     * // Create one CostSplits
     * const CostSplits = await prisma.costSplits.create({
     *   data: {
     *     // ... data to create a CostSplits
     *   }
     * })
     * 
     */
    create<T extends CostSplitsCreateArgs>(args: SelectSubset<T, CostSplitsCreateArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CostSplits.
     * @param {CostSplitsCreateManyArgs} args - Arguments to create many CostSplits.
     * @example
     * // Create many CostSplits
     * const costSplits = await prisma.costSplits.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CostSplitsCreateManyArgs>(args?: SelectSubset<T, CostSplitsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CostSplits.
     * @param {CostSplitsDeleteArgs} args - Arguments to delete one CostSplits.
     * @example
     * // Delete one CostSplits
     * const CostSplits = await prisma.costSplits.delete({
     *   where: {
     *     // ... filter to delete one CostSplits
     *   }
     * })
     * 
     */
    delete<T extends CostSplitsDeleteArgs>(args: SelectSubset<T, CostSplitsDeleteArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CostSplits.
     * @param {CostSplitsUpdateArgs} args - Arguments to update one CostSplits.
     * @example
     * // Update one CostSplits
     * const costSplits = await prisma.costSplits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CostSplitsUpdateArgs>(args: SelectSubset<T, CostSplitsUpdateArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CostSplits.
     * @param {CostSplitsDeleteManyArgs} args - Arguments to filter CostSplits to delete.
     * @example
     * // Delete a few CostSplits
     * const { count } = await prisma.costSplits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CostSplitsDeleteManyArgs>(args?: SelectSubset<T, CostSplitsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CostSplits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CostSplits
     * const costSplits = await prisma.costSplits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CostSplitsUpdateManyArgs>(args: SelectSubset<T, CostSplitsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CostSplits.
     * @param {CostSplitsUpsertArgs} args - Arguments to update or create a CostSplits.
     * @example
     * // Update or create a CostSplits
     * const costSplits = await prisma.costSplits.upsert({
     *   create: {
     *     // ... data to create a CostSplits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CostSplits we want to update
     *   }
     * })
     */
    upsert<T extends CostSplitsUpsertArgs>(args: SelectSubset<T, CostSplitsUpsertArgs<ExtArgs>>): Prisma__CostSplitsClient<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CostSplits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsCountArgs} args - Arguments to filter CostSplits to count.
     * @example
     * // Count the number of CostSplits
     * const count = await prisma.costSplits.count({
     *   where: {
     *     // ... the filter for the CostSplits we want to count
     *   }
     * })
    **/
    count<T extends CostSplitsCountArgs>(
      args?: Subset<T, CostSplitsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostSplitsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CostSplits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostSplitsAggregateArgs>(args: Subset<T, CostSplitsAggregateArgs>): Prisma.PrismaPromise<GetCostSplitsAggregateType<T>>

    /**
     * Group by CostSplits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostSplitsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CostSplitsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CostSplitsGroupByArgs['orderBy'] }
        : { orderBy?: CostSplitsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CostSplitsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostSplitsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CostSplits model
   */
  readonly fields: CostSplitsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CostSplits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CostSplitsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends CostSplits$UsersArgs<ExtArgs> = {}>(args?: Subset<T, CostSplits$UsersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Projects<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CostSplits model
   */
  interface CostSplitsFieldRefs {
    readonly id: FieldRef<"CostSplits", 'String'>
    readonly projectId: FieldRef<"CostSplits", 'String'>
    readonly cost: FieldRef<"CostSplits", 'Decimal'>
    readonly splitWith: FieldRef<"CostSplits", 'String'>
    readonly approvedBy: FieldRef<"CostSplits", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CostSplits findUnique
   */
  export type CostSplitsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter, which CostSplits to fetch.
     */
    where: CostSplitsWhereUniqueInput
  }

  /**
   * CostSplits findUniqueOrThrow
   */
  export type CostSplitsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter, which CostSplits to fetch.
     */
    where: CostSplitsWhereUniqueInput
  }

  /**
   * CostSplits findFirst
   */
  export type CostSplitsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter, which CostSplits to fetch.
     */
    where?: CostSplitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostSplits to fetch.
     */
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostSplits.
     */
    cursor?: CostSplitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostSplits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostSplits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostSplits.
     */
    distinct?: CostSplitsScalarFieldEnum | CostSplitsScalarFieldEnum[]
  }

  /**
   * CostSplits findFirstOrThrow
   */
  export type CostSplitsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter, which CostSplits to fetch.
     */
    where?: CostSplitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostSplits to fetch.
     */
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostSplits.
     */
    cursor?: CostSplitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostSplits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostSplits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostSplits.
     */
    distinct?: CostSplitsScalarFieldEnum | CostSplitsScalarFieldEnum[]
  }

  /**
   * CostSplits findMany
   */
  export type CostSplitsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter, which CostSplits to fetch.
     */
    where?: CostSplitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostSplits to fetch.
     */
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CostSplits.
     */
    cursor?: CostSplitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostSplits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostSplits.
     */
    skip?: number
    distinct?: CostSplitsScalarFieldEnum | CostSplitsScalarFieldEnum[]
  }

  /**
   * CostSplits create
   */
  export type CostSplitsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * The data needed to create a CostSplits.
     */
    data: XOR<CostSplitsCreateInput, CostSplitsUncheckedCreateInput>
  }

  /**
   * CostSplits createMany
   */
  export type CostSplitsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CostSplits.
     */
    data: CostSplitsCreateManyInput | CostSplitsCreateManyInput[]
  }

  /**
   * CostSplits update
   */
  export type CostSplitsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * The data needed to update a CostSplits.
     */
    data: XOR<CostSplitsUpdateInput, CostSplitsUncheckedUpdateInput>
    /**
     * Choose, which CostSplits to update.
     */
    where: CostSplitsWhereUniqueInput
  }

  /**
   * CostSplits updateMany
   */
  export type CostSplitsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CostSplits.
     */
    data: XOR<CostSplitsUpdateManyMutationInput, CostSplitsUncheckedUpdateManyInput>
    /**
     * Filter which CostSplits to update
     */
    where?: CostSplitsWhereInput
    /**
     * Limit how many CostSplits to update.
     */
    limit?: number
  }

  /**
   * CostSplits upsert
   */
  export type CostSplitsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * The filter to search for the CostSplits to update in case it exists.
     */
    where: CostSplitsWhereUniqueInput
    /**
     * In case the CostSplits found by the `where` argument doesn't exist, create a new CostSplits with this data.
     */
    create: XOR<CostSplitsCreateInput, CostSplitsUncheckedCreateInput>
    /**
     * In case the CostSplits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CostSplitsUpdateInput, CostSplitsUncheckedUpdateInput>
  }

  /**
   * CostSplits delete
   */
  export type CostSplitsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    /**
     * Filter which CostSplits to delete.
     */
    where: CostSplitsWhereUniqueInput
  }

  /**
   * CostSplits deleteMany
   */
  export type CostSplitsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostSplits to delete
     */
    where?: CostSplitsWhereInput
    /**
     * Limit how many CostSplits to delete.
     */
    limit?: number
  }

  /**
   * CostSplits.Users
   */
  export type CostSplits$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * CostSplits without action
   */
  export type CostSplitsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
  }


  /**
   * Model ExchangeRates
   */

  export type AggregateExchangeRates = {
    _count: ExchangeRatesCountAggregateOutputType | null
    _avg: ExchangeRatesAvgAggregateOutputType | null
    _sum: ExchangeRatesSumAggregateOutputType | null
    _min: ExchangeRatesMinAggregateOutputType | null
    _max: ExchangeRatesMaxAggregateOutputType | null
  }

  export type ExchangeRatesAvgAggregateOutputType = {
    rate: Decimal | null
  }

  export type ExchangeRatesSumAggregateOutputType = {
    rate: Decimal | null
  }

  export type ExchangeRatesMinAggregateOutputType = {
    id: string | null
    currency: string | null
    rate: Decimal | null
    createdAt: Date | null
  }

  export type ExchangeRatesMaxAggregateOutputType = {
    id: string | null
    currency: string | null
    rate: Decimal | null
    createdAt: Date | null
  }

  export type ExchangeRatesCountAggregateOutputType = {
    id: number
    currency: number
    rate: number
    createdAt: number
    _all: number
  }


  export type ExchangeRatesAvgAggregateInputType = {
    rate?: true
  }

  export type ExchangeRatesSumAggregateInputType = {
    rate?: true
  }

  export type ExchangeRatesMinAggregateInputType = {
    id?: true
    currency?: true
    rate?: true
    createdAt?: true
  }

  export type ExchangeRatesMaxAggregateInputType = {
    id?: true
    currency?: true
    rate?: true
    createdAt?: true
  }

  export type ExchangeRatesCountAggregateInputType = {
    id?: true
    currency?: true
    rate?: true
    createdAt?: true
    _all?: true
  }

  export type ExchangeRatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeRates to aggregate.
     */
    where?: ExchangeRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeRates to fetch.
     */
    orderBy?: ExchangeRatesOrderByWithRelationInput | ExchangeRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExchangeRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExchangeRates
    **/
    _count?: true | ExchangeRatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExchangeRatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExchangeRatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExchangeRatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExchangeRatesMaxAggregateInputType
  }

  export type GetExchangeRatesAggregateType<T extends ExchangeRatesAggregateArgs> = {
        [P in keyof T & keyof AggregateExchangeRates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExchangeRates[P]>
      : GetScalarType<T[P], AggregateExchangeRates[P]>
  }




  export type ExchangeRatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeRatesWhereInput
    orderBy?: ExchangeRatesOrderByWithAggregationInput | ExchangeRatesOrderByWithAggregationInput[]
    by: ExchangeRatesScalarFieldEnum[] | ExchangeRatesScalarFieldEnum
    having?: ExchangeRatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExchangeRatesCountAggregateInputType | true
    _avg?: ExchangeRatesAvgAggregateInputType
    _sum?: ExchangeRatesSumAggregateInputType
    _min?: ExchangeRatesMinAggregateInputType
    _max?: ExchangeRatesMaxAggregateInputType
  }

  export type ExchangeRatesGroupByOutputType = {
    id: string
    currency: string
    rate: Decimal
    createdAt: Date | null
    _count: ExchangeRatesCountAggregateOutputType | null
    _avg: ExchangeRatesAvgAggregateOutputType | null
    _sum: ExchangeRatesSumAggregateOutputType | null
    _min: ExchangeRatesMinAggregateOutputType | null
    _max: ExchangeRatesMaxAggregateOutputType | null
  }

  type GetExchangeRatesGroupByPayload<T extends ExchangeRatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExchangeRatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExchangeRatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExchangeRatesGroupByOutputType[P]>
            : GetScalarType<T[P], ExchangeRatesGroupByOutputType[P]>
        }
      >
    >


  export type ExchangeRatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    currency?: boolean
    rate?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["exchangeRates"]>



  export type ExchangeRatesSelectScalar = {
    id?: boolean
    currency?: boolean
    rate?: boolean
    createdAt?: boolean
  }

  export type ExchangeRatesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "currency" | "rate" | "createdAt", ExtArgs["result"]["exchangeRates"]>

  export type $ExchangeRatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExchangeRates"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      currency: string
      rate: Prisma.Decimal
      createdAt: Date | null
    }, ExtArgs["result"]["exchangeRates"]>
    composites: {}
  }

  type ExchangeRatesGetPayload<S extends boolean | null | undefined | ExchangeRatesDefaultArgs> = $Result.GetResult<Prisma.$ExchangeRatesPayload, S>

  type ExchangeRatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExchangeRatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExchangeRatesCountAggregateInputType | true
    }

  export interface ExchangeRatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExchangeRates'], meta: { name: 'ExchangeRates' } }
    /**
     * Find zero or one ExchangeRates that matches the filter.
     * @param {ExchangeRatesFindUniqueArgs} args - Arguments to find a ExchangeRates
     * @example
     * // Get one ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExchangeRatesFindUniqueArgs>(args: SelectSubset<T, ExchangeRatesFindUniqueArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExchangeRates that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExchangeRatesFindUniqueOrThrowArgs} args - Arguments to find a ExchangeRates
     * @example
     * // Get one ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExchangeRatesFindUniqueOrThrowArgs>(args: SelectSubset<T, ExchangeRatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExchangeRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesFindFirstArgs} args - Arguments to find a ExchangeRates
     * @example
     * // Get one ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExchangeRatesFindFirstArgs>(args?: SelectSubset<T, ExchangeRatesFindFirstArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExchangeRates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesFindFirstOrThrowArgs} args - Arguments to find a ExchangeRates
     * @example
     * // Get one ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExchangeRatesFindFirstOrThrowArgs>(args?: SelectSubset<T, ExchangeRatesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExchangeRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findMany()
     * 
     * // Get first 10 ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exchangeRatesWithIdOnly = await prisma.exchangeRates.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExchangeRatesFindManyArgs>(args?: SelectSubset<T, ExchangeRatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExchangeRates.
     * @param {ExchangeRatesCreateArgs} args - Arguments to create a ExchangeRates.
     * @example
     * // Create one ExchangeRates
     * const ExchangeRates = await prisma.exchangeRates.create({
     *   data: {
     *     // ... data to create a ExchangeRates
     *   }
     * })
     * 
     */
    create<T extends ExchangeRatesCreateArgs>(args: SelectSubset<T, ExchangeRatesCreateArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExchangeRates.
     * @param {ExchangeRatesCreateManyArgs} args - Arguments to create many ExchangeRates.
     * @example
     * // Create many ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExchangeRatesCreateManyArgs>(args?: SelectSubset<T, ExchangeRatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExchangeRates.
     * @param {ExchangeRatesDeleteArgs} args - Arguments to delete one ExchangeRates.
     * @example
     * // Delete one ExchangeRates
     * const ExchangeRates = await prisma.exchangeRates.delete({
     *   where: {
     *     // ... filter to delete one ExchangeRates
     *   }
     * })
     * 
     */
    delete<T extends ExchangeRatesDeleteArgs>(args: SelectSubset<T, ExchangeRatesDeleteArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExchangeRates.
     * @param {ExchangeRatesUpdateArgs} args - Arguments to update one ExchangeRates.
     * @example
     * // Update one ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExchangeRatesUpdateArgs>(args: SelectSubset<T, ExchangeRatesUpdateArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExchangeRates.
     * @param {ExchangeRatesDeleteManyArgs} args - Arguments to filter ExchangeRates to delete.
     * @example
     * // Delete a few ExchangeRates
     * const { count } = await prisma.exchangeRates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExchangeRatesDeleteManyArgs>(args?: SelectSubset<T, ExchangeRatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExchangeRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExchangeRatesUpdateManyArgs>(args: SelectSubset<T, ExchangeRatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExchangeRates.
     * @param {ExchangeRatesUpsertArgs} args - Arguments to update or create a ExchangeRates.
     * @example
     * // Update or create a ExchangeRates
     * const exchangeRates = await prisma.exchangeRates.upsert({
     *   create: {
     *     // ... data to create a ExchangeRates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExchangeRates we want to update
     *   }
     * })
     */
    upsert<T extends ExchangeRatesUpsertArgs>(args: SelectSubset<T, ExchangeRatesUpsertArgs<ExtArgs>>): Prisma__ExchangeRatesClient<$Result.GetResult<Prisma.$ExchangeRatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExchangeRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesCountArgs} args - Arguments to filter ExchangeRates to count.
     * @example
     * // Count the number of ExchangeRates
     * const count = await prisma.exchangeRates.count({
     *   where: {
     *     // ... the filter for the ExchangeRates we want to count
     *   }
     * })
    **/
    count<T extends ExchangeRatesCountArgs>(
      args?: Subset<T, ExchangeRatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExchangeRatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExchangeRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExchangeRatesAggregateArgs>(args: Subset<T, ExchangeRatesAggregateArgs>): Prisma.PrismaPromise<GetExchangeRatesAggregateType<T>>

    /**
     * Group by ExchangeRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeRatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExchangeRatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExchangeRatesGroupByArgs['orderBy'] }
        : { orderBy?: ExchangeRatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExchangeRatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExchangeRatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExchangeRates model
   */
  readonly fields: ExchangeRatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExchangeRates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExchangeRatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExchangeRates model
   */
  interface ExchangeRatesFieldRefs {
    readonly id: FieldRef<"ExchangeRates", 'String'>
    readonly currency: FieldRef<"ExchangeRates", 'String'>
    readonly rate: FieldRef<"ExchangeRates", 'Decimal'>
    readonly createdAt: FieldRef<"ExchangeRates", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExchangeRates findUnique
   */
  export type ExchangeRatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeRates to fetch.
     */
    where: ExchangeRatesWhereUniqueInput
  }

  /**
   * ExchangeRates findUniqueOrThrow
   */
  export type ExchangeRatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeRates to fetch.
     */
    where: ExchangeRatesWhereUniqueInput
  }

  /**
   * ExchangeRates findFirst
   */
  export type ExchangeRatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeRates to fetch.
     */
    where?: ExchangeRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeRates to fetch.
     */
    orderBy?: ExchangeRatesOrderByWithRelationInput | ExchangeRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeRates.
     */
    cursor?: ExchangeRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeRates.
     */
    distinct?: ExchangeRatesScalarFieldEnum | ExchangeRatesScalarFieldEnum[]
  }

  /**
   * ExchangeRates findFirstOrThrow
   */
  export type ExchangeRatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeRates to fetch.
     */
    where?: ExchangeRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeRates to fetch.
     */
    orderBy?: ExchangeRatesOrderByWithRelationInput | ExchangeRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeRates.
     */
    cursor?: ExchangeRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeRates.
     */
    distinct?: ExchangeRatesScalarFieldEnum | ExchangeRatesScalarFieldEnum[]
  }

  /**
   * ExchangeRates findMany
   */
  export type ExchangeRatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeRates to fetch.
     */
    where?: ExchangeRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeRates to fetch.
     */
    orderBy?: ExchangeRatesOrderByWithRelationInput | ExchangeRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExchangeRates.
     */
    cursor?: ExchangeRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeRates.
     */
    skip?: number
    distinct?: ExchangeRatesScalarFieldEnum | ExchangeRatesScalarFieldEnum[]
  }

  /**
   * ExchangeRates create
   */
  export type ExchangeRatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * The data needed to create a ExchangeRates.
     */
    data: XOR<ExchangeRatesCreateInput, ExchangeRatesUncheckedCreateInput>
  }

  /**
   * ExchangeRates createMany
   */
  export type ExchangeRatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExchangeRates.
     */
    data: ExchangeRatesCreateManyInput | ExchangeRatesCreateManyInput[]
  }

  /**
   * ExchangeRates update
   */
  export type ExchangeRatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * The data needed to update a ExchangeRates.
     */
    data: XOR<ExchangeRatesUpdateInput, ExchangeRatesUncheckedUpdateInput>
    /**
     * Choose, which ExchangeRates to update.
     */
    where: ExchangeRatesWhereUniqueInput
  }

  /**
   * ExchangeRates updateMany
   */
  export type ExchangeRatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExchangeRates.
     */
    data: XOR<ExchangeRatesUpdateManyMutationInput, ExchangeRatesUncheckedUpdateManyInput>
    /**
     * Filter which ExchangeRates to update
     */
    where?: ExchangeRatesWhereInput
    /**
     * Limit how many ExchangeRates to update.
     */
    limit?: number
  }

  /**
   * ExchangeRates upsert
   */
  export type ExchangeRatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * The filter to search for the ExchangeRates to update in case it exists.
     */
    where: ExchangeRatesWhereUniqueInput
    /**
     * In case the ExchangeRates found by the `where` argument doesn't exist, create a new ExchangeRates with this data.
     */
    create: XOR<ExchangeRatesCreateInput, ExchangeRatesUncheckedCreateInput>
    /**
     * In case the ExchangeRates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExchangeRatesUpdateInput, ExchangeRatesUncheckedUpdateInput>
  }

  /**
   * ExchangeRates delete
   */
  export type ExchangeRatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
    /**
     * Filter which ExchangeRates to delete.
     */
    where: ExchangeRatesWhereUniqueInput
  }

  /**
   * ExchangeRates deleteMany
   */
  export type ExchangeRatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeRates to delete
     */
    where?: ExchangeRatesWhereInput
    /**
     * Limit how many ExchangeRates to delete.
     */
    limit?: number
  }

  /**
   * ExchangeRates without action
   */
  export type ExchangeRatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeRates
     */
    select?: ExchangeRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeRates
     */
    omit?: ExchangeRatesOmit<ExtArgs> | null
  }


  /**
   * Model Expenses
   */

  export type AggregateExpenses = {
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  export type ExpensesAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type ExpensesSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type ExpensesMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    submittedBy: string | null
    expenseType: string | null
    isBillable: boolean | null
    amount: Decimal | null
    description: string | null
    expenseDate: Date | null
  }

  export type ExpensesMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    submittedBy: string | null
    expenseType: string | null
    isBillable: boolean | null
    amount: Decimal | null
    description: string | null
    expenseDate: Date | null
  }

  export type ExpensesCountAggregateOutputType = {
    id: number
    projectId: number
    submittedBy: number
    expenseType: number
    isBillable: number
    amount: number
    description: number
    expenseDate: number
    _all: number
  }


  export type ExpensesAvgAggregateInputType = {
    amount?: true
  }

  export type ExpensesSumAggregateInputType = {
    amount?: true
  }

  export type ExpensesMinAggregateInputType = {
    id?: true
    projectId?: true
    submittedBy?: true
    expenseType?: true
    isBillable?: true
    amount?: true
    description?: true
    expenseDate?: true
  }

  export type ExpensesMaxAggregateInputType = {
    id?: true
    projectId?: true
    submittedBy?: true
    expenseType?: true
    isBillable?: true
    amount?: true
    description?: true
    expenseDate?: true
  }

  export type ExpensesCountAggregateInputType = {
    id?: true
    projectId?: true
    submittedBy?: true
    expenseType?: true
    isBillable?: true
    amount?: true
    description?: true
    expenseDate?: true
    _all?: true
  }

  export type ExpensesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to aggregate.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expenses
    **/
    _count?: true | ExpensesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpensesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpensesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpensesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpensesMaxAggregateInputType
  }

  export type GetExpensesAggregateType<T extends ExpensesAggregateArgs> = {
        [P in keyof T & keyof AggregateExpenses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpenses[P]>
      : GetScalarType<T[P], AggregateExpenses[P]>
  }




  export type ExpensesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpensesWhereInput
    orderBy?: ExpensesOrderByWithAggregationInput | ExpensesOrderByWithAggregationInput[]
    by: ExpensesScalarFieldEnum[] | ExpensesScalarFieldEnum
    having?: ExpensesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpensesCountAggregateInputType | true
    _avg?: ExpensesAvgAggregateInputType
    _sum?: ExpensesSumAggregateInputType
    _min?: ExpensesMinAggregateInputType
    _max?: ExpensesMaxAggregateInputType
  }

  export type ExpensesGroupByOutputType = {
    id: string
    projectId: string
    submittedBy: string
    expenseType: string
    isBillable: boolean
    amount: Decimal
    description: string | null
    expenseDate: Date
    _count: ExpensesCountAggregateOutputType | null
    _avg: ExpensesAvgAggregateOutputType | null
    _sum: ExpensesSumAggregateOutputType | null
    _min: ExpensesMinAggregateOutputType | null
    _max: ExpensesMaxAggregateOutputType | null
  }

  type GetExpensesGroupByPayload<T extends ExpensesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpensesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpensesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
            : GetScalarType<T[P], ExpensesGroupByOutputType[P]>
        }
      >
    >


  export type ExpensesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    submittedBy?: boolean
    expenseType?: boolean
    isBillable?: boolean
    amount?: boolean
    description?: boolean
    expenseDate?: boolean
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expenses"]>



  export type ExpensesSelectScalar = {
    id?: boolean
    projectId?: boolean
    submittedBy?: boolean
    expenseType?: boolean
    isBillable?: boolean
    amount?: boolean
    description?: boolean
    expenseDate?: boolean
  }

  export type ExpensesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "submittedBy" | "expenseType" | "isBillable" | "amount" | "description" | "expenseDate", ExtArgs["result"]["expenses"]>
  export type ExpensesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $ExpensesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expenses"
    objects: {
      Projects: Prisma.$ProjectsPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      submittedBy: string
      expenseType: string
      isBillable: boolean
      amount: Prisma.Decimal
      description: string | null
      expenseDate: Date
    }, ExtArgs["result"]["expenses"]>
    composites: {}
  }

  type ExpensesGetPayload<S extends boolean | null | undefined | ExpensesDefaultArgs> = $Result.GetResult<Prisma.$ExpensesPayload, S>

  type ExpensesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExpensesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpensesCountAggregateInputType | true
    }

  export interface ExpensesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expenses'], meta: { name: 'Expenses' } }
    /**
     * Find zero or one Expenses that matches the filter.
     * @param {ExpensesFindUniqueArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExpensesFindUniqueArgs>(args: SelectSubset<T, ExpensesFindUniqueArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expenses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExpensesFindUniqueOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExpensesFindUniqueOrThrowArgs>(args: SelectSubset<T, ExpensesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindFirstArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExpensesFindFirstArgs>(args?: SelectSubset<T, ExpensesFindFirstArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expenses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindFirstOrThrowArgs} args - Arguments to find a Expenses
     * @example
     * // Get one Expenses
     * const expenses = await prisma.expenses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExpensesFindFirstOrThrowArgs>(args?: SelectSubset<T, ExpensesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expenses.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expenses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expensesWithIdOnly = await prisma.expenses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExpensesFindManyArgs>(args?: SelectSubset<T, ExpensesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expenses.
     * @param {ExpensesCreateArgs} args - Arguments to create a Expenses.
     * @example
     * // Create one Expenses
     * const Expenses = await prisma.expenses.create({
     *   data: {
     *     // ... data to create a Expenses
     *   }
     * })
     * 
     */
    create<T extends ExpensesCreateArgs>(args: SelectSubset<T, ExpensesCreateArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {ExpensesCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expenses = await prisma.expenses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExpensesCreateManyArgs>(args?: SelectSubset<T, ExpensesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Expenses.
     * @param {ExpensesDeleteArgs} args - Arguments to delete one Expenses.
     * @example
     * // Delete one Expenses
     * const Expenses = await prisma.expenses.delete({
     *   where: {
     *     // ... filter to delete one Expenses
     *   }
     * })
     * 
     */
    delete<T extends ExpensesDeleteArgs>(args: SelectSubset<T, ExpensesDeleteArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expenses.
     * @param {ExpensesUpdateArgs} args - Arguments to update one Expenses.
     * @example
     * // Update one Expenses
     * const expenses = await prisma.expenses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExpensesUpdateArgs>(args: SelectSubset<T, ExpensesUpdateArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {ExpensesDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expenses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExpensesDeleteManyArgs>(args?: SelectSubset<T, ExpensesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expenses = await prisma.expenses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExpensesUpdateManyArgs>(args: SelectSubset<T, ExpensesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Expenses.
     * @param {ExpensesUpsertArgs} args - Arguments to update or create a Expenses.
     * @example
     * // Update or create a Expenses
     * const expenses = await prisma.expenses.upsert({
     *   create: {
     *     // ... data to create a Expenses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expenses we want to update
     *   }
     * })
     */
    upsert<T extends ExpensesUpsertArgs>(args: SelectSubset<T, ExpensesUpsertArgs<ExtArgs>>): Prisma__ExpensesClient<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expenses.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends ExpensesCountArgs>(
      args?: Subset<T, ExpensesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpensesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpensesAggregateArgs>(args: Subset<T, ExpensesAggregateArgs>): Prisma.PrismaPromise<GetExpensesAggregateType<T>>

    /**
     * Group by Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpensesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpensesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpensesGroupByArgs['orderBy'] }
        : { orderBy?: ExpensesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpensesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpensesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expenses model
   */
  readonly fields: ExpensesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expenses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpensesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Projects<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Expenses model
   */
  interface ExpensesFieldRefs {
    readonly id: FieldRef<"Expenses", 'String'>
    readonly projectId: FieldRef<"Expenses", 'String'>
    readonly submittedBy: FieldRef<"Expenses", 'String'>
    readonly expenseType: FieldRef<"Expenses", 'String'>
    readonly isBillable: FieldRef<"Expenses", 'Boolean'>
    readonly amount: FieldRef<"Expenses", 'Decimal'>
    readonly description: FieldRef<"Expenses", 'String'>
    readonly expenseDate: FieldRef<"Expenses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Expenses findUnique
   */
  export type ExpensesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses findUniqueOrThrow
   */
  export type ExpensesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses findFirst
   */
  export type ExpensesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses findFirstOrThrow
   */
  export type ExpensesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expenses.
     */
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses findMany
   */
  export type ExpensesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter, which Expenses to fetch.
     */
    where?: ExpensesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expenses to fetch.
     */
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expenses.
     */
    cursor?: ExpensesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expenses.
     */
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Expenses create
   */
  export type ExpensesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * The data needed to create a Expenses.
     */
    data: XOR<ExpensesCreateInput, ExpensesUncheckedCreateInput>
  }

  /**
   * Expenses createMany
   */
  export type ExpensesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expenses.
     */
    data: ExpensesCreateManyInput | ExpensesCreateManyInput[]
  }

  /**
   * Expenses update
   */
  export type ExpensesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * The data needed to update a Expenses.
     */
    data: XOR<ExpensesUpdateInput, ExpensesUncheckedUpdateInput>
    /**
     * Choose, which Expenses to update.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses updateMany
   */
  export type ExpensesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expenses.
     */
    data: XOR<ExpensesUpdateManyMutationInput, ExpensesUncheckedUpdateManyInput>
    /**
     * Filter which Expenses to update
     */
    where?: ExpensesWhereInput
    /**
     * Limit how many Expenses to update.
     */
    limit?: number
  }

  /**
   * Expenses upsert
   */
  export type ExpensesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * The filter to search for the Expenses to update in case it exists.
     */
    where: ExpensesWhereUniqueInput
    /**
     * In case the Expenses found by the `where` argument doesn't exist, create a new Expenses with this data.
     */
    create: XOR<ExpensesCreateInput, ExpensesUncheckedCreateInput>
    /**
     * In case the Expenses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpensesUpdateInput, ExpensesUncheckedUpdateInput>
  }

  /**
   * Expenses delete
   */
  export type ExpensesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    /**
     * Filter which Expenses to delete.
     */
    where: ExpensesWhereUniqueInput
  }

  /**
   * Expenses deleteMany
   */
  export type ExpensesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expenses to delete
     */
    where?: ExpensesWhereInput
    /**
     * Limit how many Expenses to delete.
     */
    limit?: number
  }

  /**
   * Expenses without action
   */
  export type ExpensesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
  }


  /**
   * Model Projects
   */

  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    totalContract: Decimal | null
    approvedBudget: Decimal | null
    allocatedBudget: Decimal | null
  }

  export type ProjectsSumAggregateOutputType = {
    totalContract: Decimal | null
    approvedBudget: Decimal | null
    allocatedBudget: Decimal | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    clientId: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    billingType: string | null
    billingRateTimePeriod: string | null
    totalContract: Decimal | null
    approvedBudget: Decimal | null
    allocatedBudget: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    clientId: string | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
    billingType: string | null
    billingRateTimePeriod: string | null
    totalContract: Decimal | null
    approvedBudget: Decimal | null
    allocatedBudget: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    name: number
    code: number
    clientId: number
    startDate: number
    endDate: number
    status: number
    billingType: number
    billingRateTimePeriod: number
    totalContract: number
    approvedBudget: number
    allocatedBudget: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    totalContract?: true
    approvedBudget?: true
    allocatedBudget?: true
  }

  export type ProjectsSumAggregateInputType = {
    totalContract?: true
    approvedBudget?: true
    allocatedBudget?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    clientId?: true
    startDate?: true
    endDate?: true
    status?: true
    billingType?: true
    billingRateTimePeriod?: true
    totalContract?: true
    approvedBudget?: true
    allocatedBudget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    clientId?: true
    startDate?: true
    endDate?: true
    status?: true
    billingType?: true
    billingRateTimePeriod?: true
    totalContract?: true
    approvedBudget?: true
    allocatedBudget?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    clientId?: true
    startDate?: true
    endDate?: true
    status?: true
    billingType?: true
    billingRateTimePeriod?: true
    totalContract?: true
    approvedBudget?: true
    allocatedBudget?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to aggregate.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type ProjectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithAggregationInput | ProjectsOrderByWithAggregationInput[]
    by: ProjectsScalarFieldEnum[] | ProjectsScalarFieldEnum
    having?: ProjectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }

  export type ProjectsGroupByOutputType = {
    id: string
    name: string
    code: string
    clientId: string | null
    startDate: Date
    endDate: Date
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal
    approvedBudget: Decimal
    allocatedBudget: Decimal
    createdAt: Date
    updatedAt: Date
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends ProjectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type ProjectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    billingType?: boolean
    billingRateTimePeriod?: boolean
    totalContract?: boolean
    approvedBudget?: boolean
    allocatedBudget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Activities?: boolean | Projects$ActivitiesArgs<ExtArgs>
    Budgets?: boolean | Projects$BudgetsArgs<ExtArgs>
    CostSplits?: boolean | Projects$CostSplitsArgs<ExtArgs>
    Expenses?: boolean | Projects$ExpensesArgs<ExtArgs>
    users?: boolean | Projects$usersArgs<ExtArgs>
    Clients?: boolean | Projects$ClientsArgs<ExtArgs>
    TravelRequests?: boolean | Projects$TravelRequestsArgs<ExtArgs>
    Managers?: boolean | Projects$ManagersArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>



  export type ProjectsSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    billingType?: boolean
    billingRateTimePeriod?: boolean
    totalContract?: boolean
    approvedBudget?: boolean
    allocatedBudget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "clientId" | "startDate" | "endDate" | "status" | "billingType" | "billingRateTimePeriod" | "totalContract" | "approvedBudget" | "allocatedBudget" | "createdAt" | "updatedAt", ExtArgs["result"]["projects"]>
  export type ProjectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Activities?: boolean | Projects$ActivitiesArgs<ExtArgs>
    Budgets?: boolean | Projects$BudgetsArgs<ExtArgs>
    CostSplits?: boolean | Projects$CostSplitsArgs<ExtArgs>
    Expenses?: boolean | Projects$ExpensesArgs<ExtArgs>
    users?: boolean | Projects$usersArgs<ExtArgs>
    Clients?: boolean | Projects$ClientsArgs<ExtArgs>
    TravelRequests?: boolean | Projects$TravelRequestsArgs<ExtArgs>
    Managers?: boolean | Projects$ManagersArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProjectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Projects"
    objects: {
      Activities: Prisma.$ActivitiesPayload<ExtArgs>[]
      Budgets: Prisma.$BudgetsPayload<ExtArgs>[]
      CostSplits: Prisma.$CostSplitsPayload<ExtArgs>[]
      Expenses: Prisma.$ExpensesPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
      Clients: Prisma.$ClientsPayload<ExtArgs> | null
      TravelRequests: Prisma.$TravelRequestsPayload<ExtArgs>[]
      Managers: Prisma.$ManagersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      clientId: string | null
      startDate: Date
      endDate: Date
      status: string
      billingType: string
      billingRateTimePeriod: string
      totalContract: Prisma.Decimal
      approvedBudget: Prisma.Decimal
      allocatedBudget: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["projects"]>
    composites: {}
  }

  type ProjectsGetPayload<S extends boolean | null | undefined | ProjectsDefaultArgs> = $Result.GetResult<Prisma.$ProjectsPayload, S>

  type ProjectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface ProjectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projects'], meta: { name: 'Projects' } }
    /**
     * Find zero or one Projects that matches the filter.
     * @param {ProjectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectsFindUniqueArgs>(args: SelectSubset<T, ProjectsFindUniqueArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projects that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectsFindFirstArgs>(args?: SelectSubset<T, ProjectsFindFirstArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectsFindManyArgs>(args?: SelectSubset<T, ProjectsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projects.
     * @param {ProjectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
     */
    create<T extends ProjectsCreateArgs>(args: SelectSubset<T, ProjectsCreateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectsCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectsCreateManyArgs>(args?: SelectSubset<T, ProjectsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projects.
     * @param {ProjectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
     */
    delete<T extends ProjectsDeleteArgs>(args: SelectSubset<T, ProjectsDeleteArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projects.
     * @param {ProjectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectsUpdateArgs>(args: SelectSubset<T, ProjectsUpdateArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectsDeleteManyArgs>(args?: SelectSubset<T, ProjectsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectsUpdateManyArgs>(args: SelectSubset<T, ProjectsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {ProjectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
     */
    upsert<T extends ProjectsUpsertArgs>(args: SelectSubset<T, ProjectsUpsertArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectsCountArgs>(
      args?: Subset<T, ProjectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectsGroupByArgs['orderBy'] }
        : { orderBy?: ProjectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projects model
   */
  readonly fields: ProjectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Activities<T extends Projects$ActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Projects$ActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Budgets<T extends Projects$BudgetsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$BudgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CostSplits<T extends Projects$CostSplitsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$CostSplitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Expenses<T extends Projects$ExpensesArgs<ExtArgs> = {}>(args?: Subset<T, Projects$ExpensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Projects$usersArgs<ExtArgs> = {}>(args?: Subset<T, Projects$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Clients<T extends Projects$ClientsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$ClientsArgs<ExtArgs>>): Prisma__ClientsClient<$Result.GetResult<Prisma.$ClientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    TravelRequests<T extends Projects$TravelRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Projects$TravelRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Managers<T extends Projects$ManagersArgs<ExtArgs> = {}>(args?: Subset<T, Projects$ManagersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Projects model
   */
  interface ProjectsFieldRefs {
    readonly id: FieldRef<"Projects", 'String'>
    readonly name: FieldRef<"Projects", 'String'>
    readonly code: FieldRef<"Projects", 'String'>
    readonly clientId: FieldRef<"Projects", 'String'>
    readonly startDate: FieldRef<"Projects", 'DateTime'>
    readonly endDate: FieldRef<"Projects", 'DateTime'>
    readonly status: FieldRef<"Projects", 'String'>
    readonly billingType: FieldRef<"Projects", 'String'>
    readonly billingRateTimePeriod: FieldRef<"Projects", 'String'>
    readonly totalContract: FieldRef<"Projects", 'Decimal'>
    readonly approvedBudget: FieldRef<"Projects", 'Decimal'>
    readonly allocatedBudget: FieldRef<"Projects", 'Decimal'>
    readonly createdAt: FieldRef<"Projects", 'DateTime'>
    readonly updatedAt: FieldRef<"Projects", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Projects findUnique
   */
  export type ProjectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findUniqueOrThrow
   */
  export type ProjectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects findFirst
   */
  export type ProjectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findFirstOrThrow
   */
  export type ProjectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects findMany
   */
  export type ProjectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Projects create
   */
  export type ProjectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The data needed to create a Projects.
     */
    data: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
  }

  /**
   * Projects createMany
   */
  export type ProjectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectsCreateManyInput | ProjectsCreateManyInput[]
  }

  /**
   * Projects update
   */
  export type ProjectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The data needed to update a Projects.
     */
    data: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
    /**
     * Choose, which Projects to update.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects updateMany
   */
  export type ProjectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Projects upsert
   */
  export type ProjectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * The filter to search for the Projects to update in case it exists.
     */
    where: ProjectsWhereUniqueInput
    /**
     * In case the Projects found by the `where` argument doesn't exist, create a new Projects with this data.
     */
    create: XOR<ProjectsCreateInput, ProjectsUncheckedCreateInput>
    /**
     * In case the Projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectsUpdateInput, ProjectsUncheckedUpdateInput>
  }

  /**
   * Projects delete
   */
  export type ProjectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    /**
     * Filter which Projects to delete.
     */
    where: ProjectsWhereUniqueInput
  }

  /**
   * Projects deleteMany
   */
  export type ProjectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectsWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Projects.Activities
   */
  export type Projects$ActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    where?: ActivitiesWhereInput
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    cursor?: ActivitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivitiesScalarFieldEnum | ActivitiesScalarFieldEnum[]
  }

  /**
   * Projects.Budgets
   */
  export type Projects$BudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    where?: BudgetsWhereInput
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    cursor?: BudgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * Projects.CostSplits
   */
  export type Projects$CostSplitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    where?: CostSplitsWhereInput
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    cursor?: CostSplitsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CostSplitsScalarFieldEnum | CostSplitsScalarFieldEnum[]
  }

  /**
   * Projects.Expenses
   */
  export type Projects$ExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    where?: ExpensesWhereInput
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    cursor?: ExpensesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Projects.users
   */
  export type Projects$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Projects.Clients
   */
  export type Projects$ClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Clients
     */
    select?: ClientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Clients
     */
    omit?: ClientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientsInclude<ExtArgs> | null
    where?: ClientsWhereInput
  }

  /**
   * Projects.TravelRequests
   */
  export type Projects$TravelRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    where?: TravelRequestsWhereInput
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    cursor?: TravelRequestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TravelRequestsScalarFieldEnum | TravelRequestsScalarFieldEnum[]
  }

  /**
   * Projects.Managers
   */
  export type Projects$ManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    where?: ManagersWhereInput
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    cursor?: ManagersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * Projects without action
   */
  export type ProjectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
  }


  /**
   * Model RoleRates
   */

  export type AggregateRoleRates = {
    _count: RoleRatesCountAggregateOutputType | null
    _avg: RoleRatesAvgAggregateOutputType | null
    _sum: RoleRatesSumAggregateOutputType | null
    _min: RoleRatesMinAggregateOutputType | null
    _max: RoleRatesMaxAggregateOutputType | null
  }

  export type RoleRatesAvgAggregateOutputType = {
    rate: Decimal | null
  }

  export type RoleRatesSumAggregateOutputType = {
    rate: Decimal | null
  }

  export type RoleRatesMinAggregateOutputType = {
    id: string | null
    rate: Decimal | null
    validFrom: Date | null
  }

  export type RoleRatesMaxAggregateOutputType = {
    id: string | null
    rate: Decimal | null
    validFrom: Date | null
  }

  export type RoleRatesCountAggregateOutputType = {
    id: number
    rate: number
    validFrom: number
    _all: number
  }


  export type RoleRatesAvgAggregateInputType = {
    rate?: true
  }

  export type RoleRatesSumAggregateInputType = {
    rate?: true
  }

  export type RoleRatesMinAggregateInputType = {
    id?: true
    rate?: true
    validFrom?: true
  }

  export type RoleRatesMaxAggregateInputType = {
    id?: true
    rate?: true
    validFrom?: true
  }

  export type RoleRatesCountAggregateInputType = {
    id?: true
    rate?: true
    validFrom?: true
    _all?: true
  }

  export type RoleRatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleRates to aggregate.
     */
    where?: RoleRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleRates to fetch.
     */
    orderBy?: RoleRatesOrderByWithRelationInput | RoleRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoleRates
    **/
    _count?: true | RoleRatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleRatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleRatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleRatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleRatesMaxAggregateInputType
  }

  export type GetRoleRatesAggregateType<T extends RoleRatesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoleRates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoleRates[P]>
      : GetScalarType<T[P], AggregateRoleRates[P]>
  }




  export type RoleRatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleRatesWhereInput
    orderBy?: RoleRatesOrderByWithAggregationInput | RoleRatesOrderByWithAggregationInput[]
    by: RoleRatesScalarFieldEnum[] | RoleRatesScalarFieldEnum
    having?: RoleRatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleRatesCountAggregateInputType | true
    _avg?: RoleRatesAvgAggregateInputType
    _sum?: RoleRatesSumAggregateInputType
    _min?: RoleRatesMinAggregateInputType
    _max?: RoleRatesMaxAggregateInputType
  }

  export type RoleRatesGroupByOutputType = {
    id: string
    rate: Decimal
    validFrom: Date
    _count: RoleRatesCountAggregateOutputType | null
    _avg: RoleRatesAvgAggregateOutputType | null
    _sum: RoleRatesSumAggregateOutputType | null
    _min: RoleRatesMinAggregateOutputType | null
    _max: RoleRatesMaxAggregateOutputType | null
  }

  type GetRoleRatesGroupByPayload<T extends RoleRatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleRatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleRatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleRatesGroupByOutputType[P]>
            : GetScalarType<T[P], RoleRatesGroupByOutputType[P]>
        }
      >
    >


  export type RoleRatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rate?: boolean
    validFrom?: boolean
    roles?: boolean | RoleRates$rolesArgs<ExtArgs>
    _count?: boolean | RoleRatesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleRates"]>



  export type RoleRatesSelectScalar = {
    id?: boolean
    rate?: boolean
    validFrom?: boolean
  }

  export type RoleRatesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rate" | "validFrom", ExtArgs["result"]["roleRates"]>
  export type RoleRatesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | RoleRates$rolesArgs<ExtArgs>
    _count?: boolean | RoleRatesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RoleRatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoleRates"
    objects: {
      roles: Prisma.$rolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rate: Prisma.Decimal
      validFrom: Date
    }, ExtArgs["result"]["roleRates"]>
    composites: {}
  }

  type RoleRatesGetPayload<S extends boolean | null | undefined | RoleRatesDefaultArgs> = $Result.GetResult<Prisma.$RoleRatesPayload, S>

  type RoleRatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleRatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleRatesCountAggregateInputType | true
    }

  export interface RoleRatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoleRates'], meta: { name: 'RoleRates' } }
    /**
     * Find zero or one RoleRates that matches the filter.
     * @param {RoleRatesFindUniqueArgs} args - Arguments to find a RoleRates
     * @example
     * // Get one RoleRates
     * const roleRates = await prisma.roleRates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleRatesFindUniqueArgs>(args: SelectSubset<T, RoleRatesFindUniqueArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoleRates that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleRatesFindUniqueOrThrowArgs} args - Arguments to find a RoleRates
     * @example
     * // Get one RoleRates
     * const roleRates = await prisma.roleRates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleRatesFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleRatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoleRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesFindFirstArgs} args - Arguments to find a RoleRates
     * @example
     * // Get one RoleRates
     * const roleRates = await prisma.roleRates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleRatesFindFirstArgs>(args?: SelectSubset<T, RoleRatesFindFirstArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoleRates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesFindFirstOrThrowArgs} args - Arguments to find a RoleRates
     * @example
     * // Get one RoleRates
     * const roleRates = await prisma.roleRates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleRatesFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleRatesFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoleRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoleRates
     * const roleRates = await prisma.roleRates.findMany()
     * 
     * // Get first 10 RoleRates
     * const roleRates = await prisma.roleRates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleRatesWithIdOnly = await prisma.roleRates.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleRatesFindManyArgs>(args?: SelectSubset<T, RoleRatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoleRates.
     * @param {RoleRatesCreateArgs} args - Arguments to create a RoleRates.
     * @example
     * // Create one RoleRates
     * const RoleRates = await prisma.roleRates.create({
     *   data: {
     *     // ... data to create a RoleRates
     *   }
     * })
     * 
     */
    create<T extends RoleRatesCreateArgs>(args: SelectSubset<T, RoleRatesCreateArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoleRates.
     * @param {RoleRatesCreateManyArgs} args - Arguments to create many RoleRates.
     * @example
     * // Create many RoleRates
     * const roleRates = await prisma.roleRates.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleRatesCreateManyArgs>(args?: SelectSubset<T, RoleRatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoleRates.
     * @param {RoleRatesDeleteArgs} args - Arguments to delete one RoleRates.
     * @example
     * // Delete one RoleRates
     * const RoleRates = await prisma.roleRates.delete({
     *   where: {
     *     // ... filter to delete one RoleRates
     *   }
     * })
     * 
     */
    delete<T extends RoleRatesDeleteArgs>(args: SelectSubset<T, RoleRatesDeleteArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoleRates.
     * @param {RoleRatesUpdateArgs} args - Arguments to update one RoleRates.
     * @example
     * // Update one RoleRates
     * const roleRates = await prisma.roleRates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleRatesUpdateArgs>(args: SelectSubset<T, RoleRatesUpdateArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoleRates.
     * @param {RoleRatesDeleteManyArgs} args - Arguments to filter RoleRates to delete.
     * @example
     * // Delete a few RoleRates
     * const { count } = await prisma.roleRates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleRatesDeleteManyArgs>(args?: SelectSubset<T, RoleRatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoleRates
     * const roleRates = await prisma.roleRates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleRatesUpdateManyArgs>(args: SelectSubset<T, RoleRatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoleRates.
     * @param {RoleRatesUpsertArgs} args - Arguments to update or create a RoleRates.
     * @example
     * // Update or create a RoleRates
     * const roleRates = await prisma.roleRates.upsert({
     *   create: {
     *     // ... data to create a RoleRates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoleRates we want to update
     *   }
     * })
     */
    upsert<T extends RoleRatesUpsertArgs>(args: SelectSubset<T, RoleRatesUpsertArgs<ExtArgs>>): Prisma__RoleRatesClient<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoleRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesCountArgs} args - Arguments to filter RoleRates to count.
     * @example
     * // Count the number of RoleRates
     * const count = await prisma.roleRates.count({
     *   where: {
     *     // ... the filter for the RoleRates we want to count
     *   }
     * })
    **/
    count<T extends RoleRatesCountArgs>(
      args?: Subset<T, RoleRatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleRatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoleRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleRatesAggregateArgs>(args: Subset<T, RoleRatesAggregateArgs>): Prisma.PrismaPromise<GetRoleRatesAggregateType<T>>

    /**
     * Group by RoleRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleRatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleRatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleRatesGroupByArgs['orderBy'] }
        : { orderBy?: RoleRatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleRatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleRatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoleRates model
   */
  readonly fields: RoleRatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoleRates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleRatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends RoleRates$rolesArgs<ExtArgs> = {}>(args?: Subset<T, RoleRates$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoleRates model
   */
  interface RoleRatesFieldRefs {
    readonly id: FieldRef<"RoleRates", 'String'>
    readonly rate: FieldRef<"RoleRates", 'Decimal'>
    readonly validFrom: FieldRef<"RoleRates", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoleRates findUnique
   */
  export type RoleRatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter, which RoleRates to fetch.
     */
    where: RoleRatesWhereUniqueInput
  }

  /**
   * RoleRates findUniqueOrThrow
   */
  export type RoleRatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter, which RoleRates to fetch.
     */
    where: RoleRatesWhereUniqueInput
  }

  /**
   * RoleRates findFirst
   */
  export type RoleRatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter, which RoleRates to fetch.
     */
    where?: RoleRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleRates to fetch.
     */
    orderBy?: RoleRatesOrderByWithRelationInput | RoleRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleRates.
     */
    cursor?: RoleRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleRates.
     */
    distinct?: RoleRatesScalarFieldEnum | RoleRatesScalarFieldEnum[]
  }

  /**
   * RoleRates findFirstOrThrow
   */
  export type RoleRatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter, which RoleRates to fetch.
     */
    where?: RoleRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleRates to fetch.
     */
    orderBy?: RoleRatesOrderByWithRelationInput | RoleRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleRates.
     */
    cursor?: RoleRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleRates.
     */
    distinct?: RoleRatesScalarFieldEnum | RoleRatesScalarFieldEnum[]
  }

  /**
   * RoleRates findMany
   */
  export type RoleRatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter, which RoleRates to fetch.
     */
    where?: RoleRatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleRates to fetch.
     */
    orderBy?: RoleRatesOrderByWithRelationInput | RoleRatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoleRates.
     */
    cursor?: RoleRatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleRates.
     */
    skip?: number
    distinct?: RoleRatesScalarFieldEnum | RoleRatesScalarFieldEnum[]
  }

  /**
   * RoleRates create
   */
  export type RoleRatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * The data needed to create a RoleRates.
     */
    data: XOR<RoleRatesCreateInput, RoleRatesUncheckedCreateInput>
  }

  /**
   * RoleRates createMany
   */
  export type RoleRatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoleRates.
     */
    data: RoleRatesCreateManyInput | RoleRatesCreateManyInput[]
  }

  /**
   * RoleRates update
   */
  export type RoleRatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * The data needed to update a RoleRates.
     */
    data: XOR<RoleRatesUpdateInput, RoleRatesUncheckedUpdateInput>
    /**
     * Choose, which RoleRates to update.
     */
    where: RoleRatesWhereUniqueInput
  }

  /**
   * RoleRates updateMany
   */
  export type RoleRatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoleRates.
     */
    data: XOR<RoleRatesUpdateManyMutationInput, RoleRatesUncheckedUpdateManyInput>
    /**
     * Filter which RoleRates to update
     */
    where?: RoleRatesWhereInput
    /**
     * Limit how many RoleRates to update.
     */
    limit?: number
  }

  /**
   * RoleRates upsert
   */
  export type RoleRatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * The filter to search for the RoleRates to update in case it exists.
     */
    where: RoleRatesWhereUniqueInput
    /**
     * In case the RoleRates found by the `where` argument doesn't exist, create a new RoleRates with this data.
     */
    create: XOR<RoleRatesCreateInput, RoleRatesUncheckedCreateInput>
    /**
     * In case the RoleRates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleRatesUpdateInput, RoleRatesUncheckedUpdateInput>
  }

  /**
   * RoleRates delete
   */
  export type RoleRatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    /**
     * Filter which RoleRates to delete.
     */
    where: RoleRatesWhereUniqueInput
  }

  /**
   * RoleRates deleteMany
   */
  export type RoleRatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleRates to delete
     */
    where?: RoleRatesWhereInput
    /**
     * Limit how many RoleRates to delete.
     */
    limit?: number
  }

  /**
   * RoleRates.roles
   */
  export type RoleRates$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    cursor?: rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * RoleRates without action
   */
  export type RoleRatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
  }


  /**
   * Model sysdiagrams
   */

  export type AggregateSysdiagrams = {
    _count: SysdiagramsCountAggregateOutputType | null
    _avg: SysdiagramsAvgAggregateOutputType | null
    _sum: SysdiagramsSumAggregateOutputType | null
    _min: SysdiagramsMinAggregateOutputType | null
    _max: SysdiagramsMaxAggregateOutputType | null
  }

  export type SysdiagramsAvgAggregateOutputType = {
    principal_id: number | null
    diagram_id: number | null
    version: number | null
  }

  export type SysdiagramsSumAggregateOutputType = {
    principal_id: number | null
    diagram_id: number | null
    version: number | null
  }

  export type SysdiagramsMinAggregateOutputType = {
    name: string | null
    principal_id: number | null
    diagram_id: number | null
    version: number | null
    definition: Uint8Array | null
  }

  export type SysdiagramsMaxAggregateOutputType = {
    name: string | null
    principal_id: number | null
    diagram_id: number | null
    version: number | null
    definition: Uint8Array | null
  }

  export type SysdiagramsCountAggregateOutputType = {
    name: number
    principal_id: number
    diagram_id: number
    version: number
    definition: number
    _all: number
  }


  export type SysdiagramsAvgAggregateInputType = {
    principal_id?: true
    diagram_id?: true
    version?: true
  }

  export type SysdiagramsSumAggregateInputType = {
    principal_id?: true
    diagram_id?: true
    version?: true
  }

  export type SysdiagramsMinAggregateInputType = {
    name?: true
    principal_id?: true
    diagram_id?: true
    version?: true
    definition?: true
  }

  export type SysdiagramsMaxAggregateInputType = {
    name?: true
    principal_id?: true
    diagram_id?: true
    version?: true
    definition?: true
  }

  export type SysdiagramsCountAggregateInputType = {
    name?: true
    principal_id?: true
    diagram_id?: true
    version?: true
    definition?: true
    _all?: true
  }

  export type SysdiagramsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sysdiagrams to aggregate.
     */
    where?: sysdiagramsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sysdiagrams to fetch.
     */
    orderBy?: sysdiagramsOrderByWithRelationInput | sysdiagramsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sysdiagramsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sysdiagrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sysdiagrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sysdiagrams
    **/
    _count?: true | SysdiagramsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SysdiagramsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SysdiagramsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SysdiagramsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SysdiagramsMaxAggregateInputType
  }

  export type GetSysdiagramsAggregateType<T extends SysdiagramsAggregateArgs> = {
        [P in keyof T & keyof AggregateSysdiagrams]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSysdiagrams[P]>
      : GetScalarType<T[P], AggregateSysdiagrams[P]>
  }




  export type sysdiagramsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sysdiagramsWhereInput
    orderBy?: sysdiagramsOrderByWithAggregationInput | sysdiagramsOrderByWithAggregationInput[]
    by: SysdiagramsScalarFieldEnum[] | SysdiagramsScalarFieldEnum
    having?: sysdiagramsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SysdiagramsCountAggregateInputType | true
    _avg?: SysdiagramsAvgAggregateInputType
    _sum?: SysdiagramsSumAggregateInputType
    _min?: SysdiagramsMinAggregateInputType
    _max?: SysdiagramsMaxAggregateInputType
  }

  export type SysdiagramsGroupByOutputType = {
    name: string
    principal_id: number
    diagram_id: number
    version: number | null
    definition: Uint8Array | null
    _count: SysdiagramsCountAggregateOutputType | null
    _avg: SysdiagramsAvgAggregateOutputType | null
    _sum: SysdiagramsSumAggregateOutputType | null
    _min: SysdiagramsMinAggregateOutputType | null
    _max: SysdiagramsMaxAggregateOutputType | null
  }

  type GetSysdiagramsGroupByPayload<T extends sysdiagramsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SysdiagramsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SysdiagramsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SysdiagramsGroupByOutputType[P]>
            : GetScalarType<T[P], SysdiagramsGroupByOutputType[P]>
        }
      >
    >


  export type sysdiagramsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    principal_id?: boolean
    diagram_id?: boolean
    version?: boolean
    definition?: boolean
  }, ExtArgs["result"]["sysdiagrams"]>



  export type sysdiagramsSelectScalar = {
    name?: boolean
    principal_id?: boolean
    diagram_id?: boolean
    version?: boolean
    definition?: boolean
  }

  export type sysdiagramsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "principal_id" | "diagram_id" | "version" | "definition", ExtArgs["result"]["sysdiagrams"]>

  export type $sysdiagramsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sysdiagrams"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      name: string
      principal_id: number
      diagram_id: number
      version: number | null
      definition: Uint8Array | null
    }, ExtArgs["result"]["sysdiagrams"]>
    composites: {}
  }

  type sysdiagramsGetPayload<S extends boolean | null | undefined | sysdiagramsDefaultArgs> = $Result.GetResult<Prisma.$sysdiagramsPayload, S>

  type sysdiagramsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sysdiagramsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SysdiagramsCountAggregateInputType | true
    }

  export interface sysdiagramsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sysdiagrams'], meta: { name: 'sysdiagrams' } }
    /**
     * Find zero or one Sysdiagrams that matches the filter.
     * @param {sysdiagramsFindUniqueArgs} args - Arguments to find a Sysdiagrams
     * @example
     * // Get one Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sysdiagramsFindUniqueArgs>(args: SelectSubset<T, sysdiagramsFindUniqueArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sysdiagrams that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sysdiagramsFindUniqueOrThrowArgs} args - Arguments to find a Sysdiagrams
     * @example
     * // Get one Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sysdiagramsFindUniqueOrThrowArgs>(args: SelectSubset<T, sysdiagramsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sysdiagrams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsFindFirstArgs} args - Arguments to find a Sysdiagrams
     * @example
     * // Get one Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sysdiagramsFindFirstArgs>(args?: SelectSubset<T, sysdiagramsFindFirstArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sysdiagrams that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsFindFirstOrThrowArgs} args - Arguments to find a Sysdiagrams
     * @example
     * // Get one Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sysdiagramsFindFirstOrThrowArgs>(args?: SelectSubset<T, sysdiagramsFindFirstOrThrowArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sysdiagrams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findMany()
     * 
     * // Get first 10 Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const sysdiagramsWithNameOnly = await prisma.sysdiagrams.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends sysdiagramsFindManyArgs>(args?: SelectSubset<T, sysdiagramsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sysdiagrams.
     * @param {sysdiagramsCreateArgs} args - Arguments to create a Sysdiagrams.
     * @example
     * // Create one Sysdiagrams
     * const Sysdiagrams = await prisma.sysdiagrams.create({
     *   data: {
     *     // ... data to create a Sysdiagrams
     *   }
     * })
     * 
     */
    create<T extends sysdiagramsCreateArgs>(args: SelectSubset<T, sysdiagramsCreateArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sysdiagrams.
     * @param {sysdiagramsCreateManyArgs} args - Arguments to create many Sysdiagrams.
     * @example
     * // Create many Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sysdiagramsCreateManyArgs>(args?: SelectSubset<T, sysdiagramsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sysdiagrams.
     * @param {sysdiagramsDeleteArgs} args - Arguments to delete one Sysdiagrams.
     * @example
     * // Delete one Sysdiagrams
     * const Sysdiagrams = await prisma.sysdiagrams.delete({
     *   where: {
     *     // ... filter to delete one Sysdiagrams
     *   }
     * })
     * 
     */
    delete<T extends sysdiagramsDeleteArgs>(args: SelectSubset<T, sysdiagramsDeleteArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sysdiagrams.
     * @param {sysdiagramsUpdateArgs} args - Arguments to update one Sysdiagrams.
     * @example
     * // Update one Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sysdiagramsUpdateArgs>(args: SelectSubset<T, sysdiagramsUpdateArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sysdiagrams.
     * @param {sysdiagramsDeleteManyArgs} args - Arguments to filter Sysdiagrams to delete.
     * @example
     * // Delete a few Sysdiagrams
     * const { count } = await prisma.sysdiagrams.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sysdiagramsDeleteManyArgs>(args?: SelectSubset<T, sysdiagramsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sysdiagrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sysdiagramsUpdateManyArgs>(args: SelectSubset<T, sysdiagramsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sysdiagrams.
     * @param {sysdiagramsUpsertArgs} args - Arguments to update or create a Sysdiagrams.
     * @example
     * // Update or create a Sysdiagrams
     * const sysdiagrams = await prisma.sysdiagrams.upsert({
     *   create: {
     *     // ... data to create a Sysdiagrams
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sysdiagrams we want to update
     *   }
     * })
     */
    upsert<T extends sysdiagramsUpsertArgs>(args: SelectSubset<T, sysdiagramsUpsertArgs<ExtArgs>>): Prisma__sysdiagramsClient<$Result.GetResult<Prisma.$sysdiagramsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sysdiagrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsCountArgs} args - Arguments to filter Sysdiagrams to count.
     * @example
     * // Count the number of Sysdiagrams
     * const count = await prisma.sysdiagrams.count({
     *   where: {
     *     // ... the filter for the Sysdiagrams we want to count
     *   }
     * })
    **/
    count<T extends sysdiagramsCountArgs>(
      args?: Subset<T, sysdiagramsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SysdiagramsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sysdiagrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SysdiagramsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SysdiagramsAggregateArgs>(args: Subset<T, SysdiagramsAggregateArgs>): Prisma.PrismaPromise<GetSysdiagramsAggregateType<T>>

    /**
     * Group by Sysdiagrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sysdiagramsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sysdiagramsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sysdiagramsGroupByArgs['orderBy'] }
        : { orderBy?: sysdiagramsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sysdiagramsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSysdiagramsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sysdiagrams model
   */
  readonly fields: sysdiagramsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sysdiagrams.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sysdiagramsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sysdiagrams model
   */
  interface sysdiagramsFieldRefs {
    readonly name: FieldRef<"sysdiagrams", 'String'>
    readonly principal_id: FieldRef<"sysdiagrams", 'Int'>
    readonly diagram_id: FieldRef<"sysdiagrams", 'Int'>
    readonly version: FieldRef<"sysdiagrams", 'Int'>
    readonly definition: FieldRef<"sysdiagrams", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * sysdiagrams findUnique
   */
  export type sysdiagramsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter, which sysdiagrams to fetch.
     */
    where: sysdiagramsWhereUniqueInput
  }

  /**
   * sysdiagrams findUniqueOrThrow
   */
  export type sysdiagramsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter, which sysdiagrams to fetch.
     */
    where: sysdiagramsWhereUniqueInput
  }

  /**
   * sysdiagrams findFirst
   */
  export type sysdiagramsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter, which sysdiagrams to fetch.
     */
    where?: sysdiagramsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sysdiagrams to fetch.
     */
    orderBy?: sysdiagramsOrderByWithRelationInput | sysdiagramsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sysdiagrams.
     */
    cursor?: sysdiagramsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sysdiagrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sysdiagrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sysdiagrams.
     */
    distinct?: SysdiagramsScalarFieldEnum | SysdiagramsScalarFieldEnum[]
  }

  /**
   * sysdiagrams findFirstOrThrow
   */
  export type sysdiagramsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter, which sysdiagrams to fetch.
     */
    where?: sysdiagramsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sysdiagrams to fetch.
     */
    orderBy?: sysdiagramsOrderByWithRelationInput | sysdiagramsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sysdiagrams.
     */
    cursor?: sysdiagramsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sysdiagrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sysdiagrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sysdiagrams.
     */
    distinct?: SysdiagramsScalarFieldEnum | SysdiagramsScalarFieldEnum[]
  }

  /**
   * sysdiagrams findMany
   */
  export type sysdiagramsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter, which sysdiagrams to fetch.
     */
    where?: sysdiagramsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sysdiagrams to fetch.
     */
    orderBy?: sysdiagramsOrderByWithRelationInput | sysdiagramsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sysdiagrams.
     */
    cursor?: sysdiagramsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sysdiagrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sysdiagrams.
     */
    skip?: number
    distinct?: SysdiagramsScalarFieldEnum | SysdiagramsScalarFieldEnum[]
  }

  /**
   * sysdiagrams create
   */
  export type sysdiagramsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * The data needed to create a sysdiagrams.
     */
    data: XOR<sysdiagramsCreateInput, sysdiagramsUncheckedCreateInput>
  }

  /**
   * sysdiagrams createMany
   */
  export type sysdiagramsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sysdiagrams.
     */
    data: sysdiagramsCreateManyInput | sysdiagramsCreateManyInput[]
  }

  /**
   * sysdiagrams update
   */
  export type sysdiagramsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * The data needed to update a sysdiagrams.
     */
    data: XOR<sysdiagramsUpdateInput, sysdiagramsUncheckedUpdateInput>
    /**
     * Choose, which sysdiagrams to update.
     */
    where: sysdiagramsWhereUniqueInput
  }

  /**
   * sysdiagrams updateMany
   */
  export type sysdiagramsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sysdiagrams.
     */
    data: XOR<sysdiagramsUpdateManyMutationInput, sysdiagramsUncheckedUpdateManyInput>
    /**
     * Filter which sysdiagrams to update
     */
    where?: sysdiagramsWhereInput
    /**
     * Limit how many sysdiagrams to update.
     */
    limit?: number
  }

  /**
   * sysdiagrams upsert
   */
  export type sysdiagramsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * The filter to search for the sysdiagrams to update in case it exists.
     */
    where: sysdiagramsWhereUniqueInput
    /**
     * In case the sysdiagrams found by the `where` argument doesn't exist, create a new sysdiagrams with this data.
     */
    create: XOR<sysdiagramsCreateInput, sysdiagramsUncheckedCreateInput>
    /**
     * In case the sysdiagrams was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sysdiagramsUpdateInput, sysdiagramsUncheckedUpdateInput>
  }

  /**
   * sysdiagrams delete
   */
  export type sysdiagramsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
    /**
     * Filter which sysdiagrams to delete.
     */
    where: sysdiagramsWhereUniqueInput
  }

  /**
   * sysdiagrams deleteMany
   */
  export type sysdiagramsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sysdiagrams to delete
     */
    where?: sysdiagramsWhereInput
    /**
     * Limit how many sysdiagrams to delete.
     */
    limit?: number
  }

  /**
   * sysdiagrams without action
   */
  export type sysdiagramsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sysdiagrams
     */
    select?: sysdiagramsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sysdiagrams
     */
    omit?: sysdiagramsOmit<ExtArgs> | null
  }


  /**
   * Model TravelRequests
   */

  export type AggregateTravelRequests = {
    _count: TravelRequestsCountAggregateOutputType | null
    _avg: TravelRequestsAvgAggregateOutputType | null
    _sum: TravelRequestsSumAggregateOutputType | null
    _min: TravelRequestsMinAggregateOutputType | null
    _max: TravelRequestsMaxAggregateOutputType | null
  }

  export type TravelRequestsAvgAggregateOutputType = {
    cost: Decimal | null
  }

  export type TravelRequestsSumAggregateOutputType = {
    cost: Decimal | null
  }

  export type TravelRequestsMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    requesterId: string | null
    destination: string | null
    purpose: string | null
    cost: Decimal | null
    status: string | null
  }

  export type TravelRequestsMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    requesterId: string | null
    destination: string | null
    purpose: string | null
    cost: Decimal | null
    status: string | null
  }

  export type TravelRequestsCountAggregateOutputType = {
    id: number
    projectId: number
    requesterId: number
    destination: number
    purpose: number
    cost: number
    status: number
    _all: number
  }


  export type TravelRequestsAvgAggregateInputType = {
    cost?: true
  }

  export type TravelRequestsSumAggregateInputType = {
    cost?: true
  }

  export type TravelRequestsMinAggregateInputType = {
    id?: true
    projectId?: true
    requesterId?: true
    destination?: true
    purpose?: true
    cost?: true
    status?: true
  }

  export type TravelRequestsMaxAggregateInputType = {
    id?: true
    projectId?: true
    requesterId?: true
    destination?: true
    purpose?: true
    cost?: true
    status?: true
  }

  export type TravelRequestsCountAggregateInputType = {
    id?: true
    projectId?: true
    requesterId?: true
    destination?: true
    purpose?: true
    cost?: true
    status?: true
    _all?: true
  }

  export type TravelRequestsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelRequests to aggregate.
     */
    where?: TravelRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelRequests to fetch.
     */
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TravelRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TravelRequests
    **/
    _count?: true | TravelRequestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TravelRequestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TravelRequestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TravelRequestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TravelRequestsMaxAggregateInputType
  }

  export type GetTravelRequestsAggregateType<T extends TravelRequestsAggregateArgs> = {
        [P in keyof T & keyof AggregateTravelRequests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTravelRequests[P]>
      : GetScalarType<T[P], AggregateTravelRequests[P]>
  }




  export type TravelRequestsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TravelRequestsWhereInput
    orderBy?: TravelRequestsOrderByWithAggregationInput | TravelRequestsOrderByWithAggregationInput[]
    by: TravelRequestsScalarFieldEnum[] | TravelRequestsScalarFieldEnum
    having?: TravelRequestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TravelRequestsCountAggregateInputType | true
    _avg?: TravelRequestsAvgAggregateInputType
    _sum?: TravelRequestsSumAggregateInputType
    _min?: TravelRequestsMinAggregateInputType
    _max?: TravelRequestsMaxAggregateInputType
  }

  export type TravelRequestsGroupByOutputType = {
    id: string
    projectId: string
    requesterId: string
    destination: string
    purpose: string
    cost: Decimal
    status: string | null
    _count: TravelRequestsCountAggregateOutputType | null
    _avg: TravelRequestsAvgAggregateOutputType | null
    _sum: TravelRequestsSumAggregateOutputType | null
    _min: TravelRequestsMinAggregateOutputType | null
    _max: TravelRequestsMaxAggregateOutputType | null
  }

  type GetTravelRequestsGroupByPayload<T extends TravelRequestsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TravelRequestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TravelRequestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TravelRequestsGroupByOutputType[P]>
            : GetScalarType<T[P], TravelRequestsGroupByOutputType[P]>
        }
      >
    >


  export type TravelRequestsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    requesterId?: boolean
    destination?: boolean
    purpose?: boolean
    cost?: boolean
    status?: boolean
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["travelRequests"]>



  export type TravelRequestsSelectScalar = {
    id?: boolean
    projectId?: boolean
    requesterId?: boolean
    destination?: boolean
    purpose?: boolean
    cost?: boolean
    status?: boolean
  }

  export type TravelRequestsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "requesterId" | "destination" | "purpose" | "cost" | "status", ExtArgs["result"]["travelRequests"]>
  export type TravelRequestsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Projects?: boolean | ProjectsDefaultArgs<ExtArgs>
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $TravelRequestsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TravelRequests"
    objects: {
      Projects: Prisma.$ProjectsPayload<ExtArgs>
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      requesterId: string
      destination: string
      purpose: string
      cost: Prisma.Decimal
      status: string | null
    }, ExtArgs["result"]["travelRequests"]>
    composites: {}
  }

  type TravelRequestsGetPayload<S extends boolean | null | undefined | TravelRequestsDefaultArgs> = $Result.GetResult<Prisma.$TravelRequestsPayload, S>

  type TravelRequestsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TravelRequestsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TravelRequestsCountAggregateInputType | true
    }

  export interface TravelRequestsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TravelRequests'], meta: { name: 'TravelRequests' } }
    /**
     * Find zero or one TravelRequests that matches the filter.
     * @param {TravelRequestsFindUniqueArgs} args - Arguments to find a TravelRequests
     * @example
     * // Get one TravelRequests
     * const travelRequests = await prisma.travelRequests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TravelRequestsFindUniqueArgs>(args: SelectSubset<T, TravelRequestsFindUniqueArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TravelRequests that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TravelRequestsFindUniqueOrThrowArgs} args - Arguments to find a TravelRequests
     * @example
     * // Get one TravelRequests
     * const travelRequests = await prisma.travelRequests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TravelRequestsFindUniqueOrThrowArgs>(args: SelectSubset<T, TravelRequestsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TravelRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsFindFirstArgs} args - Arguments to find a TravelRequests
     * @example
     * // Get one TravelRequests
     * const travelRequests = await prisma.travelRequests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TravelRequestsFindFirstArgs>(args?: SelectSubset<T, TravelRequestsFindFirstArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TravelRequests that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsFindFirstOrThrowArgs} args - Arguments to find a TravelRequests
     * @example
     * // Get one TravelRequests
     * const travelRequests = await prisma.travelRequests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TravelRequestsFindFirstOrThrowArgs>(args?: SelectSubset<T, TravelRequestsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TravelRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TravelRequests
     * const travelRequests = await prisma.travelRequests.findMany()
     * 
     * // Get first 10 TravelRequests
     * const travelRequests = await prisma.travelRequests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const travelRequestsWithIdOnly = await prisma.travelRequests.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TravelRequestsFindManyArgs>(args?: SelectSubset<T, TravelRequestsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TravelRequests.
     * @param {TravelRequestsCreateArgs} args - Arguments to create a TravelRequests.
     * @example
     * // Create one TravelRequests
     * const TravelRequests = await prisma.travelRequests.create({
     *   data: {
     *     // ... data to create a TravelRequests
     *   }
     * })
     * 
     */
    create<T extends TravelRequestsCreateArgs>(args: SelectSubset<T, TravelRequestsCreateArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TravelRequests.
     * @param {TravelRequestsCreateManyArgs} args - Arguments to create many TravelRequests.
     * @example
     * // Create many TravelRequests
     * const travelRequests = await prisma.travelRequests.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TravelRequestsCreateManyArgs>(args?: SelectSubset<T, TravelRequestsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TravelRequests.
     * @param {TravelRequestsDeleteArgs} args - Arguments to delete one TravelRequests.
     * @example
     * // Delete one TravelRequests
     * const TravelRequests = await prisma.travelRequests.delete({
     *   where: {
     *     // ... filter to delete one TravelRequests
     *   }
     * })
     * 
     */
    delete<T extends TravelRequestsDeleteArgs>(args: SelectSubset<T, TravelRequestsDeleteArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TravelRequests.
     * @param {TravelRequestsUpdateArgs} args - Arguments to update one TravelRequests.
     * @example
     * // Update one TravelRequests
     * const travelRequests = await prisma.travelRequests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TravelRequestsUpdateArgs>(args: SelectSubset<T, TravelRequestsUpdateArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TravelRequests.
     * @param {TravelRequestsDeleteManyArgs} args - Arguments to filter TravelRequests to delete.
     * @example
     * // Delete a few TravelRequests
     * const { count } = await prisma.travelRequests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TravelRequestsDeleteManyArgs>(args?: SelectSubset<T, TravelRequestsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TravelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TravelRequests
     * const travelRequests = await prisma.travelRequests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TravelRequestsUpdateManyArgs>(args: SelectSubset<T, TravelRequestsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TravelRequests.
     * @param {TravelRequestsUpsertArgs} args - Arguments to update or create a TravelRequests.
     * @example
     * // Update or create a TravelRequests
     * const travelRequests = await prisma.travelRequests.upsert({
     *   create: {
     *     // ... data to create a TravelRequests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TravelRequests we want to update
     *   }
     * })
     */
    upsert<T extends TravelRequestsUpsertArgs>(args: SelectSubset<T, TravelRequestsUpsertArgs<ExtArgs>>): Prisma__TravelRequestsClient<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TravelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsCountArgs} args - Arguments to filter TravelRequests to count.
     * @example
     * // Count the number of TravelRequests
     * const count = await prisma.travelRequests.count({
     *   where: {
     *     // ... the filter for the TravelRequests we want to count
     *   }
     * })
    **/
    count<T extends TravelRequestsCountArgs>(
      args?: Subset<T, TravelRequestsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TravelRequestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TravelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TravelRequestsAggregateArgs>(args: Subset<T, TravelRequestsAggregateArgs>): Prisma.PrismaPromise<GetTravelRequestsAggregateType<T>>

    /**
     * Group by TravelRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TravelRequestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TravelRequestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TravelRequestsGroupByArgs['orderBy'] }
        : { orderBy?: TravelRequestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TravelRequestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTravelRequestsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TravelRequests model
   */
  readonly fields: TravelRequestsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TravelRequests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TravelRequestsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Projects<T extends ProjectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectsDefaultArgs<ExtArgs>>): Prisma__ProjectsClient<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TravelRequests model
   */
  interface TravelRequestsFieldRefs {
    readonly id: FieldRef<"TravelRequests", 'String'>
    readonly projectId: FieldRef<"TravelRequests", 'String'>
    readonly requesterId: FieldRef<"TravelRequests", 'String'>
    readonly destination: FieldRef<"TravelRequests", 'String'>
    readonly purpose: FieldRef<"TravelRequests", 'String'>
    readonly cost: FieldRef<"TravelRequests", 'Decimal'>
    readonly status: FieldRef<"TravelRequests", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TravelRequests findUnique
   */
  export type TravelRequestsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter, which TravelRequests to fetch.
     */
    where: TravelRequestsWhereUniqueInput
  }

  /**
   * TravelRequests findUniqueOrThrow
   */
  export type TravelRequestsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter, which TravelRequests to fetch.
     */
    where: TravelRequestsWhereUniqueInput
  }

  /**
   * TravelRequests findFirst
   */
  export type TravelRequestsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter, which TravelRequests to fetch.
     */
    where?: TravelRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelRequests to fetch.
     */
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelRequests.
     */
    cursor?: TravelRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelRequests.
     */
    distinct?: TravelRequestsScalarFieldEnum | TravelRequestsScalarFieldEnum[]
  }

  /**
   * TravelRequests findFirstOrThrow
   */
  export type TravelRequestsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter, which TravelRequests to fetch.
     */
    where?: TravelRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelRequests to fetch.
     */
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TravelRequests.
     */
    cursor?: TravelRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TravelRequests.
     */
    distinct?: TravelRequestsScalarFieldEnum | TravelRequestsScalarFieldEnum[]
  }

  /**
   * TravelRequests findMany
   */
  export type TravelRequestsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter, which TravelRequests to fetch.
     */
    where?: TravelRequestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TravelRequests to fetch.
     */
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TravelRequests.
     */
    cursor?: TravelRequestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TravelRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TravelRequests.
     */
    skip?: number
    distinct?: TravelRequestsScalarFieldEnum | TravelRequestsScalarFieldEnum[]
  }

  /**
   * TravelRequests create
   */
  export type TravelRequestsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * The data needed to create a TravelRequests.
     */
    data: XOR<TravelRequestsCreateInput, TravelRequestsUncheckedCreateInput>
  }

  /**
   * TravelRequests createMany
   */
  export type TravelRequestsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TravelRequests.
     */
    data: TravelRequestsCreateManyInput | TravelRequestsCreateManyInput[]
  }

  /**
   * TravelRequests update
   */
  export type TravelRequestsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * The data needed to update a TravelRequests.
     */
    data: XOR<TravelRequestsUpdateInput, TravelRequestsUncheckedUpdateInput>
    /**
     * Choose, which TravelRequests to update.
     */
    where: TravelRequestsWhereUniqueInput
  }

  /**
   * TravelRequests updateMany
   */
  export type TravelRequestsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TravelRequests.
     */
    data: XOR<TravelRequestsUpdateManyMutationInput, TravelRequestsUncheckedUpdateManyInput>
    /**
     * Filter which TravelRequests to update
     */
    where?: TravelRequestsWhereInput
    /**
     * Limit how many TravelRequests to update.
     */
    limit?: number
  }

  /**
   * TravelRequests upsert
   */
  export type TravelRequestsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * The filter to search for the TravelRequests to update in case it exists.
     */
    where: TravelRequestsWhereUniqueInput
    /**
     * In case the TravelRequests found by the `where` argument doesn't exist, create a new TravelRequests with this data.
     */
    create: XOR<TravelRequestsCreateInput, TravelRequestsUncheckedCreateInput>
    /**
     * In case the TravelRequests was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TravelRequestsUpdateInput, TravelRequestsUncheckedUpdateInput>
  }

  /**
   * TravelRequests delete
   */
  export type TravelRequestsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    /**
     * Filter which TravelRequests to delete.
     */
    where: TravelRequestsWhereUniqueInput
  }

  /**
   * TravelRequests deleteMany
   */
  export type TravelRequestsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TravelRequests to delete
     */
    where?: TravelRequestsWhereInput
    /**
     * Limit how many TravelRequests to delete.
     */
    limit?: number
  }

  /**
   * TravelRequests without action
   */
  export type TravelRequestsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
  }


  /**
   * Model Notifications
   */

  export type AggregateNotifications = {
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  export type NotificationsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationsCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    message: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationsMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationsMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationsCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to aggregate.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationsMaxAggregateInputType
  }

  export type GetNotificationsAggregateType<T extends NotificationsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotifications]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotifications[P]>
      : GetScalarType<T[P], AggregateNotifications[P]>
  }




  export type NotificationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithAggregationInput | NotificationsOrderByWithAggregationInput[]
    by: NotificationsScalarFieldEnum[] | NotificationsScalarFieldEnum
    having?: NotificationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationsCountAggregateInputType | true
    _min?: NotificationsMinAggregateInputType
    _max?: NotificationsMaxAggregateInputType
  }

  export type NotificationsGroupByOutputType = {
    id: string
    userId: string
    type: string
    message: string
    isRead: boolean
    createdAt: Date
    _count: NotificationsCountAggregateOutputType | null
    _min: NotificationsMinAggregateOutputType | null
    _max: NotificationsMaxAggregateOutputType | null
  }

  type GetNotificationsGroupByPayload<T extends NotificationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notifications"]>



  export type NotificationsSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "message" | "isRead" | "createdAt", ExtArgs["result"]["notifications"]>
  export type NotificationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $NotificationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notifications"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      message: string
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notifications"]>
    composites: {}
  }

  type NotificationsGetPayload<S extends boolean | null | undefined | NotificationsDefaultArgs> = $Result.GetResult<Prisma.$NotificationsPayload, S>

  type NotificationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationsCountAggregateInputType | true
    }

  export interface NotificationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notifications'], meta: { name: 'Notifications' } }
    /**
     * Find zero or one Notifications that matches the filter.
     * @param {NotificationsFindUniqueArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationsFindUniqueArgs>(args: SelectSubset<T, NotificationsFindUniqueArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notifications that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationsFindUniqueOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationsFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationsFindFirstArgs>(args?: SelectSubset<T, NotificationsFindFirstArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notifications that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindFirstOrThrowArgs} args - Arguments to find a Notifications
     * @example
     * // Get one Notifications
     * const notifications = await prisma.notifications.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationsFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notifications.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notifications.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationsWithIdOnly = await prisma.notifications.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationsFindManyArgs>(args?: SelectSubset<T, NotificationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notifications.
     * @param {NotificationsCreateArgs} args - Arguments to create a Notifications.
     * @example
     * // Create one Notifications
     * const Notifications = await prisma.notifications.create({
     *   data: {
     *     // ... data to create a Notifications
     *   }
     * })
     * 
     */
    create<T extends NotificationsCreateArgs>(args: SelectSubset<T, NotificationsCreateArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationsCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notifications = await prisma.notifications.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationsCreateManyArgs>(args?: SelectSubset<T, NotificationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notifications.
     * @param {NotificationsDeleteArgs} args - Arguments to delete one Notifications.
     * @example
     * // Delete one Notifications
     * const Notifications = await prisma.notifications.delete({
     *   where: {
     *     // ... filter to delete one Notifications
     *   }
     * })
     * 
     */
    delete<T extends NotificationsDeleteArgs>(args: SelectSubset<T, NotificationsDeleteArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notifications.
     * @param {NotificationsUpdateArgs} args - Arguments to update one Notifications.
     * @example
     * // Update one Notifications
     * const notifications = await prisma.notifications.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationsUpdateArgs>(args: SelectSubset<T, NotificationsUpdateArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationsDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notifications.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationsDeleteManyArgs>(args?: SelectSubset<T, NotificationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notifications = await prisma.notifications.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationsUpdateManyArgs>(args: SelectSubset<T, NotificationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notifications.
     * @param {NotificationsUpsertArgs} args - Arguments to update or create a Notifications.
     * @example
     * // Update or create a Notifications
     * const notifications = await prisma.notifications.upsert({
     *   create: {
     *     // ... data to create a Notifications
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notifications we want to update
     *   }
     * })
     */
    upsert<T extends NotificationsUpsertArgs>(args: SelectSubset<T, NotificationsUpsertArgs<ExtArgs>>): Prisma__NotificationsClient<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notifications.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationsCountArgs>(
      args?: Subset<T, NotificationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationsAggregateArgs>(args: Subset<T, NotificationsAggregateArgs>): Prisma.PrismaPromise<GetNotificationsAggregateType<T>>

    /**
     * Group by Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notifications model
   */
  readonly fields: NotificationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notifications.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notifications model
   */
  interface NotificationsFieldRefs {
    readonly id: FieldRef<"Notifications", 'String'>
    readonly userId: FieldRef<"Notifications", 'String'>
    readonly type: FieldRef<"Notifications", 'String'>
    readonly message: FieldRef<"Notifications", 'String'>
    readonly isRead: FieldRef<"Notifications", 'Boolean'>
    readonly createdAt: FieldRef<"Notifications", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notifications findUnique
   */
  export type NotificationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }

  /**
   * Notifications findUniqueOrThrow
   */
  export type NotificationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where: NotificationsWhereUniqueInput
  }

  /**
   * Notifications findFirst
   */
  export type NotificationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * Notifications findFirstOrThrow
   */
  export type NotificationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * Notifications findMany
   */
  export type NotificationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * Notifications create
   */
  export type NotificationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Notifications.
     */
    data: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
  }

  /**
   * Notifications createMany
   */
  export type NotificationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationsCreateManyInput | NotificationsCreateManyInput[]
  }

  /**
   * Notifications update
   */
  export type NotificationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Notifications.
     */
    data: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
    /**
     * Choose, which Notifications to update.
     */
    where: NotificationsWhereUniqueInput
  }

  /**
   * Notifications updateMany
   */
  export type NotificationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationsWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notifications upsert
   */
  export type NotificationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Notifications to update in case it exists.
     */
    where: NotificationsWhereUniqueInput
    /**
     * In case the Notifications found by the `where` argument doesn't exist, create a new Notifications with this data.
     */
    create: XOR<NotificationsCreateInput, NotificationsUncheckedCreateInput>
    /**
     * In case the Notifications was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationsUpdateInput, NotificationsUncheckedUpdateInput>
  }

  /**
   * Notifications delete
   */
  export type NotificationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    /**
     * Filter which Notifications to delete.
     */
    where: NotificationsWhereUniqueInput
  }

  /**
   * Notifications deleteMany
   */
  export type NotificationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationsWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notifications without action
   */
  export type NotificationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
  }


  /**
   * Model Approvals
   */

  export type AggregateApprovals = {
    _count: ApprovalsCountAggregateOutputType | null
    _min: ApprovalsMinAggregateOutputType | null
    _max: ApprovalsMaxAggregateOutputType | null
  }

  export type ApprovalsMinAggregateOutputType = {
    id: string | null
    entityId: string | null
    entityType: string | null
    approverId: string | null
    status: string | null
    comment: string | null
    updatedAt: Date | null
  }

  export type ApprovalsMaxAggregateOutputType = {
    id: string | null
    entityId: string | null
    entityType: string | null
    approverId: string | null
    status: string | null
    comment: string | null
    updatedAt: Date | null
  }

  export type ApprovalsCountAggregateOutputType = {
    id: number
    entityId: number
    entityType: number
    approverId: number
    status: number
    comment: number
    updatedAt: number
    _all: number
  }


  export type ApprovalsMinAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    approverId?: true
    status?: true
    comment?: true
    updatedAt?: true
  }

  export type ApprovalsMaxAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    approverId?: true
    status?: true
    comment?: true
    updatedAt?: true
  }

  export type ApprovalsCountAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    approverId?: true
    status?: true
    comment?: true
    updatedAt?: true
    _all?: true
  }

  export type ApprovalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to aggregate.
     */
    where?: ApprovalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalsOrderByWithRelationInput | ApprovalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalsMaxAggregateInputType
  }

  export type GetApprovalsAggregateType<T extends ApprovalsAggregateArgs> = {
        [P in keyof T & keyof AggregateApprovals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApprovals[P]>
      : GetScalarType<T[P], AggregateApprovals[P]>
  }




  export type ApprovalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalsWhereInput
    orderBy?: ApprovalsOrderByWithAggregationInput | ApprovalsOrderByWithAggregationInput[]
    by: ApprovalsScalarFieldEnum[] | ApprovalsScalarFieldEnum
    having?: ApprovalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalsCountAggregateInputType | true
    _min?: ApprovalsMinAggregateInputType
    _max?: ApprovalsMaxAggregateInputType
  }

  export type ApprovalsGroupByOutputType = {
    id: string
    entityId: string
    entityType: string
    approverId: string
    status: string
    comment: string | null
    updatedAt: Date
    _count: ApprovalsCountAggregateOutputType | null
    _min: ApprovalsMinAggregateOutputType | null
    _max: ApprovalsMaxAggregateOutputType | null
  }

  type GetApprovalsGroupByPayload<T extends ApprovalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalsGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalsGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    updatedAt?: boolean
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approvals"]>



  export type ApprovalsSelectScalar = {
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    approverId?: boolean
    status?: boolean
    comment?: boolean
    updatedAt?: boolean
  }

  export type ApprovalsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityId" | "entityType" | "approverId" | "status" | "comment" | "updatedAt", ExtArgs["result"]["approvals"]>
  export type ApprovalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $ApprovalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approvals"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityId: string
      entityType: string
      approverId: string
      status: string
      comment: string | null
      updatedAt: Date
    }, ExtArgs["result"]["approvals"]>
    composites: {}
  }

  type ApprovalsGetPayload<S extends boolean | null | undefined | ApprovalsDefaultArgs> = $Result.GetResult<Prisma.$ApprovalsPayload, S>

  type ApprovalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovalsCountAggregateInputType | true
    }

  export interface ApprovalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approvals'], meta: { name: 'Approvals' } }
    /**
     * Find zero or one Approvals that matches the filter.
     * @param {ApprovalsFindUniqueArgs} args - Arguments to find a Approvals
     * @example
     * // Get one Approvals
     * const approvals = await prisma.approvals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalsFindUniqueArgs>(args: SelectSubset<T, ApprovalsFindUniqueArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Approvals that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovalsFindUniqueOrThrowArgs} args - Arguments to find a Approvals
     * @example
     * // Get one Approvals
     * const approvals = await prisma.approvals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalsFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsFindFirstArgs} args - Arguments to find a Approvals
     * @example
     * // Get one Approvals
     * const approvals = await prisma.approvals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalsFindFirstArgs>(args?: SelectSubset<T, ApprovalsFindFirstArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Approvals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsFindFirstOrThrowArgs} args - Arguments to find a Approvals
     * @example
     * // Get one Approvals
     * const approvals = await prisma.approvals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalsFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approvals.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approvals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalsWithIdOnly = await prisma.approvals.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalsFindManyArgs>(args?: SelectSubset<T, ApprovalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Approvals.
     * @param {ApprovalsCreateArgs} args - Arguments to create a Approvals.
     * @example
     * // Create one Approvals
     * const Approvals = await prisma.approvals.create({
     *   data: {
     *     // ... data to create a Approvals
     *   }
     * })
     * 
     */
    create<T extends ApprovalsCreateArgs>(args: SelectSubset<T, ApprovalsCreateArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Approvals.
     * @param {ApprovalsCreateManyArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approvals = await prisma.approvals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalsCreateManyArgs>(args?: SelectSubset<T, ApprovalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Approvals.
     * @param {ApprovalsDeleteArgs} args - Arguments to delete one Approvals.
     * @example
     * // Delete one Approvals
     * const Approvals = await prisma.approvals.delete({
     *   where: {
     *     // ... filter to delete one Approvals
     *   }
     * })
     * 
     */
    delete<T extends ApprovalsDeleteArgs>(args: SelectSubset<T, ApprovalsDeleteArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Approvals.
     * @param {ApprovalsUpdateArgs} args - Arguments to update one Approvals.
     * @example
     * // Update one Approvals
     * const approvals = await prisma.approvals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalsUpdateArgs>(args: SelectSubset<T, ApprovalsUpdateArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalsDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approvals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalsDeleteManyArgs>(args?: SelectSubset<T, ApprovalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approvals = await prisma.approvals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalsUpdateManyArgs>(args: SelectSubset<T, ApprovalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Approvals.
     * @param {ApprovalsUpsertArgs} args - Arguments to update or create a Approvals.
     * @example
     * // Update or create a Approvals
     * const approvals = await prisma.approvals.upsert({
     *   create: {
     *     // ... data to create a Approvals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approvals we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalsUpsertArgs>(args: SelectSubset<T, ApprovalsUpsertArgs<ExtArgs>>): Prisma__ApprovalsClient<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approvals.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalsCountArgs>(
      args?: Subset<T, ApprovalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalsAggregateArgs>(args: Subset<T, ApprovalsAggregateArgs>): Prisma.PrismaPromise<GetApprovalsAggregateType<T>>

    /**
     * Group by Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalsGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approvals model
   */
  readonly fields: ApprovalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approvals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approvals model
   */
  interface ApprovalsFieldRefs {
    readonly id: FieldRef<"Approvals", 'String'>
    readonly entityId: FieldRef<"Approvals", 'String'>
    readonly entityType: FieldRef<"Approvals", 'String'>
    readonly approverId: FieldRef<"Approvals", 'String'>
    readonly status: FieldRef<"Approvals", 'String'>
    readonly comment: FieldRef<"Approvals", 'String'>
    readonly updatedAt: FieldRef<"Approvals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Approvals findUnique
   */
  export type ApprovalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where: ApprovalsWhereUniqueInput
  }

  /**
   * Approvals findUniqueOrThrow
   */
  export type ApprovalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where: ApprovalsWhereUniqueInput
  }

  /**
   * Approvals findFirst
   */
  export type ApprovalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalsOrderByWithRelationInput | ApprovalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalsScalarFieldEnum | ApprovalsScalarFieldEnum[]
  }

  /**
   * Approvals findFirstOrThrow
   */
  export type ApprovalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalsOrderByWithRelationInput | ApprovalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalsScalarFieldEnum | ApprovalsScalarFieldEnum[]
  }

  /**
   * Approvals findMany
   */
  export type ApprovalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalsOrderByWithRelationInput | ApprovalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     */
    cursor?: ApprovalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    distinct?: ApprovalsScalarFieldEnum | ApprovalsScalarFieldEnum[]
  }

  /**
   * Approvals create
   */
  export type ApprovalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * The data needed to create a Approvals.
     */
    data: XOR<ApprovalsCreateInput, ApprovalsUncheckedCreateInput>
  }

  /**
   * Approvals createMany
   */
  export type ApprovalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalsCreateManyInput | ApprovalsCreateManyInput[]
  }

  /**
   * Approvals update
   */
  export type ApprovalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * The data needed to update a Approvals.
     */
    data: XOR<ApprovalsUpdateInput, ApprovalsUncheckedUpdateInput>
    /**
     * Choose, which Approvals to update.
     */
    where: ApprovalsWhereUniqueInput
  }

  /**
   * Approvals updateMany
   */
  export type ApprovalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalsUpdateManyMutationInput, ApprovalsUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalsWhereInput
    /**
     * Limit how many Approvals to update.
     */
    limit?: number
  }

  /**
   * Approvals upsert
   */
  export type ApprovalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * The filter to search for the Approvals to update in case it exists.
     */
    where: ApprovalsWhereUniqueInput
    /**
     * In case the Approvals found by the `where` argument doesn't exist, create a new Approvals with this data.
     */
    create: XOR<ApprovalsCreateInput, ApprovalsUncheckedCreateInput>
    /**
     * In case the Approvals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalsUpdateInput, ApprovalsUncheckedUpdateInput>
  }

  /**
   * Approvals delete
   */
  export type ApprovalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    /**
     * Filter which Approvals to delete.
     */
    where: ApprovalsWhereUniqueInput
  }

  /**
   * Approvals deleteMany
   */
  export type ApprovalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to delete
     */
    where?: ApprovalsWhereInput
    /**
     * Limit how many Approvals to delete.
     */
    limit?: number
  }

  /**
   * Approvals without action
   */
  export type ApprovalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
  }


  /**
   * Model AuditLogs
   */

  export type AggregateAuditLogs = {
    _count: AuditLogsCountAggregateOutputType | null
    _min: AuditLogsMinAggregateOutputType | null
    _max: AuditLogsMaxAggregateOutputType | null
  }

  export type AuditLogsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    actionType: string | null
    entityType: string | null
    entityId: string | null
    description: string | null
    timestamp: Date | null
  }

  export type AuditLogsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    actionType: string | null
    entityType: string | null
    entityId: string | null
    description: string | null
    timestamp: Date | null
  }

  export type AuditLogsCountAggregateOutputType = {
    id: number
    userId: number
    actionType: number
    entityType: number
    entityId: number
    description: number
    timestamp: number
    _all: number
  }


  export type AuditLogsMinAggregateInputType = {
    id?: true
    userId?: true
    actionType?: true
    entityType?: true
    entityId?: true
    description?: true
    timestamp?: true
  }

  export type AuditLogsMaxAggregateInputType = {
    id?: true
    userId?: true
    actionType?: true
    entityType?: true
    entityId?: true
    description?: true
    timestamp?: true
  }

  export type AuditLogsCountAggregateInputType = {
    id?: true
    userId?: true
    actionType?: true
    entityType?: true
    entityId?: true
    description?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to aggregate.
     */
    where?: AuditLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogsOrderByWithRelationInput | AuditLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogsMaxAggregateInputType
  }

  export type GetAuditLogsAggregateType<T extends AuditLogsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLogs[P]>
      : GetScalarType<T[P], AggregateAuditLogs[P]>
  }




  export type AuditLogsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogsWhereInput
    orderBy?: AuditLogsOrderByWithAggregationInput | AuditLogsOrderByWithAggregationInput[]
    by: AuditLogsScalarFieldEnum[] | AuditLogsScalarFieldEnum
    having?: AuditLogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogsCountAggregateInputType | true
    _min?: AuditLogsMinAggregateInputType
    _max?: AuditLogsMaxAggregateInputType
  }

  export type AuditLogsGroupByOutputType = {
    id: string
    userId: string | null
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp: Date
    _count: AuditLogsCountAggregateOutputType | null
    _min: AuditLogsMinAggregateOutputType | null
    _max: AuditLogsMaxAggregateOutputType | null
  }

  type GetAuditLogsGroupByPayload<T extends AuditLogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogsGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogsGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    actionType?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    timestamp?: boolean
    Users?: boolean | AuditLogs$UsersArgs<ExtArgs>
  }, ExtArgs["result"]["auditLogs"]>



  export type AuditLogsSelectScalar = {
    id?: boolean
    userId?: boolean
    actionType?: boolean
    entityType?: boolean
    entityId?: boolean
    description?: boolean
    timestamp?: boolean
  }

  export type AuditLogsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "actionType" | "entityType" | "entityId" | "description" | "timestamp", ExtArgs["result"]["auditLogs"]>
  export type AuditLogsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | AuditLogs$UsersArgs<ExtArgs>
  }

  export type $AuditLogsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLogs"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      actionType: string
      entityType: string
      entityId: string
      description: string
      timestamp: Date
    }, ExtArgs["result"]["auditLogs"]>
    composites: {}
  }

  type AuditLogsGetPayload<S extends boolean | null | undefined | AuditLogsDefaultArgs> = $Result.GetResult<Prisma.$AuditLogsPayload, S>

  type AuditLogsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogsCountAggregateInputType | true
    }

  export interface AuditLogsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLogs'], meta: { name: 'AuditLogs' } }
    /**
     * Find zero or one AuditLogs that matches the filter.
     * @param {AuditLogsFindUniqueArgs} args - Arguments to find a AuditLogs
     * @example
     * // Get one AuditLogs
     * const auditLogs = await prisma.auditLogs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogsFindUniqueArgs>(args: SelectSubset<T, AuditLogsFindUniqueArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLogs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogsFindUniqueOrThrowArgs} args - Arguments to find a AuditLogs
     * @example
     * // Get one AuditLogs
     * const auditLogs = await prisma.auditLogs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogsFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsFindFirstArgs} args - Arguments to find a AuditLogs
     * @example
     * // Get one AuditLogs
     * const auditLogs = await prisma.auditLogs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogsFindFirstArgs>(args?: SelectSubset<T, AuditLogsFindFirstArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLogs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsFindFirstOrThrowArgs} args - Arguments to find a AuditLogs
     * @example
     * // Get one AuditLogs
     * const auditLogs = await prisma.auditLogs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogsFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLogs.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLogs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogsWithIdOnly = await prisma.auditLogs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogsFindManyArgs>(args?: SelectSubset<T, AuditLogsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLogs.
     * @param {AuditLogsCreateArgs} args - Arguments to create a AuditLogs.
     * @example
     * // Create one AuditLogs
     * const AuditLogs = await prisma.auditLogs.create({
     *   data: {
     *     // ... data to create a AuditLogs
     *   }
     * })
     * 
     */
    create<T extends AuditLogsCreateArgs>(args: SelectSubset<T, AuditLogsCreateArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogsCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLogs = await prisma.auditLogs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogsCreateManyArgs>(args?: SelectSubset<T, AuditLogsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLogs.
     * @param {AuditLogsDeleteArgs} args - Arguments to delete one AuditLogs.
     * @example
     * // Delete one AuditLogs
     * const AuditLogs = await prisma.auditLogs.delete({
     *   where: {
     *     // ... filter to delete one AuditLogs
     *   }
     * })
     * 
     */
    delete<T extends AuditLogsDeleteArgs>(args: SelectSubset<T, AuditLogsDeleteArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLogs.
     * @param {AuditLogsUpdateArgs} args - Arguments to update one AuditLogs.
     * @example
     * // Update one AuditLogs
     * const auditLogs = await prisma.auditLogs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogsUpdateArgs>(args: SelectSubset<T, AuditLogsUpdateArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogsDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLogs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogsDeleteManyArgs>(args?: SelectSubset<T, AuditLogsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLogs = await prisma.auditLogs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogsUpdateManyArgs>(args: SelectSubset<T, AuditLogsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLogs.
     * @param {AuditLogsUpsertArgs} args - Arguments to update or create a AuditLogs.
     * @example
     * // Update or create a AuditLogs
     * const auditLogs = await prisma.auditLogs.upsert({
     *   create: {
     *     // ... data to create a AuditLogs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLogs we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogsUpsertArgs>(args: SelectSubset<T, AuditLogsUpsertArgs<ExtArgs>>): Prisma__AuditLogsClient<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLogs.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogsCountArgs>(
      args?: Subset<T, AuditLogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogsAggregateArgs>(args: Subset<T, AuditLogsAggregateArgs>): Prisma.PrismaPromise<GetAuditLogsAggregateType<T>>

    /**
     * Group by AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogsGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLogs model
   */
  readonly fields: AuditLogsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLogs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends AuditLogs$UsersArgs<ExtArgs> = {}>(args?: Subset<T, AuditLogs$UsersArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLogs model
   */
  interface AuditLogsFieldRefs {
    readonly id: FieldRef<"AuditLogs", 'String'>
    readonly userId: FieldRef<"AuditLogs", 'String'>
    readonly actionType: FieldRef<"AuditLogs", 'String'>
    readonly entityType: FieldRef<"AuditLogs", 'String'>
    readonly entityId: FieldRef<"AuditLogs", 'String'>
    readonly description: FieldRef<"AuditLogs", 'String'>
    readonly timestamp: FieldRef<"AuditLogs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLogs findUnique
   */
  export type AuditLogsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where: AuditLogsWhereUniqueInput
  }

  /**
   * AuditLogs findUniqueOrThrow
   */
  export type AuditLogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where: AuditLogsWhereUniqueInput
  }

  /**
   * AuditLogs findFirst
   */
  export type AuditLogsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogsOrderByWithRelationInput | AuditLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogsScalarFieldEnum | AuditLogsScalarFieldEnum[]
  }

  /**
   * AuditLogs findFirstOrThrow
   */
  export type AuditLogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogsOrderByWithRelationInput | AuditLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogsScalarFieldEnum | AuditLogsScalarFieldEnum[]
  }

  /**
   * AuditLogs findMany
   */
  export type AuditLogsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogsOrderByWithRelationInput | AuditLogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogsScalarFieldEnum | AuditLogsScalarFieldEnum[]
  }

  /**
   * AuditLogs create
   */
  export type AuditLogsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLogs.
     */
    data: XOR<AuditLogsCreateInput, AuditLogsUncheckedCreateInput>
  }

  /**
   * AuditLogs createMany
   */
  export type AuditLogsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogsCreateManyInput | AuditLogsCreateManyInput[]
  }

  /**
   * AuditLogs update
   */
  export type AuditLogsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLogs.
     */
    data: XOR<AuditLogsUpdateInput, AuditLogsUncheckedUpdateInput>
    /**
     * Choose, which AuditLogs to update.
     */
    where: AuditLogsWhereUniqueInput
  }

  /**
   * AuditLogs updateMany
   */
  export type AuditLogsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogsUpdateManyMutationInput, AuditLogsUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogsWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLogs upsert
   */
  export type AuditLogsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLogs to update in case it exists.
     */
    where: AuditLogsWhereUniqueInput
    /**
     * In case the AuditLogs found by the `where` argument doesn't exist, create a new AuditLogs with this data.
     */
    create: XOR<AuditLogsCreateInput, AuditLogsUncheckedCreateInput>
    /**
     * In case the AuditLogs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogsUpdateInput, AuditLogsUncheckedUpdateInput>
  }

  /**
   * AuditLogs delete
   */
  export type AuditLogsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    /**
     * Filter which AuditLogs to delete.
     */
    where: AuditLogsWhereUniqueInput
  }

  /**
   * AuditLogs deleteMany
   */
  export type AuditLogsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogsWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLogs.Users
   */
  export type AuditLogs$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * AuditLogs without action
   */
  export type AuditLogsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
  }


  /**
   * Model Lookups
   */

  export type AggregateLookups = {
    _count: LookupsCountAggregateOutputType | null
    _avg: LookupsAvgAggregateOutputType | null
    _sum: LookupsSumAggregateOutputType | null
    _min: LookupsMinAggregateOutputType | null
    _max: LookupsMaxAggregateOutputType | null
  }

  export type LookupsAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type LookupsSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type LookupsMinAggregateOutputType = {
    id: string | null
    category: string | null
    code: string | null
    label: string | null
    isActive: boolean | null
    sortOrder: number | null
  }

  export type LookupsMaxAggregateOutputType = {
    id: string | null
    category: string | null
    code: string | null
    label: string | null
    isActive: boolean | null
    sortOrder: number | null
  }

  export type LookupsCountAggregateOutputType = {
    id: number
    category: number
    code: number
    label: number
    isActive: number
    sortOrder: number
    _all: number
  }


  export type LookupsAvgAggregateInputType = {
    sortOrder?: true
  }

  export type LookupsSumAggregateInputType = {
    sortOrder?: true
  }

  export type LookupsMinAggregateInputType = {
    id?: true
    category?: true
    code?: true
    label?: true
    isActive?: true
    sortOrder?: true
  }

  export type LookupsMaxAggregateInputType = {
    id?: true
    category?: true
    code?: true
    label?: true
    isActive?: true
    sortOrder?: true
  }

  export type LookupsCountAggregateInputType = {
    id?: true
    category?: true
    code?: true
    label?: true
    isActive?: true
    sortOrder?: true
    _all?: true
  }

  export type LookupsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lookups to aggregate.
     */
    where?: LookupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupsOrderByWithRelationInput | LookupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LookupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lookups
    **/
    _count?: true | LookupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LookupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LookupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LookupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LookupsMaxAggregateInputType
  }

  export type GetLookupsAggregateType<T extends LookupsAggregateArgs> = {
        [P in keyof T & keyof AggregateLookups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLookups[P]>
      : GetScalarType<T[P], AggregateLookups[P]>
  }




  export type LookupsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LookupsWhereInput
    orderBy?: LookupsOrderByWithAggregationInput | LookupsOrderByWithAggregationInput[]
    by: LookupsScalarFieldEnum[] | LookupsScalarFieldEnum
    having?: LookupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LookupsCountAggregateInputType | true
    _avg?: LookupsAvgAggregateInputType
    _sum?: LookupsSumAggregateInputType
    _min?: LookupsMinAggregateInputType
    _max?: LookupsMaxAggregateInputType
  }

  export type LookupsGroupByOutputType = {
    id: string
    category: string
    code: string
    label: string
    isActive: boolean
    sortOrder: number | null
    _count: LookupsCountAggregateOutputType | null
    _avg: LookupsAvgAggregateOutputType | null
    _sum: LookupsSumAggregateOutputType | null
    _min: LookupsMinAggregateOutputType | null
    _max: LookupsMaxAggregateOutputType | null
  }

  type GetLookupsGroupByPayload<T extends LookupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LookupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LookupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LookupsGroupByOutputType[P]>
            : GetScalarType<T[P], LookupsGroupByOutputType[P]>
        }
      >
    >


  export type LookupsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    code?: boolean
    label?: boolean
    isActive?: boolean
    sortOrder?: boolean
  }, ExtArgs["result"]["lookups"]>



  export type LookupsSelectScalar = {
    id?: boolean
    category?: boolean
    code?: boolean
    label?: boolean
    isActive?: boolean
    sortOrder?: boolean
  }

  export type LookupsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category" | "code" | "label" | "isActive" | "sortOrder", ExtArgs["result"]["lookups"]>

  export type $LookupsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lookups"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category: string
      code: string
      label: string
      isActive: boolean
      sortOrder: number | null
    }, ExtArgs["result"]["lookups"]>
    composites: {}
  }

  type LookupsGetPayload<S extends boolean | null | undefined | LookupsDefaultArgs> = $Result.GetResult<Prisma.$LookupsPayload, S>

  type LookupsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LookupsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LookupsCountAggregateInputType | true
    }

  export interface LookupsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lookups'], meta: { name: 'Lookups' } }
    /**
     * Find zero or one Lookups that matches the filter.
     * @param {LookupsFindUniqueArgs} args - Arguments to find a Lookups
     * @example
     * // Get one Lookups
     * const lookups = await prisma.lookups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LookupsFindUniqueArgs>(args: SelectSubset<T, LookupsFindUniqueArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lookups that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LookupsFindUniqueOrThrowArgs} args - Arguments to find a Lookups
     * @example
     * // Get one Lookups
     * const lookups = await prisma.lookups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LookupsFindUniqueOrThrowArgs>(args: SelectSubset<T, LookupsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lookups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsFindFirstArgs} args - Arguments to find a Lookups
     * @example
     * // Get one Lookups
     * const lookups = await prisma.lookups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LookupsFindFirstArgs>(args?: SelectSubset<T, LookupsFindFirstArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lookups that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsFindFirstOrThrowArgs} args - Arguments to find a Lookups
     * @example
     * // Get one Lookups
     * const lookups = await prisma.lookups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LookupsFindFirstOrThrowArgs>(args?: SelectSubset<T, LookupsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lookups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lookups
     * const lookups = await prisma.lookups.findMany()
     * 
     * // Get first 10 Lookups
     * const lookups = await prisma.lookups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lookupsWithIdOnly = await prisma.lookups.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LookupsFindManyArgs>(args?: SelectSubset<T, LookupsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lookups.
     * @param {LookupsCreateArgs} args - Arguments to create a Lookups.
     * @example
     * // Create one Lookups
     * const Lookups = await prisma.lookups.create({
     *   data: {
     *     // ... data to create a Lookups
     *   }
     * })
     * 
     */
    create<T extends LookupsCreateArgs>(args: SelectSubset<T, LookupsCreateArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lookups.
     * @param {LookupsCreateManyArgs} args - Arguments to create many Lookups.
     * @example
     * // Create many Lookups
     * const lookups = await prisma.lookups.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LookupsCreateManyArgs>(args?: SelectSubset<T, LookupsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Lookups.
     * @param {LookupsDeleteArgs} args - Arguments to delete one Lookups.
     * @example
     * // Delete one Lookups
     * const Lookups = await prisma.lookups.delete({
     *   where: {
     *     // ... filter to delete one Lookups
     *   }
     * })
     * 
     */
    delete<T extends LookupsDeleteArgs>(args: SelectSubset<T, LookupsDeleteArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lookups.
     * @param {LookupsUpdateArgs} args - Arguments to update one Lookups.
     * @example
     * // Update one Lookups
     * const lookups = await prisma.lookups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LookupsUpdateArgs>(args: SelectSubset<T, LookupsUpdateArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lookups.
     * @param {LookupsDeleteManyArgs} args - Arguments to filter Lookups to delete.
     * @example
     * // Delete a few Lookups
     * const { count } = await prisma.lookups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LookupsDeleteManyArgs>(args?: SelectSubset<T, LookupsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lookups
     * const lookups = await prisma.lookups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LookupsUpdateManyArgs>(args: SelectSubset<T, LookupsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lookups.
     * @param {LookupsUpsertArgs} args - Arguments to update or create a Lookups.
     * @example
     * // Update or create a Lookups
     * const lookups = await prisma.lookups.upsert({
     *   create: {
     *     // ... data to create a Lookups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lookups we want to update
     *   }
     * })
     */
    upsert<T extends LookupsUpsertArgs>(args: SelectSubset<T, LookupsUpsertArgs<ExtArgs>>): Prisma__LookupsClient<$Result.GetResult<Prisma.$LookupsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsCountArgs} args - Arguments to filter Lookups to count.
     * @example
     * // Count the number of Lookups
     * const count = await prisma.lookups.count({
     *   where: {
     *     // ... the filter for the Lookups we want to count
     *   }
     * })
    **/
    count<T extends LookupsCountArgs>(
      args?: Subset<T, LookupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LookupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LookupsAggregateArgs>(args: Subset<T, LookupsAggregateArgs>): Prisma.PrismaPromise<GetLookupsAggregateType<T>>

    /**
     * Group by Lookups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LookupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LookupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LookupsGroupByArgs['orderBy'] }
        : { orderBy?: LookupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LookupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLookupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lookups model
   */
  readonly fields: LookupsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lookups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LookupsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lookups model
   */
  interface LookupsFieldRefs {
    readonly id: FieldRef<"Lookups", 'String'>
    readonly category: FieldRef<"Lookups", 'String'>
    readonly code: FieldRef<"Lookups", 'String'>
    readonly label: FieldRef<"Lookups", 'String'>
    readonly isActive: FieldRef<"Lookups", 'Boolean'>
    readonly sortOrder: FieldRef<"Lookups", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lookups findUnique
   */
  export type LookupsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where: LookupsWhereUniqueInput
  }

  /**
   * Lookups findUniqueOrThrow
   */
  export type LookupsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where: LookupsWhereUniqueInput
  }

  /**
   * Lookups findFirst
   */
  export type LookupsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where?: LookupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupsOrderByWithRelationInput | LookupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lookups.
     */
    cursor?: LookupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lookups.
     */
    distinct?: LookupsScalarFieldEnum | LookupsScalarFieldEnum[]
  }

  /**
   * Lookups findFirstOrThrow
   */
  export type LookupsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where?: LookupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupsOrderByWithRelationInput | LookupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lookups.
     */
    cursor?: LookupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lookups.
     */
    distinct?: LookupsScalarFieldEnum | LookupsScalarFieldEnum[]
  }

  /**
   * Lookups findMany
   */
  export type LookupsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter, which Lookups to fetch.
     */
    where?: LookupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lookups to fetch.
     */
    orderBy?: LookupsOrderByWithRelationInput | LookupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lookups.
     */
    cursor?: LookupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lookups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lookups.
     */
    skip?: number
    distinct?: LookupsScalarFieldEnum | LookupsScalarFieldEnum[]
  }

  /**
   * Lookups create
   */
  export type LookupsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * The data needed to create a Lookups.
     */
    data: XOR<LookupsCreateInput, LookupsUncheckedCreateInput>
  }

  /**
   * Lookups createMany
   */
  export type LookupsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lookups.
     */
    data: LookupsCreateManyInput | LookupsCreateManyInput[]
  }

  /**
   * Lookups update
   */
  export type LookupsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * The data needed to update a Lookups.
     */
    data: XOR<LookupsUpdateInput, LookupsUncheckedUpdateInput>
    /**
     * Choose, which Lookups to update.
     */
    where: LookupsWhereUniqueInput
  }

  /**
   * Lookups updateMany
   */
  export type LookupsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lookups.
     */
    data: XOR<LookupsUpdateManyMutationInput, LookupsUncheckedUpdateManyInput>
    /**
     * Filter which Lookups to update
     */
    where?: LookupsWhereInput
    /**
     * Limit how many Lookups to update.
     */
    limit?: number
  }

  /**
   * Lookups upsert
   */
  export type LookupsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * The filter to search for the Lookups to update in case it exists.
     */
    where: LookupsWhereUniqueInput
    /**
     * In case the Lookups found by the `where` argument doesn't exist, create a new Lookups with this data.
     */
    create: XOR<LookupsCreateInput, LookupsUncheckedCreateInput>
    /**
     * In case the Lookups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LookupsUpdateInput, LookupsUncheckedUpdateInput>
  }

  /**
   * Lookups delete
   */
  export type LookupsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
    /**
     * Filter which Lookups to delete.
     */
    where: LookupsWhereUniqueInput
  }

  /**
   * Lookups deleteMany
   */
  export type LookupsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lookups to delete
     */
    where?: LookupsWhereInput
    /**
     * Limit how many Lookups to delete.
     */
    limit?: number
  }

  /**
   * Lookups without action
   */
  export type LookupsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lookups
     */
    select?: LookupsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lookups
     */
    omit?: LookupsOmit<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    fullName: string
    email: string
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    Activities?: boolean | Users$ActivitiesArgs<ExtArgs>
    BudgetAllocations?: boolean | Users$BudgetAllocationsArgs<ExtArgs>
    Budgets?: boolean | Users$BudgetsArgs<ExtArgs>
    CostSplits?: boolean | Users$CostSplitsArgs<ExtArgs>
    Expenses?: boolean | Users$ExpensesArgs<ExtArgs>
    Projects?: boolean | Users$ProjectsArgs<ExtArgs>
    Managers?: boolean | Users$ManagersArgs<ExtArgs>
    TravelRequests?: boolean | Users$TravelRequestsArgs<ExtArgs>
    Notifications?: boolean | Users$NotificationsArgs<ExtArgs>
    Approvals?: boolean | Users$ApprovalsArgs<ExtArgs>
    AuditLogs?: boolean | Users$AuditLogsArgs<ExtArgs>
    roles?: boolean | Users$rolesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type UsersSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "email", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Activities?: boolean | Users$ActivitiesArgs<ExtArgs>
    BudgetAllocations?: boolean | Users$BudgetAllocationsArgs<ExtArgs>
    Budgets?: boolean | Users$BudgetsArgs<ExtArgs>
    CostSplits?: boolean | Users$CostSplitsArgs<ExtArgs>
    Expenses?: boolean | Users$ExpensesArgs<ExtArgs>
    Projects?: boolean | Users$ProjectsArgs<ExtArgs>
    Managers?: boolean | Users$ManagersArgs<ExtArgs>
    TravelRequests?: boolean | Users$TravelRequestsArgs<ExtArgs>
    Notifications?: boolean | Users$NotificationsArgs<ExtArgs>
    Approvals?: boolean | Users$ApprovalsArgs<ExtArgs>
    AuditLogs?: boolean | Users$AuditLogsArgs<ExtArgs>
    roles?: boolean | Users$rolesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      Activities: Prisma.$ActivitiesPayload<ExtArgs>[]
      BudgetAllocations: Prisma.$BudgetAllocationsPayload<ExtArgs>[]
      Budgets: Prisma.$BudgetsPayload<ExtArgs>[]
      CostSplits: Prisma.$CostSplitsPayload<ExtArgs>[]
      Expenses: Prisma.$ExpensesPayload<ExtArgs>[]
      Projects: Prisma.$ProjectsPayload<ExtArgs>[]
      Managers: Prisma.$ManagersPayload<ExtArgs>[]
      TravelRequests: Prisma.$TravelRequestsPayload<ExtArgs>[]
      Notifications: Prisma.$NotificationsPayload<ExtArgs>[]
      Approvals: Prisma.$ApprovalsPayload<ExtArgs>[]
      AuditLogs: Prisma.$AuditLogsPayload<ExtArgs>[]
      roles: Prisma.$rolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Activities<T extends Users$ActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Users$ActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BudgetAllocations<T extends Users$BudgetAllocationsArgs<ExtArgs> = {}>(args?: Subset<T, Users$BudgetAllocationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetAllocationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Budgets<T extends Users$BudgetsArgs<ExtArgs> = {}>(args?: Subset<T, Users$BudgetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CostSplits<T extends Users$CostSplitsArgs<ExtArgs> = {}>(args?: Subset<T, Users$CostSplitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostSplitsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Expenses<T extends Users$ExpensesArgs<ExtArgs> = {}>(args?: Subset<T, Users$ExpensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpensesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Projects<T extends Users$ProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Users$ProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Managers<T extends Users$ManagersArgs<ExtArgs> = {}>(args?: Subset<T, Users$ManagersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TravelRequests<T extends Users$TravelRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Users$TravelRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TravelRequestsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Notifications<T extends Users$NotificationsArgs<ExtArgs> = {}>(args?: Subset<T, Users$NotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Approvals<T extends Users$ApprovalsArgs<ExtArgs> = {}>(args?: Subset<T, Users$ApprovalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AuditLogs<T extends Users$AuditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Users$AuditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends Users$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Users$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly fullName: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.Activities
   */
  export type Users$ActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activities
     */
    select?: ActivitiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activities
     */
    omit?: ActivitiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitiesInclude<ExtArgs> | null
    where?: ActivitiesWhereInput
    orderBy?: ActivitiesOrderByWithRelationInput | ActivitiesOrderByWithRelationInput[]
    cursor?: ActivitiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivitiesScalarFieldEnum | ActivitiesScalarFieldEnum[]
  }

  /**
   * Users.BudgetAllocations
   */
  export type Users$BudgetAllocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetAllocations
     */
    select?: BudgetAllocationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BudgetAllocations
     */
    omit?: BudgetAllocationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetAllocationsInclude<ExtArgs> | null
    where?: BudgetAllocationsWhereInput
    orderBy?: BudgetAllocationsOrderByWithRelationInput | BudgetAllocationsOrderByWithRelationInput[]
    cursor?: BudgetAllocationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetAllocationsScalarFieldEnum | BudgetAllocationsScalarFieldEnum[]
  }

  /**
   * Users.Budgets
   */
  export type Users$BudgetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Budgets
     */
    select?: BudgetsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Budgets
     */
    omit?: BudgetsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetsInclude<ExtArgs> | null
    where?: BudgetsWhereInput
    orderBy?: BudgetsOrderByWithRelationInput | BudgetsOrderByWithRelationInput[]
    cursor?: BudgetsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetsScalarFieldEnum | BudgetsScalarFieldEnum[]
  }

  /**
   * Users.CostSplits
   */
  export type Users$CostSplitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostSplits
     */
    select?: CostSplitsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CostSplits
     */
    omit?: CostSplitsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostSplitsInclude<ExtArgs> | null
    where?: CostSplitsWhereInput
    orderBy?: CostSplitsOrderByWithRelationInput | CostSplitsOrderByWithRelationInput[]
    cursor?: CostSplitsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CostSplitsScalarFieldEnum | CostSplitsScalarFieldEnum[]
  }

  /**
   * Users.Expenses
   */
  export type Users$ExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expenses
     */
    select?: ExpensesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Expenses
     */
    omit?: ExpensesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpensesInclude<ExtArgs> | null
    where?: ExpensesWhereInput
    orderBy?: ExpensesOrderByWithRelationInput | ExpensesOrderByWithRelationInput[]
    cursor?: ExpensesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpensesScalarFieldEnum | ExpensesScalarFieldEnum[]
  }

  /**
   * Users.Projects
   */
  export type Users$ProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Users.Managers
   */
  export type Users$ManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    where?: ManagersWhereInput
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    cursor?: ManagersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * Users.TravelRequests
   */
  export type Users$TravelRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TravelRequests
     */
    select?: TravelRequestsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TravelRequests
     */
    omit?: TravelRequestsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TravelRequestsInclude<ExtArgs> | null
    where?: TravelRequestsWhereInput
    orderBy?: TravelRequestsOrderByWithRelationInput | TravelRequestsOrderByWithRelationInput[]
    cursor?: TravelRequestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TravelRequestsScalarFieldEnum | TravelRequestsScalarFieldEnum[]
  }

  /**
   * Users.Notifications
   */
  export type Users$NotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notifications
     */
    select?: NotificationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notifications
     */
    omit?: NotificationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationsInclude<ExtArgs> | null
    where?: NotificationsWhereInput
    orderBy?: NotificationsOrderByWithRelationInput | NotificationsOrderByWithRelationInput[]
    cursor?: NotificationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationsScalarFieldEnum | NotificationsScalarFieldEnum[]
  }

  /**
   * Users.Approvals
   */
  export type Users$ApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approvals
     */
    select?: ApprovalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Approvals
     */
    omit?: ApprovalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalsInclude<ExtArgs> | null
    where?: ApprovalsWhereInput
    orderBy?: ApprovalsOrderByWithRelationInput | ApprovalsOrderByWithRelationInput[]
    cursor?: ApprovalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalsScalarFieldEnum | ApprovalsScalarFieldEnum[]
  }

  /**
   * Users.AuditLogs
   */
  export type Users$AuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogs
     */
    select?: AuditLogsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogs
     */
    omit?: AuditLogsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogsInclude<ExtArgs> | null
    where?: AuditLogsWhereInput
    orderBy?: AuditLogsOrderByWithRelationInput | AuditLogsOrderByWithRelationInput[]
    cursor?: AuditLogsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogsScalarFieldEnum | AuditLogsScalarFieldEnum[]
  }

  /**
   * Users.roles
   */
  export type Users$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    cursor?: rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RolesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to aggregate.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithAggregationInput | rolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: string
    name: string
    _count: RolesCountAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Users?: boolean | roles$UsersArgs<ExtArgs>
    RoleRates?: boolean | roles$RoleRatesArgs<ExtArgs>
    Managers?: boolean | roles$ManagersArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>



  export type rolesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type rolesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["roles"]>
  export type rolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | roles$UsersArgs<ExtArgs>
    RoleRates?: boolean | roles$RoleRatesArgs<ExtArgs>
    Managers?: boolean | roles$ManagersArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "roles"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>[]
      RoleRates: Prisma.$RoleRatesPayload<ExtArgs>[]
      Managers: Prisma.$ManagersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }

  type rolesGetPayload<S extends boolean | null | undefined | rolesDefaultArgs> = $Result.GetResult<Prisma.$rolesPayload, S>

  type rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['roles'], meta: { name: 'roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rolesFindUniqueArgs>(args: SelectSubset<T, rolesFindUniqueArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Roles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rolesFindFirstArgs>(args?: SelectSubset<T, rolesFindFirstArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends rolesFindManyArgs>(args?: SelectSubset<T, rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Roles.
     * @param {rolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
     */
    create<T extends rolesCreateArgs>(args: SelectSubset<T, rolesCreateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {rolesCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rolesCreateManyArgs>(args?: SelectSubset<T, rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
     */
    delete<T extends rolesDeleteArgs>(args: SelectSubset<T, rolesDeleteArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Roles.
     * @param {rolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rolesUpdateArgs>(args: SelectSubset<T, rolesUpdateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rolesDeleteManyArgs>(args?: SelectSubset<T, rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rolesUpdateManyArgs>(args: SelectSubset<T, rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
     */
    upsert<T extends rolesUpsertArgs>(args: SelectSubset<T, rolesUpsertArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends rolesCountArgs>(
      args?: Subset<T, rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rolesGroupByArgs['orderBy'] }
        : { orderBy?: rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the roles model
   */
  readonly fields: rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends roles$UsersArgs<ExtArgs> = {}>(args?: Subset<T, roles$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoleRates<T extends roles$RoleRatesArgs<ExtArgs> = {}>(args?: Subset<T, roles$RoleRatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleRatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Managers<T extends roles$ManagersArgs<ExtArgs> = {}>(args?: Subset<T, roles$ManagersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the roles model
   */
  interface rolesFieldRefs {
    readonly id: FieldRef<"roles", 'String'>
    readonly name: FieldRef<"roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * roles findUnique
   */
  export type rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findUniqueOrThrow
   */
  export type rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findFirst
   */
  export type rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findFirstOrThrow
   */
  export type rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findMany
   */
  export type rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles create
   */
  export type rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to create a roles.
     */
    data: XOR<rolesCreateInput, rolesUncheckedCreateInput>
  }

  /**
   * roles createMany
   */
  export type rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: rolesCreateManyInput | rolesCreateManyInput[]
  }

  /**
   * roles update
   */
  export type rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to update a roles.
     */
    data: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
    /**
     * Choose, which roles to update.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles updateMany
   */
  export type rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * roles upsert
   */
  export type rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The filter to search for the roles to update in case it exists.
     */
    where: rolesWhereUniqueInput
    /**
     * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
     */
    create: XOR<rolesCreateInput, rolesUncheckedCreateInput>
    /**
     * In case the roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
  }

  /**
   * roles delete
   */
  export type rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter which roles to delete.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles deleteMany
   */
  export type rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to delete.
     */
    limit?: number
  }

  /**
   * roles.Users
   */
  export type roles$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * roles.RoleRates
   */
  export type roles$RoleRatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleRates
     */
    select?: RoleRatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoleRates
     */
    omit?: RoleRatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleRatesInclude<ExtArgs> | null
    where?: RoleRatesWhereInput
    orderBy?: RoleRatesOrderByWithRelationInput | RoleRatesOrderByWithRelationInput[]
    cursor?: RoleRatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleRatesScalarFieldEnum | RoleRatesScalarFieldEnum[]
  }

  /**
   * roles.Managers
   */
  export type roles$ManagersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    where?: ManagersWhereInput
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    cursor?: ManagersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * roles without action
   */
  export type rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
  }


  /**
   * Model Managers
   */

  export type AggregateManagers = {
    _count: ManagersCountAggregateOutputType | null
    _min: ManagersMinAggregateOutputType | null
    _max: ManagersMaxAggregateOutputType | null
  }

  export type ManagersMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ManagersMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type ManagersCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ManagersMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ManagersMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ManagersCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ManagersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Managers to aggregate.
     */
    where?: ManagersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManagersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Managers
    **/
    _count?: true | ManagersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManagersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManagersMaxAggregateInputType
  }

  export type GetManagersAggregateType<T extends ManagersAggregateArgs> = {
        [P in keyof T & keyof AggregateManagers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManagers[P]>
      : GetScalarType<T[P], AggregateManagers[P]>
  }




  export type ManagersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagersWhereInput
    orderBy?: ManagersOrderByWithAggregationInput | ManagersOrderByWithAggregationInput[]
    by: ManagersScalarFieldEnum[] | ManagersScalarFieldEnum
    having?: ManagersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManagersCountAggregateInputType | true
    _min?: ManagersMinAggregateInputType
    _max?: ManagersMaxAggregateInputType
  }

  export type ManagersGroupByOutputType = {
    id: string
    name: string
    _count: ManagersCountAggregateOutputType | null
    _min: ManagersMinAggregateOutputType | null
    _max: ManagersMaxAggregateOutputType | null
  }

  type GetManagersGroupByPayload<T extends ManagersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManagersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManagersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManagersGroupByOutputType[P]>
            : GetScalarType<T[P], ManagersGroupByOutputType[P]>
        }
      >
    >


  export type ManagersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Users?: boolean | Managers$UsersArgs<ExtArgs>
    roles?: boolean | Managers$rolesArgs<ExtArgs>
    Projects?: boolean | Managers$ProjectsArgs<ExtArgs>
    _count?: boolean | ManagersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["managers"]>



  export type ManagersSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ManagersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["managers"]>
  export type ManagersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Users?: boolean | Managers$UsersArgs<ExtArgs>
    roles?: boolean | Managers$rolesArgs<ExtArgs>
    Projects?: boolean | Managers$ProjectsArgs<ExtArgs>
    _count?: boolean | ManagersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ManagersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Managers"
    objects: {
      Users: Prisma.$UsersPayload<ExtArgs>[]
      roles: Prisma.$rolesPayload<ExtArgs>[]
      Projects: Prisma.$ProjectsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["managers"]>
    composites: {}
  }

  type ManagersGetPayload<S extends boolean | null | undefined | ManagersDefaultArgs> = $Result.GetResult<Prisma.$ManagersPayload, S>

  type ManagersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ManagersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ManagersCountAggregateInputType | true
    }

  export interface ManagersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Managers'], meta: { name: 'Managers' } }
    /**
     * Find zero or one Managers that matches the filter.
     * @param {ManagersFindUniqueArgs} args - Arguments to find a Managers
     * @example
     * // Get one Managers
     * const managers = await prisma.managers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManagersFindUniqueArgs>(args: SelectSubset<T, ManagersFindUniqueArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Managers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ManagersFindUniqueOrThrowArgs} args - Arguments to find a Managers
     * @example
     * // Get one Managers
     * const managers = await prisma.managers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManagersFindUniqueOrThrowArgs>(args: SelectSubset<T, ManagersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Managers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersFindFirstArgs} args - Arguments to find a Managers
     * @example
     * // Get one Managers
     * const managers = await prisma.managers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManagersFindFirstArgs>(args?: SelectSubset<T, ManagersFindFirstArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Managers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersFindFirstOrThrowArgs} args - Arguments to find a Managers
     * @example
     * // Get one Managers
     * const managers = await prisma.managers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManagersFindFirstOrThrowArgs>(args?: SelectSubset<T, ManagersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Managers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Managers
     * const managers = await prisma.managers.findMany()
     * 
     * // Get first 10 Managers
     * const managers = await prisma.managers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const managersWithIdOnly = await prisma.managers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManagersFindManyArgs>(args?: SelectSubset<T, ManagersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Managers.
     * @param {ManagersCreateArgs} args - Arguments to create a Managers.
     * @example
     * // Create one Managers
     * const Managers = await prisma.managers.create({
     *   data: {
     *     // ... data to create a Managers
     *   }
     * })
     * 
     */
    create<T extends ManagersCreateArgs>(args: SelectSubset<T, ManagersCreateArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Managers.
     * @param {ManagersCreateManyArgs} args - Arguments to create many Managers.
     * @example
     * // Create many Managers
     * const managers = await prisma.managers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManagersCreateManyArgs>(args?: SelectSubset<T, ManagersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Managers.
     * @param {ManagersDeleteArgs} args - Arguments to delete one Managers.
     * @example
     * // Delete one Managers
     * const Managers = await prisma.managers.delete({
     *   where: {
     *     // ... filter to delete one Managers
     *   }
     * })
     * 
     */
    delete<T extends ManagersDeleteArgs>(args: SelectSubset<T, ManagersDeleteArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Managers.
     * @param {ManagersUpdateArgs} args - Arguments to update one Managers.
     * @example
     * // Update one Managers
     * const managers = await prisma.managers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManagersUpdateArgs>(args: SelectSubset<T, ManagersUpdateArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Managers.
     * @param {ManagersDeleteManyArgs} args - Arguments to filter Managers to delete.
     * @example
     * // Delete a few Managers
     * const { count } = await prisma.managers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManagersDeleteManyArgs>(args?: SelectSubset<T, ManagersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Managers
     * const managers = await prisma.managers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManagersUpdateManyArgs>(args: SelectSubset<T, ManagersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Managers.
     * @param {ManagersUpsertArgs} args - Arguments to update or create a Managers.
     * @example
     * // Update or create a Managers
     * const managers = await prisma.managers.upsert({
     *   create: {
     *     // ... data to create a Managers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Managers we want to update
     *   }
     * })
     */
    upsert<T extends ManagersUpsertArgs>(args: SelectSubset<T, ManagersUpsertArgs<ExtArgs>>): Prisma__ManagersClient<$Result.GetResult<Prisma.$ManagersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersCountArgs} args - Arguments to filter Managers to count.
     * @example
     * // Count the number of Managers
     * const count = await prisma.managers.count({
     *   where: {
     *     // ... the filter for the Managers we want to count
     *   }
     * })
    **/
    count<T extends ManagersCountArgs>(
      args?: Subset<T, ManagersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManagersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManagersAggregateArgs>(args: Subset<T, ManagersAggregateArgs>): Prisma.PrismaPromise<GetManagersAggregateType<T>>

    /**
     * Group by Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManagersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManagersGroupByArgs['orderBy'] }
        : { orderBy?: ManagersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManagersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Managers model
   */
  readonly fields: ManagersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Managers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManagersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Users<T extends Managers$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Managers$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends Managers$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Managers$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Projects<T extends Managers$ProjectsArgs<ExtArgs> = {}>(args?: Subset<T, Managers$ProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Managers model
   */
  interface ManagersFieldRefs {
    readonly id: FieldRef<"Managers", 'String'>
    readonly name: FieldRef<"Managers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Managers findUnique
   */
  export type ManagersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where: ManagersWhereUniqueInput
  }

  /**
   * Managers findUniqueOrThrow
   */
  export type ManagersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where: ManagersWhereUniqueInput
  }

  /**
   * Managers findFirst
   */
  export type ManagersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where?: ManagersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * Managers findFirstOrThrow
   */
  export type ManagersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where?: ManagersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * Managers findMany
   */
  export type ManagersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where?: ManagersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagersOrderByWithRelationInput | ManagersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Managers.
     */
    cursor?: ManagersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    distinct?: ManagersScalarFieldEnum | ManagersScalarFieldEnum[]
  }

  /**
   * Managers create
   */
  export type ManagersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * The data needed to create a Managers.
     */
    data: XOR<ManagersCreateInput, ManagersUncheckedCreateInput>
  }

  /**
   * Managers createMany
   */
  export type ManagersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Managers.
     */
    data: ManagersCreateManyInput | ManagersCreateManyInput[]
  }

  /**
   * Managers update
   */
  export type ManagersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * The data needed to update a Managers.
     */
    data: XOR<ManagersUpdateInput, ManagersUncheckedUpdateInput>
    /**
     * Choose, which Managers to update.
     */
    where: ManagersWhereUniqueInput
  }

  /**
   * Managers updateMany
   */
  export type ManagersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Managers.
     */
    data: XOR<ManagersUpdateManyMutationInput, ManagersUncheckedUpdateManyInput>
    /**
     * Filter which Managers to update
     */
    where?: ManagersWhereInput
    /**
     * Limit how many Managers to update.
     */
    limit?: number
  }

  /**
   * Managers upsert
   */
  export type ManagersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * The filter to search for the Managers to update in case it exists.
     */
    where: ManagersWhereUniqueInput
    /**
     * In case the Managers found by the `where` argument doesn't exist, create a new Managers with this data.
     */
    create: XOR<ManagersCreateInput, ManagersUncheckedCreateInput>
    /**
     * In case the Managers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManagersUpdateInput, ManagersUncheckedUpdateInput>
  }

  /**
   * Managers delete
   */
  export type ManagersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
    /**
     * Filter which Managers to delete.
     */
    where: ManagersWhereUniqueInput
  }

  /**
   * Managers deleteMany
   */
  export type ManagersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Managers to delete
     */
    where?: ManagersWhereInput
    /**
     * Limit how many Managers to delete.
     */
    limit?: number
  }

  /**
   * Managers.Users
   */
  export type Managers$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Managers.roles
   */
  export type Managers$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    cursor?: rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * Managers.Projects
   */
  export type Managers$ProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projects
     */
    select?: ProjectsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projects
     */
    omit?: ProjectsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectsInclude<ExtArgs> | null
    where?: ProjectsWhereInput
    orderBy?: ProjectsOrderByWithRelationInput | ProjectsOrderByWithRelationInput[]
    cursor?: ProjectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * Managers without action
   */
  export type ManagersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Managers
     */
    select?: ManagersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Managers
     */
    omit?: ManagersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActivitiesScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    userId: 'userId',
    date: 'date',
    hours: 'hours',
    progress: 'progress',
    notes: 'notes'
  };

  export type ActivitiesScalarFieldEnum = (typeof ActivitiesScalarFieldEnum)[keyof typeof ActivitiesScalarFieldEnum]


  export const BudgetAllocationsScalarFieldEnum: {
    id: 'id',
    budgetId: 'budgetId',
    userId: 'userId',
    hours: 'hours',
    rate: 'rate'
  };

  export type BudgetAllocationsScalarFieldEnum = (typeof BudgetAllocationsScalarFieldEnum)[keyof typeof BudgetAllocationsScalarFieldEnum]


  export const BudgetsScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    itemType: 'itemType',
    description: 'description',
    status: 'status',
    createdById: 'createdById'
  };

  export type BudgetsScalarFieldEnum = (typeof BudgetsScalarFieldEnum)[keyof typeof BudgetsScalarFieldEnum]


  export const ClientsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const CostSplitsScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    cost: 'cost',
    splitWith: 'splitWith',
    approvedBy: 'approvedBy'
  };

  export type CostSplitsScalarFieldEnum = (typeof CostSplitsScalarFieldEnum)[keyof typeof CostSplitsScalarFieldEnum]


  export const ExchangeRatesScalarFieldEnum: {
    id: 'id',
    currency: 'currency',
    rate: 'rate',
    createdAt: 'createdAt'
  };

  export type ExchangeRatesScalarFieldEnum = (typeof ExchangeRatesScalarFieldEnum)[keyof typeof ExchangeRatesScalarFieldEnum]


  export const ExpensesScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    submittedBy: 'submittedBy',
    expenseType: 'expenseType',
    isBillable: 'isBillable',
    amount: 'amount',
    description: 'description',
    expenseDate: 'expenseDate'
  };

  export type ExpensesScalarFieldEnum = (typeof ExpensesScalarFieldEnum)[keyof typeof ExpensesScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    clientId: 'clientId',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    billingType: 'billingType',
    billingRateTimePeriod: 'billingRateTimePeriod',
    totalContract: 'totalContract',
    approvedBudget: 'approvedBudget',
    allocatedBudget: 'allocatedBudget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const RoleRatesScalarFieldEnum: {
    id: 'id',
    rate: 'rate',
    validFrom: 'validFrom'
  };

  export type RoleRatesScalarFieldEnum = (typeof RoleRatesScalarFieldEnum)[keyof typeof RoleRatesScalarFieldEnum]


  export const SysdiagramsScalarFieldEnum: {
    name: 'name',
    principal_id: 'principal_id',
    diagram_id: 'diagram_id',
    version: 'version',
    definition: 'definition'
  };

  export type SysdiagramsScalarFieldEnum = (typeof SysdiagramsScalarFieldEnum)[keyof typeof SysdiagramsScalarFieldEnum]


  export const TravelRequestsScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    requesterId: 'requesterId',
    destination: 'destination',
    purpose: 'purpose',
    cost: 'cost',
    status: 'status'
  };

  export type TravelRequestsScalarFieldEnum = (typeof TravelRequestsScalarFieldEnum)[keyof typeof TravelRequestsScalarFieldEnum]


  export const NotificationsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationsScalarFieldEnum = (typeof NotificationsScalarFieldEnum)[keyof typeof NotificationsScalarFieldEnum]


  export const ApprovalsScalarFieldEnum: {
    id: 'id',
    entityId: 'entityId',
    entityType: 'entityType',
    approverId: 'approverId',
    status: 'status',
    comment: 'comment',
    updatedAt: 'updatedAt'
  };

  export type ApprovalsScalarFieldEnum = (typeof ApprovalsScalarFieldEnum)[keyof typeof ApprovalsScalarFieldEnum]


  export const AuditLogsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    actionType: 'actionType',
    entityType: 'entityType',
    entityId: 'entityId',
    description: 'description',
    timestamp: 'timestamp'
  };

  export type AuditLogsScalarFieldEnum = (typeof AuditLogsScalarFieldEnum)[keyof typeof AuditLogsScalarFieldEnum]


  export const LookupsScalarFieldEnum: {
    id: 'id',
    category: 'category',
    code: 'code',
    label: 'label',
    isActive: 'isActive',
    sortOrder: 'sortOrder'
  };

  export type LookupsScalarFieldEnum = (typeof LookupsScalarFieldEnum)[keyof typeof LookupsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const ManagersScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ManagersScalarFieldEnum = (typeof ManagersScalarFieldEnum)[keyof typeof ManagersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    
  /**
   * Deep Input Types
   */


  export type ActivitiesWhereInput = {
    AND?: ActivitiesWhereInput | ActivitiesWhereInput[]
    OR?: ActivitiesWhereInput[]
    NOT?: ActivitiesWhereInput | ActivitiesWhereInput[]
    id?: StringFilter<"Activities"> | string
    projectId?: StringFilter<"Activities"> | string
    userId?: StringFilter<"Activities"> | string
    date?: DateTimeFilter<"Activities"> | Date | string
    hours?: FloatFilter<"Activities"> | number
    progress?: IntNullableFilter<"Activities"> | number | null
    notes?: StringNullableFilter<"Activities"> | string | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type ActivitiesOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    progress?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    Projects?: ProjectsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type ActivitiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivitiesWhereInput | ActivitiesWhereInput[]
    OR?: ActivitiesWhereInput[]
    NOT?: ActivitiesWhereInput | ActivitiesWhereInput[]
    projectId?: StringFilter<"Activities"> | string
    userId?: StringFilter<"Activities"> | string
    date?: DateTimeFilter<"Activities"> | Date | string
    hours?: FloatFilter<"Activities"> | number
    progress?: IntNullableFilter<"Activities"> | number | null
    notes?: StringNullableFilter<"Activities"> | string | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type ActivitiesOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    progress?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ActivitiesCountOrderByAggregateInput
    _avg?: ActivitiesAvgOrderByAggregateInput
    _max?: ActivitiesMaxOrderByAggregateInput
    _min?: ActivitiesMinOrderByAggregateInput
    _sum?: ActivitiesSumOrderByAggregateInput
  }

  export type ActivitiesScalarWhereWithAggregatesInput = {
    AND?: ActivitiesScalarWhereWithAggregatesInput | ActivitiesScalarWhereWithAggregatesInput[]
    OR?: ActivitiesScalarWhereWithAggregatesInput[]
    NOT?: ActivitiesScalarWhereWithAggregatesInput | ActivitiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activities"> | string
    projectId?: StringWithAggregatesFilter<"Activities"> | string
    userId?: StringWithAggregatesFilter<"Activities"> | string
    date?: DateTimeWithAggregatesFilter<"Activities"> | Date | string
    hours?: FloatWithAggregatesFilter<"Activities"> | number
    progress?: IntNullableWithAggregatesFilter<"Activities"> | number | null
    notes?: StringNullableWithAggregatesFilter<"Activities"> | string | null
  }

  export type BudgetAllocationsWhereInput = {
    AND?: BudgetAllocationsWhereInput | BudgetAllocationsWhereInput[]
    OR?: BudgetAllocationsWhereInput[]
    NOT?: BudgetAllocationsWhereInput | BudgetAllocationsWhereInput[]
    id?: StringFilter<"BudgetAllocations"> | string
    budgetId?: StringFilter<"BudgetAllocations"> | string
    userId?: StringFilter<"BudgetAllocations"> | string
    hours?: FloatFilter<"BudgetAllocations"> | number
    rate?: DecimalFilter<"BudgetAllocations"> | Decimal | DecimalJsLike | number | string
    Budgets?: XOR<BudgetsScalarRelationFilter, BudgetsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type BudgetAllocationsOrderByWithRelationInput = {
    id?: SortOrder
    budgetId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
    Budgets?: BudgetsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type BudgetAllocationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetAllocationsWhereInput | BudgetAllocationsWhereInput[]
    OR?: BudgetAllocationsWhereInput[]
    NOT?: BudgetAllocationsWhereInput | BudgetAllocationsWhereInput[]
    budgetId?: StringFilter<"BudgetAllocations"> | string
    userId?: StringFilter<"BudgetAllocations"> | string
    hours?: FloatFilter<"BudgetAllocations"> | number
    rate?: DecimalFilter<"BudgetAllocations"> | Decimal | DecimalJsLike | number | string
    Budgets?: XOR<BudgetsScalarRelationFilter, BudgetsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type BudgetAllocationsOrderByWithAggregationInput = {
    id?: SortOrder
    budgetId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
    _count?: BudgetAllocationsCountOrderByAggregateInput
    _avg?: BudgetAllocationsAvgOrderByAggregateInput
    _max?: BudgetAllocationsMaxOrderByAggregateInput
    _min?: BudgetAllocationsMinOrderByAggregateInput
    _sum?: BudgetAllocationsSumOrderByAggregateInput
  }

  export type BudgetAllocationsScalarWhereWithAggregatesInput = {
    AND?: BudgetAllocationsScalarWhereWithAggregatesInput | BudgetAllocationsScalarWhereWithAggregatesInput[]
    OR?: BudgetAllocationsScalarWhereWithAggregatesInput[]
    NOT?: BudgetAllocationsScalarWhereWithAggregatesInput | BudgetAllocationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BudgetAllocations"> | string
    budgetId?: StringWithAggregatesFilter<"BudgetAllocations"> | string
    userId?: StringWithAggregatesFilter<"BudgetAllocations"> | string
    hours?: FloatWithAggregatesFilter<"BudgetAllocations"> | number
    rate?: DecimalWithAggregatesFilter<"BudgetAllocations"> | Decimal | DecimalJsLike | number | string
  }

  export type BudgetsWhereInput = {
    AND?: BudgetsWhereInput | BudgetsWhereInput[]
    OR?: BudgetsWhereInput[]
    NOT?: BudgetsWhereInput | BudgetsWhereInput[]
    id?: StringFilter<"Budgets"> | string
    projectId?: StringFilter<"Budgets"> | string
    itemType?: StringFilter<"Budgets"> | string
    description?: StringNullableFilter<"Budgets"> | string | null
    status?: StringNullableFilter<"Budgets"> | string | null
    createdById?: StringFilter<"Budgets"> | string
    BudgetAllocations?: BudgetAllocationsListRelationFilter
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
  }

  export type BudgetsOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    itemType?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdById?: SortOrder
    BudgetAllocations?: BudgetAllocationsOrderByRelationAggregateInput
    Users?: UsersOrderByWithRelationInput
    Projects?: ProjectsOrderByWithRelationInput
  }

  export type BudgetsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BudgetsWhereInput | BudgetsWhereInput[]
    OR?: BudgetsWhereInput[]
    NOT?: BudgetsWhereInput | BudgetsWhereInput[]
    projectId?: StringFilter<"Budgets"> | string
    itemType?: StringFilter<"Budgets"> | string
    description?: StringNullableFilter<"Budgets"> | string | null
    status?: StringNullableFilter<"Budgets"> | string | null
    createdById?: StringFilter<"Budgets"> | string
    BudgetAllocations?: BudgetAllocationsListRelationFilter
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
  }, "id">

  export type BudgetsOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    itemType?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: BudgetsCountOrderByAggregateInput
    _max?: BudgetsMaxOrderByAggregateInput
    _min?: BudgetsMinOrderByAggregateInput
  }

  export type BudgetsScalarWhereWithAggregatesInput = {
    AND?: BudgetsScalarWhereWithAggregatesInput | BudgetsScalarWhereWithAggregatesInput[]
    OR?: BudgetsScalarWhereWithAggregatesInput[]
    NOT?: BudgetsScalarWhereWithAggregatesInput | BudgetsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Budgets"> | string
    projectId?: StringWithAggregatesFilter<"Budgets"> | string
    itemType?: StringWithAggregatesFilter<"Budgets"> | string
    description?: StringNullableWithAggregatesFilter<"Budgets"> | string | null
    status?: StringNullableWithAggregatesFilter<"Budgets"> | string | null
    createdById?: StringWithAggregatesFilter<"Budgets"> | string
  }

  export type ClientsWhereInput = {
    AND?: ClientsWhereInput | ClientsWhereInput[]
    OR?: ClientsWhereInput[]
    NOT?: ClientsWhereInput | ClientsWhereInput[]
    id?: StringFilter<"Clients"> | string
    name?: StringFilter<"Clients"> | string
    Projects?: ProjectsListRelationFilter
  }

  export type ClientsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Projects?: ProjectsOrderByRelationAggregateInput
  }

  export type ClientsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientsWhereInput | ClientsWhereInput[]
    OR?: ClientsWhereInput[]
    NOT?: ClientsWhereInput | ClientsWhereInput[]
    name?: StringFilter<"Clients"> | string
    Projects?: ProjectsListRelationFilter
  }, "id">

  export type ClientsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ClientsCountOrderByAggregateInput
    _max?: ClientsMaxOrderByAggregateInput
    _min?: ClientsMinOrderByAggregateInput
  }

  export type ClientsScalarWhereWithAggregatesInput = {
    AND?: ClientsScalarWhereWithAggregatesInput | ClientsScalarWhereWithAggregatesInput[]
    OR?: ClientsScalarWhereWithAggregatesInput[]
    NOT?: ClientsScalarWhereWithAggregatesInput | ClientsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Clients"> | string
    name?: StringWithAggregatesFilter<"Clients"> | string
  }

  export type CostSplitsWhereInput = {
    AND?: CostSplitsWhereInput | CostSplitsWhereInput[]
    OR?: CostSplitsWhereInput[]
    NOT?: CostSplitsWhereInput | CostSplitsWhereInput[]
    id?: StringFilter<"CostSplits"> | string
    projectId?: StringFilter<"CostSplits"> | string
    cost?: DecimalFilter<"CostSplits"> | Decimal | DecimalJsLike | number | string
    splitWith?: StringFilter<"CostSplits"> | string
    approvedBy?: StringNullableFilter<"CostSplits"> | string | null
    Users?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
  }

  export type CostSplitsOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    cost?: SortOrder
    splitWith?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    Users?: UsersOrderByWithRelationInput
    Projects?: ProjectsOrderByWithRelationInput
  }

  export type CostSplitsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CostSplitsWhereInput | CostSplitsWhereInput[]
    OR?: CostSplitsWhereInput[]
    NOT?: CostSplitsWhereInput | CostSplitsWhereInput[]
    projectId?: StringFilter<"CostSplits"> | string
    cost?: DecimalFilter<"CostSplits"> | Decimal | DecimalJsLike | number | string
    splitWith?: StringFilter<"CostSplits"> | string
    approvedBy?: StringNullableFilter<"CostSplits"> | string | null
    Users?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
  }, "id">

  export type CostSplitsOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    cost?: SortOrder
    splitWith?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    _count?: CostSplitsCountOrderByAggregateInput
    _avg?: CostSplitsAvgOrderByAggregateInput
    _max?: CostSplitsMaxOrderByAggregateInput
    _min?: CostSplitsMinOrderByAggregateInput
    _sum?: CostSplitsSumOrderByAggregateInput
  }

  export type CostSplitsScalarWhereWithAggregatesInput = {
    AND?: CostSplitsScalarWhereWithAggregatesInput | CostSplitsScalarWhereWithAggregatesInput[]
    OR?: CostSplitsScalarWhereWithAggregatesInput[]
    NOT?: CostSplitsScalarWhereWithAggregatesInput | CostSplitsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CostSplits"> | string
    projectId?: StringWithAggregatesFilter<"CostSplits"> | string
    cost?: DecimalWithAggregatesFilter<"CostSplits"> | Decimal | DecimalJsLike | number | string
    splitWith?: StringWithAggregatesFilter<"CostSplits"> | string
    approvedBy?: StringNullableWithAggregatesFilter<"CostSplits"> | string | null
  }

  export type ExchangeRatesWhereInput = {
    AND?: ExchangeRatesWhereInput | ExchangeRatesWhereInput[]
    OR?: ExchangeRatesWhereInput[]
    NOT?: ExchangeRatesWhereInput | ExchangeRatesWhereInput[]
    id?: StringFilter<"ExchangeRates"> | string
    currency?: StringFilter<"ExchangeRates"> | string
    rate?: DecimalFilter<"ExchangeRates"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeNullableFilter<"ExchangeRates"> | Date | string | null
  }

  export type ExchangeRatesOrderByWithRelationInput = {
    id?: SortOrder
    currency?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrderInput | SortOrder
  }

  export type ExchangeRatesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExchangeRatesWhereInput | ExchangeRatesWhereInput[]
    OR?: ExchangeRatesWhereInput[]
    NOT?: ExchangeRatesWhereInput | ExchangeRatesWhereInput[]
    currency?: StringFilter<"ExchangeRates"> | string
    rate?: DecimalFilter<"ExchangeRates"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeNullableFilter<"ExchangeRates"> | Date | string | null
  }, "id">

  export type ExchangeRatesOrderByWithAggregationInput = {
    id?: SortOrder
    currency?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: ExchangeRatesCountOrderByAggregateInput
    _avg?: ExchangeRatesAvgOrderByAggregateInput
    _max?: ExchangeRatesMaxOrderByAggregateInput
    _min?: ExchangeRatesMinOrderByAggregateInput
    _sum?: ExchangeRatesSumOrderByAggregateInput
  }

  export type ExchangeRatesScalarWhereWithAggregatesInput = {
    AND?: ExchangeRatesScalarWhereWithAggregatesInput | ExchangeRatesScalarWhereWithAggregatesInput[]
    OR?: ExchangeRatesScalarWhereWithAggregatesInput[]
    NOT?: ExchangeRatesScalarWhereWithAggregatesInput | ExchangeRatesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExchangeRates"> | string
    currency?: StringWithAggregatesFilter<"ExchangeRates"> | string
    rate?: DecimalWithAggregatesFilter<"ExchangeRates"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeNullableWithAggregatesFilter<"ExchangeRates"> | Date | string | null
  }

  export type ExpensesWhereInput = {
    AND?: ExpensesWhereInput | ExpensesWhereInput[]
    OR?: ExpensesWhereInput[]
    NOT?: ExpensesWhereInput | ExpensesWhereInput[]
    id?: StringFilter<"Expenses"> | string
    projectId?: StringFilter<"Expenses"> | string
    submittedBy?: StringFilter<"Expenses"> | string
    expenseType?: StringFilter<"Expenses"> | string
    isBillable?: BoolFilter<"Expenses"> | boolean
    amount?: DecimalFilter<"Expenses"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Expenses"> | string | null
    expenseDate?: DateTimeFilter<"Expenses"> | Date | string
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type ExpensesOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    submittedBy?: SortOrder
    expenseType?: SortOrder
    isBillable?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    expenseDate?: SortOrder
    Projects?: ProjectsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type ExpensesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExpensesWhereInput | ExpensesWhereInput[]
    OR?: ExpensesWhereInput[]
    NOT?: ExpensesWhereInput | ExpensesWhereInput[]
    projectId?: StringFilter<"Expenses"> | string
    submittedBy?: StringFilter<"Expenses"> | string
    expenseType?: StringFilter<"Expenses"> | string
    isBillable?: BoolFilter<"Expenses"> | boolean
    amount?: DecimalFilter<"Expenses"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Expenses"> | string | null
    expenseDate?: DateTimeFilter<"Expenses"> | Date | string
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type ExpensesOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    submittedBy?: SortOrder
    expenseType?: SortOrder
    isBillable?: SortOrder
    amount?: SortOrder
    description?: SortOrderInput | SortOrder
    expenseDate?: SortOrder
    _count?: ExpensesCountOrderByAggregateInput
    _avg?: ExpensesAvgOrderByAggregateInput
    _max?: ExpensesMaxOrderByAggregateInput
    _min?: ExpensesMinOrderByAggregateInput
    _sum?: ExpensesSumOrderByAggregateInput
  }

  export type ExpensesScalarWhereWithAggregatesInput = {
    AND?: ExpensesScalarWhereWithAggregatesInput | ExpensesScalarWhereWithAggregatesInput[]
    OR?: ExpensesScalarWhereWithAggregatesInput[]
    NOT?: ExpensesScalarWhereWithAggregatesInput | ExpensesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Expenses"> | string
    projectId?: StringWithAggregatesFilter<"Expenses"> | string
    submittedBy?: StringWithAggregatesFilter<"Expenses"> | string
    expenseType?: StringWithAggregatesFilter<"Expenses"> | string
    isBillable?: BoolWithAggregatesFilter<"Expenses"> | boolean
    amount?: DecimalWithAggregatesFilter<"Expenses"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableWithAggregatesFilter<"Expenses"> | string | null
    expenseDate?: DateTimeWithAggregatesFilter<"Expenses"> | Date | string
  }

  export type ProjectsWhereInput = {
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    id?: StringFilter<"Projects"> | string
    name?: StringFilter<"Projects"> | string
    code?: StringFilter<"Projects"> | string
    clientId?: StringNullableFilter<"Projects"> | string | null
    startDate?: DateTimeFilter<"Projects"> | Date | string
    endDate?: DateTimeFilter<"Projects"> | Date | string
    status?: StringFilter<"Projects"> | string
    billingType?: StringFilter<"Projects"> | string
    billingRateTimePeriod?: StringFilter<"Projects"> | string
    totalContract?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
    Activities?: ActivitiesListRelationFilter
    Budgets?: BudgetsListRelationFilter
    CostSplits?: CostSplitsListRelationFilter
    Expenses?: ExpensesListRelationFilter
    users?: UsersListRelationFilter
    Clients?: XOR<ClientsNullableScalarRelationFilter, ClientsWhereInput> | null
    TravelRequests?: TravelRequestsListRelationFilter
    Managers?: ManagersListRelationFilter
  }

  export type ProjectsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    clientId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    billingType?: SortOrder
    billingRateTimePeriod?: SortOrder
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Activities?: ActivitiesOrderByRelationAggregateInput
    Budgets?: BudgetsOrderByRelationAggregateInput
    CostSplits?: CostSplitsOrderByRelationAggregateInput
    Expenses?: ExpensesOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
    Clients?: ClientsOrderByWithRelationInput
    TravelRequests?: TravelRequestsOrderByRelationAggregateInput
    Managers?: ManagersOrderByRelationAggregateInput
  }

  export type ProjectsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ProjectsWhereInput | ProjectsWhereInput[]
    OR?: ProjectsWhereInput[]
    NOT?: ProjectsWhereInput | ProjectsWhereInput[]
    name?: StringFilter<"Projects"> | string
    clientId?: StringNullableFilter<"Projects"> | string | null
    startDate?: DateTimeFilter<"Projects"> | Date | string
    endDate?: DateTimeFilter<"Projects"> | Date | string
    status?: StringFilter<"Projects"> | string
    billingType?: StringFilter<"Projects"> | string
    billingRateTimePeriod?: StringFilter<"Projects"> | string
    totalContract?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
    Activities?: ActivitiesListRelationFilter
    Budgets?: BudgetsListRelationFilter
    CostSplits?: CostSplitsListRelationFilter
    Expenses?: ExpensesListRelationFilter
    users?: UsersListRelationFilter
    Clients?: XOR<ClientsNullableScalarRelationFilter, ClientsWhereInput> | null
    TravelRequests?: TravelRequestsListRelationFilter
    Managers?: ManagersListRelationFilter
  }, "id" | "code">

  export type ProjectsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    clientId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    billingType?: SortOrder
    billingRateTimePeriod?: SortOrder
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectsCountOrderByAggregateInput
    _avg?: ProjectsAvgOrderByAggregateInput
    _max?: ProjectsMaxOrderByAggregateInput
    _min?: ProjectsMinOrderByAggregateInput
    _sum?: ProjectsSumOrderByAggregateInput
  }

  export type ProjectsScalarWhereWithAggregatesInput = {
    AND?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    OR?: ProjectsScalarWhereWithAggregatesInput[]
    NOT?: ProjectsScalarWhereWithAggregatesInput | ProjectsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Projects"> | string
    name?: StringWithAggregatesFilter<"Projects"> | string
    code?: StringWithAggregatesFilter<"Projects"> | string
    clientId?: StringNullableWithAggregatesFilter<"Projects"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    status?: StringWithAggregatesFilter<"Projects"> | string
    billingType?: StringWithAggregatesFilter<"Projects"> | string
    billingRateTimePeriod?: StringWithAggregatesFilter<"Projects"> | string
    totalContract?: DecimalWithAggregatesFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalWithAggregatesFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalWithAggregatesFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Projects"> | Date | string
  }

  export type RoleRatesWhereInput = {
    AND?: RoleRatesWhereInput | RoleRatesWhereInput[]
    OR?: RoleRatesWhereInput[]
    NOT?: RoleRatesWhereInput | RoleRatesWhereInput[]
    id?: StringFilter<"RoleRates"> | string
    rate?: DecimalFilter<"RoleRates"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"RoleRates"> | Date | string
    roles?: RolesListRelationFilter
  }

  export type RoleRatesOrderByWithRelationInput = {
    id?: SortOrder
    rate?: SortOrder
    validFrom?: SortOrder
    roles?: rolesOrderByRelationAggregateInput
  }

  export type RoleRatesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoleRatesWhereInput | RoleRatesWhereInput[]
    OR?: RoleRatesWhereInput[]
    NOT?: RoleRatesWhereInput | RoleRatesWhereInput[]
    rate?: DecimalFilter<"RoleRates"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"RoleRates"> | Date | string
    roles?: RolesListRelationFilter
  }, "id">

  export type RoleRatesOrderByWithAggregationInput = {
    id?: SortOrder
    rate?: SortOrder
    validFrom?: SortOrder
    _count?: RoleRatesCountOrderByAggregateInput
    _avg?: RoleRatesAvgOrderByAggregateInput
    _max?: RoleRatesMaxOrderByAggregateInput
    _min?: RoleRatesMinOrderByAggregateInput
    _sum?: RoleRatesSumOrderByAggregateInput
  }

  export type RoleRatesScalarWhereWithAggregatesInput = {
    AND?: RoleRatesScalarWhereWithAggregatesInput | RoleRatesScalarWhereWithAggregatesInput[]
    OR?: RoleRatesScalarWhereWithAggregatesInput[]
    NOT?: RoleRatesScalarWhereWithAggregatesInput | RoleRatesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoleRates"> | string
    rate?: DecimalWithAggregatesFilter<"RoleRates"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeWithAggregatesFilter<"RoleRates"> | Date | string
  }

  export type sysdiagramsWhereInput = {
    AND?: sysdiagramsWhereInput | sysdiagramsWhereInput[]
    OR?: sysdiagramsWhereInput[]
    NOT?: sysdiagramsWhereInput | sysdiagramsWhereInput[]
    name?: StringFilter<"sysdiagrams"> | string
    principal_id?: IntFilter<"sysdiagrams"> | number
    diagram_id?: IntFilter<"sysdiagrams"> | number
    version?: IntNullableFilter<"sysdiagrams"> | number | null
    definition?: BytesNullableFilter<"sysdiagrams"> | Uint8Array | null
  }

  export type sysdiagramsOrderByWithRelationInput = {
    name?: SortOrder
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrderInput | SortOrder
    definition?: SortOrderInput | SortOrder
  }

  export type sysdiagramsWhereUniqueInput = Prisma.AtLeast<{
    diagram_id?: number
    principal_id_name?: sysdiagramsPrincipal_idNameCompoundUniqueInput
    AND?: sysdiagramsWhereInput | sysdiagramsWhereInput[]
    OR?: sysdiagramsWhereInput[]
    NOT?: sysdiagramsWhereInput | sysdiagramsWhereInput[]
    name?: StringFilter<"sysdiagrams"> | string
    principal_id?: IntFilter<"sysdiagrams"> | number
    version?: IntNullableFilter<"sysdiagrams"> | number | null
    definition?: BytesNullableFilter<"sysdiagrams"> | Uint8Array | null
  }, "diagram_id" | "principal_id_name">

  export type sysdiagramsOrderByWithAggregationInput = {
    name?: SortOrder
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrderInput | SortOrder
    definition?: SortOrderInput | SortOrder
    _count?: sysdiagramsCountOrderByAggregateInput
    _avg?: sysdiagramsAvgOrderByAggregateInput
    _max?: sysdiagramsMaxOrderByAggregateInput
    _min?: sysdiagramsMinOrderByAggregateInput
    _sum?: sysdiagramsSumOrderByAggregateInput
  }

  export type sysdiagramsScalarWhereWithAggregatesInput = {
    AND?: sysdiagramsScalarWhereWithAggregatesInput | sysdiagramsScalarWhereWithAggregatesInput[]
    OR?: sysdiagramsScalarWhereWithAggregatesInput[]
    NOT?: sysdiagramsScalarWhereWithAggregatesInput | sysdiagramsScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"sysdiagrams"> | string
    principal_id?: IntWithAggregatesFilter<"sysdiagrams"> | number
    diagram_id?: IntWithAggregatesFilter<"sysdiagrams"> | number
    version?: IntNullableWithAggregatesFilter<"sysdiagrams"> | number | null
    definition?: BytesNullableWithAggregatesFilter<"sysdiagrams"> | Uint8Array | null
  }

  export type TravelRequestsWhereInput = {
    AND?: TravelRequestsWhereInput | TravelRequestsWhereInput[]
    OR?: TravelRequestsWhereInput[]
    NOT?: TravelRequestsWhereInput | TravelRequestsWhereInput[]
    id?: StringFilter<"TravelRequests"> | string
    projectId?: StringFilter<"TravelRequests"> | string
    requesterId?: StringFilter<"TravelRequests"> | string
    destination?: StringFilter<"TravelRequests"> | string
    purpose?: StringFilter<"TravelRequests"> | string
    cost?: DecimalFilter<"TravelRequests"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"TravelRequests"> | string | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type TravelRequestsOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    requesterId?: SortOrder
    destination?: SortOrder
    purpose?: SortOrder
    cost?: SortOrder
    status?: SortOrderInput | SortOrder
    Projects?: ProjectsOrderByWithRelationInput
    Users?: UsersOrderByWithRelationInput
  }

  export type TravelRequestsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TravelRequestsWhereInput | TravelRequestsWhereInput[]
    OR?: TravelRequestsWhereInput[]
    NOT?: TravelRequestsWhereInput | TravelRequestsWhereInput[]
    projectId?: StringFilter<"TravelRequests"> | string
    requesterId?: StringFilter<"TravelRequests"> | string
    destination?: StringFilter<"TravelRequests"> | string
    purpose?: StringFilter<"TravelRequests"> | string
    cost?: DecimalFilter<"TravelRequests"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"TravelRequests"> | string | null
    Projects?: XOR<ProjectsScalarRelationFilter, ProjectsWhereInput>
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type TravelRequestsOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    requesterId?: SortOrder
    destination?: SortOrder
    purpose?: SortOrder
    cost?: SortOrder
    status?: SortOrderInput | SortOrder
    _count?: TravelRequestsCountOrderByAggregateInput
    _avg?: TravelRequestsAvgOrderByAggregateInput
    _max?: TravelRequestsMaxOrderByAggregateInput
    _min?: TravelRequestsMinOrderByAggregateInput
    _sum?: TravelRequestsSumOrderByAggregateInput
  }

  export type TravelRequestsScalarWhereWithAggregatesInput = {
    AND?: TravelRequestsScalarWhereWithAggregatesInput | TravelRequestsScalarWhereWithAggregatesInput[]
    OR?: TravelRequestsScalarWhereWithAggregatesInput[]
    NOT?: TravelRequestsScalarWhereWithAggregatesInput | TravelRequestsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TravelRequests"> | string
    projectId?: StringWithAggregatesFilter<"TravelRequests"> | string
    requesterId?: StringWithAggregatesFilter<"TravelRequests"> | string
    destination?: StringWithAggregatesFilter<"TravelRequests"> | string
    purpose?: StringWithAggregatesFilter<"TravelRequests"> | string
    cost?: DecimalWithAggregatesFilter<"TravelRequests"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableWithAggregatesFilter<"TravelRequests"> | string | null
  }

  export type NotificationsWhereInput = {
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    id?: StringFilter<"Notifications"> | string
    userId?: StringFilter<"Notifications"> | string
    type?: StringFilter<"Notifications"> | string
    message?: StringFilter<"Notifications"> | string
    isRead?: BoolFilter<"Notifications"> | boolean
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type NotificationsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    Users?: UsersOrderByWithRelationInput
  }

  export type NotificationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationsWhereInput | NotificationsWhereInput[]
    OR?: NotificationsWhereInput[]
    NOT?: NotificationsWhereInput | NotificationsWhereInput[]
    userId?: StringFilter<"Notifications"> | string
    type?: StringFilter<"Notifications"> | string
    message?: StringFilter<"Notifications"> | string
    isRead?: BoolFilter<"Notifications"> | boolean
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type NotificationsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationsCountOrderByAggregateInput
    _max?: NotificationsMaxOrderByAggregateInput
    _min?: NotificationsMinOrderByAggregateInput
  }

  export type NotificationsScalarWhereWithAggregatesInput = {
    AND?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    OR?: NotificationsScalarWhereWithAggregatesInput[]
    NOT?: NotificationsScalarWhereWithAggregatesInput | NotificationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notifications"> | string
    userId?: StringWithAggregatesFilter<"Notifications"> | string
    type?: StringWithAggregatesFilter<"Notifications"> | string
    message?: StringWithAggregatesFilter<"Notifications"> | string
    isRead?: BoolWithAggregatesFilter<"Notifications"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notifications"> | Date | string
  }

  export type ApprovalsWhereInput = {
    AND?: ApprovalsWhereInput | ApprovalsWhereInput[]
    OR?: ApprovalsWhereInput[]
    NOT?: ApprovalsWhereInput | ApprovalsWhereInput[]
    id?: StringFilter<"Approvals"> | string
    entityId?: StringFilter<"Approvals"> | string
    entityType?: StringFilter<"Approvals"> | string
    approverId?: StringFilter<"Approvals"> | string
    status?: StringFilter<"Approvals"> | string
    comment?: StringNullableFilter<"Approvals"> | string | null
    updatedAt?: DateTimeFilter<"Approvals"> | Date | string
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type ApprovalsOrderByWithRelationInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    Users?: UsersOrderByWithRelationInput
  }

  export type ApprovalsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApprovalsWhereInput | ApprovalsWhereInput[]
    OR?: ApprovalsWhereInput[]
    NOT?: ApprovalsWhereInput | ApprovalsWhereInput[]
    entityId?: StringFilter<"Approvals"> | string
    entityType?: StringFilter<"Approvals"> | string
    approverId?: StringFilter<"Approvals"> | string
    status?: StringFilter<"Approvals"> | string
    comment?: StringNullableFilter<"Approvals"> | string | null
    updatedAt?: DateTimeFilter<"Approvals"> | Date | string
    Users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type ApprovalsOrderByWithAggregationInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: ApprovalsCountOrderByAggregateInput
    _max?: ApprovalsMaxOrderByAggregateInput
    _min?: ApprovalsMinOrderByAggregateInput
  }

  export type ApprovalsScalarWhereWithAggregatesInput = {
    AND?: ApprovalsScalarWhereWithAggregatesInput | ApprovalsScalarWhereWithAggregatesInput[]
    OR?: ApprovalsScalarWhereWithAggregatesInput[]
    NOT?: ApprovalsScalarWhereWithAggregatesInput | ApprovalsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Approvals"> | string
    entityId?: StringWithAggregatesFilter<"Approvals"> | string
    entityType?: StringWithAggregatesFilter<"Approvals"> | string
    approverId?: StringWithAggregatesFilter<"Approvals"> | string
    status?: StringWithAggregatesFilter<"Approvals"> | string
    comment?: StringNullableWithAggregatesFilter<"Approvals"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"Approvals"> | Date | string
  }

  export type AuditLogsWhereInput = {
    AND?: AuditLogsWhereInput | AuditLogsWhereInput[]
    OR?: AuditLogsWhereInput[]
    NOT?: AuditLogsWhereInput | AuditLogsWhereInput[]
    id?: StringFilter<"AuditLogs"> | string
    userId?: StringNullableFilter<"AuditLogs"> | string | null
    actionType?: StringFilter<"AuditLogs"> | string
    entityType?: StringFilter<"AuditLogs"> | string
    entityId?: StringFilter<"AuditLogs"> | string
    description?: StringFilter<"AuditLogs"> | string
    timestamp?: DateTimeFilter<"AuditLogs"> | Date | string
    Users?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }

  export type AuditLogsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    actionType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    Users?: UsersOrderByWithRelationInput
  }

  export type AuditLogsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogsWhereInput | AuditLogsWhereInput[]
    OR?: AuditLogsWhereInput[]
    NOT?: AuditLogsWhereInput | AuditLogsWhereInput[]
    userId?: StringNullableFilter<"AuditLogs"> | string | null
    actionType?: StringFilter<"AuditLogs"> | string
    entityType?: StringFilter<"AuditLogs"> | string
    entityId?: StringFilter<"AuditLogs"> | string
    description?: StringFilter<"AuditLogs"> | string
    timestamp?: DateTimeFilter<"AuditLogs"> | Date | string
    Users?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }, "id">

  export type AuditLogsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    actionType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
    _count?: AuditLogsCountOrderByAggregateInput
    _max?: AuditLogsMaxOrderByAggregateInput
    _min?: AuditLogsMinOrderByAggregateInput
  }

  export type AuditLogsScalarWhereWithAggregatesInput = {
    AND?: AuditLogsScalarWhereWithAggregatesInput | AuditLogsScalarWhereWithAggregatesInput[]
    OR?: AuditLogsScalarWhereWithAggregatesInput[]
    NOT?: AuditLogsScalarWhereWithAggregatesInput | AuditLogsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLogs"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLogs"> | string | null
    actionType?: StringWithAggregatesFilter<"AuditLogs"> | string
    entityType?: StringWithAggregatesFilter<"AuditLogs"> | string
    entityId?: StringWithAggregatesFilter<"AuditLogs"> | string
    description?: StringWithAggregatesFilter<"AuditLogs"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLogs"> | Date | string
  }

  export type LookupsWhereInput = {
    AND?: LookupsWhereInput | LookupsWhereInput[]
    OR?: LookupsWhereInput[]
    NOT?: LookupsWhereInput | LookupsWhereInput[]
    id?: StringFilter<"Lookups"> | string
    category?: StringFilter<"Lookups"> | string
    code?: StringFilter<"Lookups"> | string
    label?: StringFilter<"Lookups"> | string
    isActive?: BoolFilter<"Lookups"> | boolean
    sortOrder?: IntNullableFilter<"Lookups"> | number | null
  }

  export type LookupsOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    code?: SortOrder
    label?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrderInput | SortOrder
  }

  export type LookupsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LookupsWhereInput | LookupsWhereInput[]
    OR?: LookupsWhereInput[]
    NOT?: LookupsWhereInput | LookupsWhereInput[]
    category?: StringFilter<"Lookups"> | string
    code?: StringFilter<"Lookups"> | string
    label?: StringFilter<"Lookups"> | string
    isActive?: BoolFilter<"Lookups"> | boolean
    sortOrder?: IntNullableFilter<"Lookups"> | number | null
  }, "id">

  export type LookupsOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    code?: SortOrder
    label?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrderInput | SortOrder
    _count?: LookupsCountOrderByAggregateInput
    _avg?: LookupsAvgOrderByAggregateInput
    _max?: LookupsMaxOrderByAggregateInput
    _min?: LookupsMinOrderByAggregateInput
    _sum?: LookupsSumOrderByAggregateInput
  }

  export type LookupsScalarWhereWithAggregatesInput = {
    AND?: LookupsScalarWhereWithAggregatesInput | LookupsScalarWhereWithAggregatesInput[]
    OR?: LookupsScalarWhereWithAggregatesInput[]
    NOT?: LookupsScalarWhereWithAggregatesInput | LookupsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lookups"> | string
    category?: StringWithAggregatesFilter<"Lookups"> | string
    code?: StringWithAggregatesFilter<"Lookups"> | string
    label?: StringWithAggregatesFilter<"Lookups"> | string
    isActive?: BoolWithAggregatesFilter<"Lookups"> | boolean
    sortOrder?: IntNullableWithAggregatesFilter<"Lookups"> | number | null
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    fullName?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    Activities?: ActivitiesListRelationFilter
    BudgetAllocations?: BudgetAllocationsListRelationFilter
    Budgets?: BudgetsListRelationFilter
    CostSplits?: CostSplitsListRelationFilter
    Expenses?: ExpensesListRelationFilter
    Projects?: ProjectsListRelationFilter
    Managers?: ManagersListRelationFilter
    TravelRequests?: TravelRequestsListRelationFilter
    Notifications?: NotificationsListRelationFilter
    Approvals?: ApprovalsListRelationFilter
    AuditLogs?: AuditLogsListRelationFilter
    roles?: RolesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    Activities?: ActivitiesOrderByRelationAggregateInput
    BudgetAllocations?: BudgetAllocationsOrderByRelationAggregateInput
    Budgets?: BudgetsOrderByRelationAggregateInput
    CostSplits?: CostSplitsOrderByRelationAggregateInput
    Expenses?: ExpensesOrderByRelationAggregateInput
    Projects?: ProjectsOrderByRelationAggregateInput
    Managers?: ManagersOrderByRelationAggregateInput
    TravelRequests?: TravelRequestsOrderByRelationAggregateInput
    Notifications?: NotificationsOrderByRelationAggregateInput
    Approvals?: ApprovalsOrderByRelationAggregateInput
    AuditLogs?: AuditLogsOrderByRelationAggregateInput
    roles?: rolesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    fullName?: StringFilter<"Users"> | string
    Activities?: ActivitiesListRelationFilter
    BudgetAllocations?: BudgetAllocationsListRelationFilter
    Budgets?: BudgetsListRelationFilter
    CostSplits?: CostSplitsListRelationFilter
    Expenses?: ExpensesListRelationFilter
    Projects?: ProjectsListRelationFilter
    Managers?: ManagersListRelationFilter
    TravelRequests?: TravelRequestsListRelationFilter
    Notifications?: NotificationsListRelationFilter
    Approvals?: ApprovalsListRelationFilter
    AuditLogs?: AuditLogsListRelationFilter
    roles?: RolesListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    fullName?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
  }

  export type rolesWhereInput = {
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    id?: StringFilter<"roles"> | string
    name?: StringFilter<"roles"> | string
    Users?: UsersListRelationFilter
    RoleRates?: RoleRatesListRelationFilter
    Managers?: ManagersListRelationFilter
  }

  export type rolesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Users?: UsersOrderByRelationAggregateInput
    RoleRates?: RoleRatesOrderByRelationAggregateInput
    Managers?: ManagersOrderByRelationAggregateInput
  }

  export type rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    name?: StringFilter<"roles"> | string
    Users?: UsersListRelationFilter
    RoleRates?: RoleRatesListRelationFilter
    Managers?: ManagersListRelationFilter
  }, "id">

  export type rolesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: rolesCountOrderByAggregateInput
    _max?: rolesMaxOrderByAggregateInput
    _min?: rolesMinOrderByAggregateInput
  }

  export type rolesScalarWhereWithAggregatesInput = {
    AND?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    OR?: rolesScalarWhereWithAggregatesInput[]
    NOT?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"roles"> | string
    name?: StringWithAggregatesFilter<"roles"> | string
  }

  export type ManagersWhereInput = {
    AND?: ManagersWhereInput | ManagersWhereInput[]
    OR?: ManagersWhereInput[]
    NOT?: ManagersWhereInput | ManagersWhereInput[]
    id?: StringFilter<"Managers"> | string
    name?: StringFilter<"Managers"> | string
    Users?: UsersListRelationFilter
    roles?: RolesListRelationFilter
    Projects?: ProjectsListRelationFilter
  }

  export type ManagersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Users?: UsersOrderByRelationAggregateInput
    roles?: rolesOrderByRelationAggregateInput
    Projects?: ProjectsOrderByRelationAggregateInput
  }

  export type ManagersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ManagersWhereInput | ManagersWhereInput[]
    OR?: ManagersWhereInput[]
    NOT?: ManagersWhereInput | ManagersWhereInput[]
    name?: StringFilter<"Managers"> | string
    Users?: UsersListRelationFilter
    roles?: RolesListRelationFilter
    Projects?: ProjectsListRelationFilter
  }, "id">

  export type ManagersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ManagersCountOrderByAggregateInput
    _max?: ManagersMaxOrderByAggregateInput
    _min?: ManagersMinOrderByAggregateInput
  }

  export type ManagersScalarWhereWithAggregatesInput = {
    AND?: ManagersScalarWhereWithAggregatesInput | ManagersScalarWhereWithAggregatesInput[]
    OR?: ManagersScalarWhereWithAggregatesInput[]
    NOT?: ManagersScalarWhereWithAggregatesInput | ManagersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Managers"> | string
    name?: StringWithAggregatesFilter<"Managers"> | string
  }

  export type ActivitiesCreateInput = {
    id?: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
    Projects: ProjectsCreateNestedOneWithoutActivitiesInput
    Users: UsersCreateNestedOneWithoutActivitiesInput
  }

  export type ActivitiesUncheckedCreateInput = {
    id?: string
    projectId: string
    userId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type ActivitiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    Projects?: ProjectsUpdateOneRequiredWithoutActivitiesNestedInput
    Users?: UsersUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivitiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivitiesCreateManyInput = {
    id?: string
    projectId: string
    userId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type ActivitiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivitiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BudgetAllocationsCreateInput = {
    id?: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
    Budgets: BudgetsCreateNestedOneWithoutBudgetAllocationsInput
    Users: UsersCreateNestedOneWithoutBudgetAllocationsInput
  }

  export type BudgetAllocationsUncheckedCreateInput = {
    id?: string
    budgetId: string
    userId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Budgets?: BudgetsUpdateOneRequiredWithoutBudgetAllocationsNestedInput
    Users?: UsersUpdateOneRequiredWithoutBudgetAllocationsNestedInput
  }

  export type BudgetAllocationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsCreateManyInput = {
    id?: string
    budgetId: string
    userId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetsCreateInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutBudgetsInput
    Users: UsersCreateNestedOneWithoutBudgetsInput
    Projects: ProjectsCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetsUncheckedCreateInput = {
    id?: string
    projectId: string
    itemType: string
    description?: string | null
    status?: string | null
    createdById: string
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutBudgetsInput
  }

  export type BudgetsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutBudgetsNestedInput
    Users?: UsersUpdateOneRequiredWithoutBudgetsNestedInput
    Projects?: ProjectsUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutBudgetsNestedInput
  }

  export type BudgetsCreateManyInput = {
    id?: string
    projectId: string
    itemType: string
    description?: string | null
    status?: string | null
    createdById: string
  }

  export type BudgetsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BudgetsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsCreateInput = {
    id: string
    name: string
    Projects?: ProjectsCreateNestedManyWithoutClientsInput
  }

  export type ClientsUncheckedCreateInput = {
    id: string
    name: string
    Projects?: ProjectsUncheckedCreateNestedManyWithoutClientsInput
  }

  export type ClientsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Projects?: ProjectsUpdateManyWithoutClientsNestedInput
  }

  export type ClientsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Projects?: ProjectsUncheckedUpdateManyWithoutClientsNestedInput
  }

  export type ClientsCreateManyInput = {
    id: string
    name: string
  }

  export type ClientsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CostSplitsCreateInput = {
    id?: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    Users?: UsersCreateNestedOneWithoutCostSplitsInput
    Projects: ProjectsCreateNestedOneWithoutCostSplitsInput
  }

  export type CostSplitsUncheckedCreateInput = {
    id?: string
    projectId: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    approvedBy?: string | null
  }

  export type CostSplitsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateOneWithoutCostSplitsNestedInput
    Projects?: ProjectsUpdateOneRequiredWithoutCostSplitsNestedInput
  }

  export type CostSplitsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CostSplitsCreateManyInput = {
    id?: string
    projectId: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    approvedBy?: string | null
  }

  export type CostSplitsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
  }

  export type CostSplitsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExchangeRatesCreateInput = {
    id?: string
    currency: string
    rate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string | null
  }

  export type ExchangeRatesUncheckedCreateInput = {
    id?: string
    currency: string
    rate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string | null
  }

  export type ExchangeRatesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExchangeRatesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExchangeRatesCreateManyInput = {
    id?: string
    currency: string
    rate: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string | null
  }

  export type ExchangeRatesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExchangeRatesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ExpensesCreateInput = {
    id?: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
    Projects: ProjectsCreateNestedOneWithoutExpensesInput
    Users: UsersCreateNestedOneWithoutExpensesInput
  }

  export type ExpensesUncheckedCreateInput = {
    id?: string
    projectId: string
    submittedBy: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type ExpensesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Projects?: ProjectsUpdateOneRequiredWithoutExpensesNestedInput
    Users?: UsersUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpensesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpensesCreateManyInput = {
    id?: string
    projectId: string
    submittedBy: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type ExpensesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpensesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsCreateInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsCreateManyInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleRatesCreateInput = {
    id?: string
    rate: Decimal | DecimalJsLike | number | string
    validFrom: Date | string
    roles?: rolesCreateNestedManyWithoutRoleRatesInput
  }

  export type RoleRatesUncheckedCreateInput = {
    id?: string
    rate: Decimal | DecimalJsLike | number | string
    validFrom: Date | string
    roles?: rolesUncheckedCreateNestedManyWithoutRoleRatesInput
  }

  export type RoleRatesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: rolesUpdateManyWithoutRoleRatesNestedInput
  }

  export type RoleRatesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: rolesUncheckedUpdateManyWithoutRoleRatesNestedInput
  }

  export type RoleRatesCreateManyInput = {
    id?: string
    rate: Decimal | DecimalJsLike | number | string
    validFrom: Date | string
  }

  export type RoleRatesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleRatesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sysdiagramsCreateInput = {
    name: string
    principal_id: number
    version?: number | null
    definition?: Uint8Array | null
  }

  export type sysdiagramsUncheckedCreateInput = {
    name: string
    principal_id: number
    diagram_id?: number
    version?: number | null
    definition?: Uint8Array | null
  }

  export type sysdiagramsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    principal_id?: IntFieldUpdateOperationsInput | number
    version?: NullableIntFieldUpdateOperationsInput | number | null
    definition?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type sysdiagramsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    principal_id?: IntFieldUpdateOperationsInput | number
    diagram_id?: IntFieldUpdateOperationsInput | number
    version?: NullableIntFieldUpdateOperationsInput | number | null
    definition?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type sysdiagramsCreateManyInput = {
    name: string
    principal_id: number
    version?: number | null
    definition?: Uint8Array | null
  }

  export type sysdiagramsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    principal_id?: IntFieldUpdateOperationsInput | number
    version?: NullableIntFieldUpdateOperationsInput | number | null
    definition?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type sysdiagramsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    principal_id?: IntFieldUpdateOperationsInput | number
    diagram_id?: IntFieldUpdateOperationsInput | number
    version?: NullableIntFieldUpdateOperationsInput | number | null
    definition?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type TravelRequestsCreateInput = {
    id?: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
    Projects: ProjectsCreateNestedOneWithoutTravelRequestsInput
    Users: UsersCreateNestedOneWithoutTravelRequestsInput
  }

  export type TravelRequestsUncheckedCreateInput = {
    id?: string
    projectId: string
    requesterId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type TravelRequestsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    Projects?: ProjectsUpdateOneRequiredWithoutTravelRequestsNestedInput
    Users?: UsersUpdateOneRequiredWithoutTravelRequestsNestedInput
  }

  export type TravelRequestsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelRequestsCreateManyInput = {
    id?: string
    projectId: string
    requesterId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type TravelRequestsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelRequestsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsCreateInput = {
    id?: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    Users: UsersCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationsUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsCreateManyInput = {
    id?: string
    userId: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsCreateInput = {
    id?: string
    entityId: string
    entityType: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
    Users: UsersCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalsUncheckedCreateInput = {
    id?: string
    entityId: string
    entityType: string
    approverId: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
  }

  export type ApprovalsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsCreateManyInput = {
    id?: string
    entityId: string
    entityType: string
    approverId: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
  }

  export type ApprovalsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsCreateInput = {
    id?: string
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
    Users?: UsersCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogsUncheckedCreateInput = {
    id?: string
    userId?: string | null
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
  }

  export type AuditLogsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsCreateManyInput = {
    id?: string
    userId?: string | null
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
  }

  export type AuditLogsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LookupsCreateInput = {
    id?: string
    category: string
    code: string
    label: string
    isActive?: boolean
    sortOrder?: number | null
  }

  export type LookupsUncheckedCreateInput = {
    id?: string
    category: string
    code: string
    label: string
    isActive?: boolean
    sortOrder?: number | null
  }

  export type LookupsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LookupsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LookupsCreateManyInput = {
    id?: string
    category: string
    code: string
    label: string
    isActive?: boolean
    sortOrder?: number | null
  }

  export type LookupsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LookupsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersCreateInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    fullName: string
    email: string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type rolesCreateInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutRolesInput
    RoleRates?: RoleRatesCreateNestedManyWithoutRolesInput
    Managers?: ManagersCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutRolesInput
    RoleRates?: RoleRatesUncheckedCreateNestedManyWithoutRolesInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutRolesNestedInput
    RoleRates?: RoleRatesUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutRolesNestedInput
    RoleRates?: RoleRatesUncheckedUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesCreateManyInput = {
    id: string
    name: string
  }

  export type rolesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ManagersCreateInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutManagersInput
    roles?: rolesCreateNestedManyWithoutManagersInput
    Projects?: ProjectsCreateNestedManyWithoutManagersInput
  }

  export type ManagersUncheckedCreateInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutManagersInput
    roles?: rolesUncheckedCreateNestedManyWithoutManagersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutManagersInput
  }

  export type ManagersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutManagersNestedInput
    roles?: rolesUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutManagersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutManagersNestedInput
  }

  export type ManagersCreateManyInput = {
    id: string
    name: string
  }

  export type ManagersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ManagersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ProjectsScalarRelationFilter = {
    is?: ProjectsWhereInput
    isNot?: ProjectsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivitiesCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
  }

  export type ActivitiesAvgOrderByAggregateInput = {
    hours?: SortOrder
    progress?: SortOrder
  }

  export type ActivitiesMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
  }

  export type ActivitiesMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    hours?: SortOrder
    progress?: SortOrder
    notes?: SortOrder
  }

  export type ActivitiesSumOrderByAggregateInput = {
    hours?: SortOrder
    progress?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type BudgetsScalarRelationFilter = {
    is?: BudgetsWhereInput
    isNot?: BudgetsWhereInput
  }

  export type BudgetAllocationsCountOrderByAggregateInput = {
    id?: SortOrder
    budgetId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type BudgetAllocationsAvgOrderByAggregateInput = {
    hours?: SortOrder
    rate?: SortOrder
  }

  export type BudgetAllocationsMaxOrderByAggregateInput = {
    id?: SortOrder
    budgetId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type BudgetAllocationsMinOrderByAggregateInput = {
    id?: SortOrder
    budgetId?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    rate?: SortOrder
  }

  export type BudgetAllocationsSumOrderByAggregateInput = {
    hours?: SortOrder
    rate?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BudgetAllocationsListRelationFilter = {
    every?: BudgetAllocationsWhereInput
    some?: BudgetAllocationsWhereInput
    none?: BudgetAllocationsWhereInput
  }

  export type BudgetAllocationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetsCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    itemType?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type BudgetsMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    itemType?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type BudgetsMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    itemType?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdById?: SortOrder
  }

  export type ProjectsListRelationFilter = {
    every?: ProjectsWhereInput
    some?: ProjectsWhereInput
    none?: ProjectsWhereInput
  }

  export type ProjectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClientsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ClientsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type UsersNullableScalarRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type CostSplitsCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    cost?: SortOrder
    splitWith?: SortOrder
    approvedBy?: SortOrder
  }

  export type CostSplitsAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type CostSplitsMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    cost?: SortOrder
    splitWith?: SortOrder
    approvedBy?: SortOrder
  }

  export type CostSplitsMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    cost?: SortOrder
    splitWith?: SortOrder
    approvedBy?: SortOrder
  }

  export type CostSplitsSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ExchangeRatesCountOrderByAggregateInput = {
    id?: SortOrder
    currency?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
  }

  export type ExchangeRatesAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type ExchangeRatesMaxOrderByAggregateInput = {
    id?: SortOrder
    currency?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
  }

  export type ExchangeRatesMinOrderByAggregateInput = {
    id?: SortOrder
    currency?: SortOrder
    rate?: SortOrder
    createdAt?: SortOrder
  }

  export type ExchangeRatesSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ExpensesCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    submittedBy?: SortOrder
    expenseType?: SortOrder
    isBillable?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    expenseDate?: SortOrder
  }

  export type ExpensesAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ExpensesMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    submittedBy?: SortOrder
    expenseType?: SortOrder
    isBillable?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    expenseDate?: SortOrder
  }

  export type ExpensesMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    submittedBy?: SortOrder
    expenseType?: SortOrder
    isBillable?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    expenseDate?: SortOrder
  }

  export type ExpensesSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ActivitiesListRelationFilter = {
    every?: ActivitiesWhereInput
    some?: ActivitiesWhereInput
    none?: ActivitiesWhereInput
  }

  export type BudgetsListRelationFilter = {
    every?: BudgetsWhereInput
    some?: BudgetsWhereInput
    none?: BudgetsWhereInput
  }

  export type CostSplitsListRelationFilter = {
    every?: CostSplitsWhereInput
    some?: CostSplitsWhereInput
    none?: CostSplitsWhereInput
  }

  export type ExpensesListRelationFilter = {
    every?: ExpensesWhereInput
    some?: ExpensesWhereInput
    none?: ExpensesWhereInput
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type ClientsNullableScalarRelationFilter = {
    is?: ClientsWhereInput | null
    isNot?: ClientsWhereInput | null
  }

  export type TravelRequestsListRelationFilter = {
    every?: TravelRequestsWhereInput
    some?: TravelRequestsWhereInput
    none?: TravelRequestsWhereInput
  }

  export type ManagersListRelationFilter = {
    every?: ManagersWhereInput
    some?: ManagersWhereInput
    none?: ManagersWhereInput
  }

  export type ActivitiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CostSplitsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpensesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TravelRequestsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ManagersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    billingType?: SortOrder
    billingRateTimePeriod?: SortOrder
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectsAvgOrderByAggregateInput = {
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
  }

  export type ProjectsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    billingType?: SortOrder
    billingRateTimePeriod?: SortOrder
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    billingType?: SortOrder
    billingRateTimePeriod?: SortOrder
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectsSumOrderByAggregateInput = {
    totalContract?: SortOrder
    approvedBudget?: SortOrder
    allocatedBudget?: SortOrder
  }

  export type RolesListRelationFilter = {
    every?: rolesWhereInput
    some?: rolesWhereInput
    none?: rolesWhereInput
  }

  export type rolesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleRatesCountOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    validFrom?: SortOrder
  }

  export type RoleRatesAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type RoleRatesMaxOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    validFrom?: SortOrder
  }

  export type RoleRatesMinOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    validFrom?: SortOrder
  }

  export type RoleRatesSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type sysdiagramsPrincipal_idNameCompoundUniqueInput = {
    principal_id: number
    name: string
  }

  export type sysdiagramsCountOrderByAggregateInput = {
    name?: SortOrder
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrder
    definition?: SortOrder
  }

  export type sysdiagramsAvgOrderByAggregateInput = {
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrder
  }

  export type sysdiagramsMaxOrderByAggregateInput = {
    name?: SortOrder
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrder
    definition?: SortOrder
  }

  export type sysdiagramsMinOrderByAggregateInput = {
    name?: SortOrder
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrder
    definition?: SortOrder
  }

  export type sysdiagramsSumOrderByAggregateInput = {
    principal_id?: SortOrder
    diagram_id?: SortOrder
    version?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type TravelRequestsCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    requesterId?: SortOrder
    destination?: SortOrder
    purpose?: SortOrder
    cost?: SortOrder
    status?: SortOrder
  }

  export type TravelRequestsAvgOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type TravelRequestsMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    requesterId?: SortOrder
    destination?: SortOrder
    purpose?: SortOrder
    cost?: SortOrder
    status?: SortOrder
  }

  export type TravelRequestsMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    requesterId?: SortOrder
    destination?: SortOrder
    purpose?: SortOrder
    cost?: SortOrder
    status?: SortOrder
  }

  export type TravelRequestsSumOrderByAggregateInput = {
    cost?: SortOrder
  }

  export type NotificationsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalsCountOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApprovalsMaxOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApprovalsMinOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    comment?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuditLogsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    actionType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    description?: SortOrder
    timestamp?: SortOrder
  }

  export type LookupsCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    code?: SortOrder
    label?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
  }

  export type LookupsAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type LookupsMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    code?: SortOrder
    label?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
  }

  export type LookupsMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    code?: SortOrder
    label?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
  }

  export type LookupsSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type NotificationsListRelationFilter = {
    every?: NotificationsWhereInput
    some?: NotificationsWhereInput
    none?: NotificationsWhereInput
  }

  export type ApprovalsListRelationFilter = {
    every?: ApprovalsWhereInput
    some?: ApprovalsWhereInput
    none?: ApprovalsWhereInput
  }

  export type AuditLogsListRelationFilter = {
    every?: AuditLogsWhereInput
    some?: AuditLogsWhereInput
    none?: AuditLogsWhereInput
  }

  export type NotificationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApprovalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
  }

  export type RoleRatesListRelationFilter = {
    every?: RoleRatesWhereInput
    some?: RoleRatesWhereInput
    none?: RoleRatesWhereInput
  }

  export type RoleRatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type rolesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ManagersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ManagersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ManagersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProjectsCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ProjectsCreateWithoutActivitiesInput, ProjectsUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutActivitiesInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UsersCreateWithoutActivitiesInput, UsersUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutActivitiesInput
    connect?: UsersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProjectsUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<ProjectsCreateWithoutActivitiesInput, ProjectsUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutActivitiesInput
    upsert?: ProjectsUpsertWithoutActivitiesInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutActivitiesInput, ProjectsUpdateWithoutActivitiesInput>, ProjectsUncheckedUpdateWithoutActivitiesInput>
  }

  export type UsersUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UsersCreateWithoutActivitiesInput, UsersUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutActivitiesInput
    upsert?: UsersUpsertWithoutActivitiesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutActivitiesInput, UsersUpdateWithoutActivitiesInput>, UsersUncheckedUpdateWithoutActivitiesInput>
  }

  export type BudgetsCreateNestedOneWithoutBudgetAllocationsInput = {
    create?: XOR<BudgetsCreateWithoutBudgetAllocationsInput, BudgetsUncheckedCreateWithoutBudgetAllocationsInput>
    connectOrCreate?: BudgetsCreateOrConnectWithoutBudgetAllocationsInput
    connect?: BudgetsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutBudgetAllocationsInput = {
    create?: XOR<UsersCreateWithoutBudgetAllocationsInput, UsersUncheckedCreateWithoutBudgetAllocationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBudgetAllocationsInput
    connect?: UsersWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type BudgetsUpdateOneRequiredWithoutBudgetAllocationsNestedInput = {
    create?: XOR<BudgetsCreateWithoutBudgetAllocationsInput, BudgetsUncheckedCreateWithoutBudgetAllocationsInput>
    connectOrCreate?: BudgetsCreateOrConnectWithoutBudgetAllocationsInput
    upsert?: BudgetsUpsertWithoutBudgetAllocationsInput
    connect?: BudgetsWhereUniqueInput
    update?: XOR<XOR<BudgetsUpdateToOneWithWhereWithoutBudgetAllocationsInput, BudgetsUpdateWithoutBudgetAllocationsInput>, BudgetsUncheckedUpdateWithoutBudgetAllocationsInput>
  }

  export type UsersUpdateOneRequiredWithoutBudgetAllocationsNestedInput = {
    create?: XOR<UsersCreateWithoutBudgetAllocationsInput, UsersUncheckedCreateWithoutBudgetAllocationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBudgetAllocationsInput
    upsert?: UsersUpsertWithoutBudgetAllocationsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBudgetAllocationsInput, UsersUpdateWithoutBudgetAllocationsInput>, UsersUncheckedUpdateWithoutBudgetAllocationsInput>
  }

  export type BudgetAllocationsCreateNestedManyWithoutBudgetsInput = {
    create?: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput> | BudgetAllocationsCreateWithoutBudgetsInput[] | BudgetAllocationsUncheckedCreateWithoutBudgetsInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutBudgetsInput | BudgetAllocationsCreateOrConnectWithoutBudgetsInput[]
    createMany?: BudgetAllocationsCreateManyBudgetsInputEnvelope
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
  }

  export type UsersCreateNestedOneWithoutBudgetsInput = {
    create?: XOR<UsersCreateWithoutBudgetsInput, UsersUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBudgetsInput
    connect?: UsersWhereUniqueInput
  }

  export type ProjectsCreateNestedOneWithoutBudgetsInput = {
    create?: XOR<ProjectsCreateWithoutBudgetsInput, ProjectsUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutBudgetsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type BudgetAllocationsUncheckedCreateNestedManyWithoutBudgetsInput = {
    create?: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput> | BudgetAllocationsCreateWithoutBudgetsInput[] | BudgetAllocationsUncheckedCreateWithoutBudgetsInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutBudgetsInput | BudgetAllocationsCreateOrConnectWithoutBudgetsInput[]
    createMany?: BudgetAllocationsCreateManyBudgetsInputEnvelope
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
  }

  export type BudgetAllocationsUpdateManyWithoutBudgetsNestedInput = {
    create?: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput> | BudgetAllocationsCreateWithoutBudgetsInput[] | BudgetAllocationsUncheckedCreateWithoutBudgetsInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutBudgetsInput | BudgetAllocationsCreateOrConnectWithoutBudgetsInput[]
    upsert?: BudgetAllocationsUpsertWithWhereUniqueWithoutBudgetsInput | BudgetAllocationsUpsertWithWhereUniqueWithoutBudgetsInput[]
    createMany?: BudgetAllocationsCreateManyBudgetsInputEnvelope
    set?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    disconnect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    delete?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    update?: BudgetAllocationsUpdateWithWhereUniqueWithoutBudgetsInput | BudgetAllocationsUpdateWithWhereUniqueWithoutBudgetsInput[]
    updateMany?: BudgetAllocationsUpdateManyWithWhereWithoutBudgetsInput | BudgetAllocationsUpdateManyWithWhereWithoutBudgetsInput[]
    deleteMany?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
  }

  export type UsersUpdateOneRequiredWithoutBudgetsNestedInput = {
    create?: XOR<UsersCreateWithoutBudgetsInput, UsersUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBudgetsInput
    upsert?: UsersUpsertWithoutBudgetsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBudgetsInput, UsersUpdateWithoutBudgetsInput>, UsersUncheckedUpdateWithoutBudgetsInput>
  }

  export type ProjectsUpdateOneRequiredWithoutBudgetsNestedInput = {
    create?: XOR<ProjectsCreateWithoutBudgetsInput, ProjectsUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutBudgetsInput
    upsert?: ProjectsUpsertWithoutBudgetsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutBudgetsInput, ProjectsUpdateWithoutBudgetsInput>, ProjectsUncheckedUpdateWithoutBudgetsInput>
  }

  export type BudgetAllocationsUncheckedUpdateManyWithoutBudgetsNestedInput = {
    create?: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput> | BudgetAllocationsCreateWithoutBudgetsInput[] | BudgetAllocationsUncheckedCreateWithoutBudgetsInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutBudgetsInput | BudgetAllocationsCreateOrConnectWithoutBudgetsInput[]
    upsert?: BudgetAllocationsUpsertWithWhereUniqueWithoutBudgetsInput | BudgetAllocationsUpsertWithWhereUniqueWithoutBudgetsInput[]
    createMany?: BudgetAllocationsCreateManyBudgetsInputEnvelope
    set?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    disconnect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    delete?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    update?: BudgetAllocationsUpdateWithWhereUniqueWithoutBudgetsInput | BudgetAllocationsUpdateWithWhereUniqueWithoutBudgetsInput[]
    updateMany?: BudgetAllocationsUpdateManyWithWhereWithoutBudgetsInput | BudgetAllocationsUpdateManyWithWhereWithoutBudgetsInput[]
    deleteMany?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
  }

  export type ProjectsCreateNestedManyWithoutClientsInput = {
    create?: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput> | ProjectsCreateWithoutClientsInput[] | ProjectsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutClientsInput | ProjectsCreateOrConnectWithoutClientsInput[]
    createMany?: ProjectsCreateManyClientsInputEnvelope
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutClientsInput = {
    create?: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput> | ProjectsCreateWithoutClientsInput[] | ProjectsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutClientsInput | ProjectsCreateOrConnectWithoutClientsInput[]
    createMany?: ProjectsCreateManyClientsInputEnvelope
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ProjectsUpdateManyWithoutClientsNestedInput = {
    create?: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput> | ProjectsCreateWithoutClientsInput[] | ProjectsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutClientsInput | ProjectsCreateOrConnectWithoutClientsInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutClientsInput | ProjectsUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: ProjectsCreateManyClientsInputEnvelope
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutClientsInput | ProjectsUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutClientsInput | ProjectsUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutClientsNestedInput = {
    create?: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput> | ProjectsCreateWithoutClientsInput[] | ProjectsUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutClientsInput | ProjectsCreateOrConnectWithoutClientsInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutClientsInput | ProjectsUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: ProjectsCreateManyClientsInputEnvelope
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutClientsInput | ProjectsUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutClientsInput | ProjectsUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutCostSplitsInput = {
    create?: XOR<UsersCreateWithoutCostSplitsInput, UsersUncheckedCreateWithoutCostSplitsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCostSplitsInput
    connect?: UsersWhereUniqueInput
  }

  export type ProjectsCreateNestedOneWithoutCostSplitsInput = {
    create?: XOR<ProjectsCreateWithoutCostSplitsInput, ProjectsUncheckedCreateWithoutCostSplitsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutCostSplitsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UsersUpdateOneWithoutCostSplitsNestedInput = {
    create?: XOR<UsersCreateWithoutCostSplitsInput, UsersUncheckedCreateWithoutCostSplitsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCostSplitsInput
    upsert?: UsersUpsertWithoutCostSplitsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCostSplitsInput, UsersUpdateWithoutCostSplitsInput>, UsersUncheckedUpdateWithoutCostSplitsInput>
  }

  export type ProjectsUpdateOneRequiredWithoutCostSplitsNestedInput = {
    create?: XOR<ProjectsCreateWithoutCostSplitsInput, ProjectsUncheckedCreateWithoutCostSplitsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutCostSplitsInput
    upsert?: ProjectsUpsertWithoutCostSplitsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutCostSplitsInput, ProjectsUpdateWithoutCostSplitsInput>, ProjectsUncheckedUpdateWithoutCostSplitsInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProjectsCreateNestedOneWithoutExpensesInput = {
    create?: XOR<ProjectsCreateWithoutExpensesInput, ProjectsUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutExpensesInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutExpensesInput = {
    create?: XOR<UsersCreateWithoutExpensesInput, UsersUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutExpensesInput
    connect?: UsersWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProjectsUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<ProjectsCreateWithoutExpensesInput, ProjectsUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutExpensesInput
    upsert?: ProjectsUpsertWithoutExpensesInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutExpensesInput, ProjectsUpdateWithoutExpensesInput>, ProjectsUncheckedUpdateWithoutExpensesInput>
  }

  export type UsersUpdateOneRequiredWithoutExpensesNestedInput = {
    create?: XOR<UsersCreateWithoutExpensesInput, UsersUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutExpensesInput
    upsert?: UsersUpsertWithoutExpensesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutExpensesInput, UsersUpdateWithoutExpensesInput>, UsersUncheckedUpdateWithoutExpensesInput>
  }

  export type ActivitiesCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput> | ActivitiesCreateWithoutProjectsInput[] | ActivitiesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutProjectsInput | ActivitiesCreateOrConnectWithoutProjectsInput[]
    createMany?: ActivitiesCreateManyProjectsInputEnvelope
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
  }

  export type BudgetsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput> | BudgetsCreateWithoutProjectsInput[] | BudgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutProjectsInput | BudgetsCreateOrConnectWithoutProjectsInput[]
    createMany?: BudgetsCreateManyProjectsInputEnvelope
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
  }

  export type CostSplitsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput> | CostSplitsCreateWithoutProjectsInput[] | CostSplitsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutProjectsInput | CostSplitsCreateOrConnectWithoutProjectsInput[]
    createMany?: CostSplitsCreateManyProjectsInputEnvelope
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
  }

  export type ExpensesCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput> | ExpensesCreateWithoutProjectsInput[] | ExpensesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutProjectsInput | ExpensesCreateOrConnectWithoutProjectsInput[]
    createMany?: ExpensesCreateManyProjectsInputEnvelope
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput> | UsersCreateWithoutProjectsInput[] | UsersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProjectsInput | UsersCreateOrConnectWithoutProjectsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type ClientsCreateNestedOneWithoutProjectsInput = {
    create?: XOR<ClientsCreateWithoutProjectsInput, ClientsUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutProjectsInput
    connect?: ClientsWhereUniqueInput
  }

  export type TravelRequestsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput> | TravelRequestsCreateWithoutProjectsInput[] | TravelRequestsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutProjectsInput | TravelRequestsCreateOrConnectWithoutProjectsInput[]
    createMany?: TravelRequestsCreateManyProjectsInputEnvelope
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
  }

  export type ManagersCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput> | ManagersCreateWithoutProjectsInput[] | ManagersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutProjectsInput | ManagersCreateOrConnectWithoutProjectsInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type ActivitiesUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput> | ActivitiesCreateWithoutProjectsInput[] | ActivitiesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutProjectsInput | ActivitiesCreateOrConnectWithoutProjectsInput[]
    createMany?: ActivitiesCreateManyProjectsInputEnvelope
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
  }

  export type BudgetsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput> | BudgetsCreateWithoutProjectsInput[] | BudgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutProjectsInput | BudgetsCreateOrConnectWithoutProjectsInput[]
    createMany?: BudgetsCreateManyProjectsInputEnvelope
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
  }

  export type CostSplitsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput> | CostSplitsCreateWithoutProjectsInput[] | CostSplitsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutProjectsInput | CostSplitsCreateOrConnectWithoutProjectsInput[]
    createMany?: CostSplitsCreateManyProjectsInputEnvelope
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
  }

  export type ExpensesUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput> | ExpensesCreateWithoutProjectsInput[] | ExpensesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutProjectsInput | ExpensesCreateOrConnectWithoutProjectsInput[]
    createMany?: ExpensesCreateManyProjectsInputEnvelope
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput> | UsersCreateWithoutProjectsInput[] | UsersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProjectsInput | UsersCreateOrConnectWithoutProjectsInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput> | TravelRequestsCreateWithoutProjectsInput[] | TravelRequestsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutProjectsInput | TravelRequestsCreateOrConnectWithoutProjectsInput[]
    createMany?: TravelRequestsCreateManyProjectsInputEnvelope
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
  }

  export type ManagersUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput> | ManagersCreateWithoutProjectsInput[] | ManagersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutProjectsInput | ManagersCreateOrConnectWithoutProjectsInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type ActivitiesUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput> | ActivitiesCreateWithoutProjectsInput[] | ActivitiesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutProjectsInput | ActivitiesCreateOrConnectWithoutProjectsInput[]
    upsert?: ActivitiesUpsertWithWhereUniqueWithoutProjectsInput | ActivitiesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ActivitiesCreateManyProjectsInputEnvelope
    set?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    disconnect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    delete?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    update?: ActivitiesUpdateWithWhereUniqueWithoutProjectsInput | ActivitiesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ActivitiesUpdateManyWithWhereWithoutProjectsInput | ActivitiesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
  }

  export type BudgetsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput> | BudgetsCreateWithoutProjectsInput[] | BudgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutProjectsInput | BudgetsCreateOrConnectWithoutProjectsInput[]
    upsert?: BudgetsUpsertWithWhereUniqueWithoutProjectsInput | BudgetsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: BudgetsCreateManyProjectsInputEnvelope
    set?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    disconnect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    delete?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    update?: BudgetsUpdateWithWhereUniqueWithoutProjectsInput | BudgetsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: BudgetsUpdateManyWithWhereWithoutProjectsInput | BudgetsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
  }

  export type CostSplitsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput> | CostSplitsCreateWithoutProjectsInput[] | CostSplitsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutProjectsInput | CostSplitsCreateOrConnectWithoutProjectsInput[]
    upsert?: CostSplitsUpsertWithWhereUniqueWithoutProjectsInput | CostSplitsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: CostSplitsCreateManyProjectsInputEnvelope
    set?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    disconnect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    delete?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    update?: CostSplitsUpdateWithWhereUniqueWithoutProjectsInput | CostSplitsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: CostSplitsUpdateManyWithWhereWithoutProjectsInput | CostSplitsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
  }

  export type ExpensesUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput> | ExpensesCreateWithoutProjectsInput[] | ExpensesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutProjectsInput | ExpensesCreateOrConnectWithoutProjectsInput[]
    upsert?: ExpensesUpsertWithWhereUniqueWithoutProjectsInput | ExpensesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ExpensesCreateManyProjectsInputEnvelope
    set?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    disconnect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    delete?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    update?: ExpensesUpdateWithWhereUniqueWithoutProjectsInput | ExpensesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ExpensesUpdateManyWithWhereWithoutProjectsInput | ExpensesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput> | UsersCreateWithoutProjectsInput[] | UsersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProjectsInput | UsersCreateOrConnectWithoutProjectsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutProjectsInput | UsersUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutProjectsInput | UsersUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutProjectsInput | UsersUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type ClientsUpdateOneWithoutProjectsNestedInput = {
    create?: XOR<ClientsCreateWithoutProjectsInput, ClientsUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: ClientsCreateOrConnectWithoutProjectsInput
    upsert?: ClientsUpsertWithoutProjectsInput
    disconnect?: ClientsWhereInput | boolean
    delete?: ClientsWhereInput | boolean
    connect?: ClientsWhereUniqueInput
    update?: XOR<XOR<ClientsUpdateToOneWithWhereWithoutProjectsInput, ClientsUpdateWithoutProjectsInput>, ClientsUncheckedUpdateWithoutProjectsInput>
  }

  export type TravelRequestsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput> | TravelRequestsCreateWithoutProjectsInput[] | TravelRequestsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutProjectsInput | TravelRequestsCreateOrConnectWithoutProjectsInput[]
    upsert?: TravelRequestsUpsertWithWhereUniqueWithoutProjectsInput | TravelRequestsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: TravelRequestsCreateManyProjectsInputEnvelope
    set?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    disconnect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    delete?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    update?: TravelRequestsUpdateWithWhereUniqueWithoutProjectsInput | TravelRequestsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: TravelRequestsUpdateManyWithWhereWithoutProjectsInput | TravelRequestsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
  }

  export type ManagersUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput> | ManagersCreateWithoutProjectsInput[] | ManagersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutProjectsInput | ManagersCreateOrConnectWithoutProjectsInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutProjectsInput | ManagersUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutProjectsInput | ManagersUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutProjectsInput | ManagersUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput> | ActivitiesCreateWithoutProjectsInput[] | ActivitiesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutProjectsInput | ActivitiesCreateOrConnectWithoutProjectsInput[]
    upsert?: ActivitiesUpsertWithWhereUniqueWithoutProjectsInput | ActivitiesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ActivitiesCreateManyProjectsInputEnvelope
    set?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    disconnect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    delete?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    update?: ActivitiesUpdateWithWhereUniqueWithoutProjectsInput | ActivitiesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ActivitiesUpdateManyWithWhereWithoutProjectsInput | ActivitiesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
  }

  export type BudgetsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput> | BudgetsCreateWithoutProjectsInput[] | BudgetsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutProjectsInput | BudgetsCreateOrConnectWithoutProjectsInput[]
    upsert?: BudgetsUpsertWithWhereUniqueWithoutProjectsInput | BudgetsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: BudgetsCreateManyProjectsInputEnvelope
    set?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    disconnect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    delete?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    update?: BudgetsUpdateWithWhereUniqueWithoutProjectsInput | BudgetsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: BudgetsUpdateManyWithWhereWithoutProjectsInput | BudgetsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
  }

  export type CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput> | CostSplitsCreateWithoutProjectsInput[] | CostSplitsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutProjectsInput | CostSplitsCreateOrConnectWithoutProjectsInput[]
    upsert?: CostSplitsUpsertWithWhereUniqueWithoutProjectsInput | CostSplitsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: CostSplitsCreateManyProjectsInputEnvelope
    set?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    disconnect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    delete?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    update?: CostSplitsUpdateWithWhereUniqueWithoutProjectsInput | CostSplitsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: CostSplitsUpdateManyWithWhereWithoutProjectsInput | CostSplitsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
  }

  export type ExpensesUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput> | ExpensesCreateWithoutProjectsInput[] | ExpensesUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutProjectsInput | ExpensesCreateOrConnectWithoutProjectsInput[]
    upsert?: ExpensesUpsertWithWhereUniqueWithoutProjectsInput | ExpensesUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: ExpensesCreateManyProjectsInputEnvelope
    set?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    disconnect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    delete?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    update?: ExpensesUpdateWithWhereUniqueWithoutProjectsInput | ExpensesUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ExpensesUpdateManyWithWhereWithoutProjectsInput | ExpensesUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput> | UsersCreateWithoutProjectsInput[] | UsersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutProjectsInput | UsersCreateOrConnectWithoutProjectsInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutProjectsInput | UsersUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutProjectsInput | UsersUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutProjectsInput | UsersUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput> | TravelRequestsCreateWithoutProjectsInput[] | TravelRequestsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutProjectsInput | TravelRequestsCreateOrConnectWithoutProjectsInput[]
    upsert?: TravelRequestsUpsertWithWhereUniqueWithoutProjectsInput | TravelRequestsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: TravelRequestsCreateManyProjectsInputEnvelope
    set?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    disconnect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    delete?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    update?: TravelRequestsUpdateWithWhereUniqueWithoutProjectsInput | TravelRequestsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: TravelRequestsUpdateManyWithWhereWithoutProjectsInput | TravelRequestsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
  }

  export type ManagersUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput> | ManagersCreateWithoutProjectsInput[] | ManagersUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutProjectsInput | ManagersCreateOrConnectWithoutProjectsInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutProjectsInput | ManagersUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutProjectsInput | ManagersUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutProjectsInput | ManagersUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type rolesCreateNestedManyWithoutRoleRatesInput = {
    create?: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput> | rolesCreateWithoutRoleRatesInput[] | rolesUncheckedCreateWithoutRoleRatesInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutRoleRatesInput | rolesCreateOrConnectWithoutRoleRatesInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type rolesUncheckedCreateNestedManyWithoutRoleRatesInput = {
    create?: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput> | rolesCreateWithoutRoleRatesInput[] | rolesUncheckedCreateWithoutRoleRatesInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutRoleRatesInput | rolesCreateOrConnectWithoutRoleRatesInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type rolesUpdateManyWithoutRoleRatesNestedInput = {
    create?: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput> | rolesCreateWithoutRoleRatesInput[] | rolesUncheckedCreateWithoutRoleRatesInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutRoleRatesInput | rolesCreateOrConnectWithoutRoleRatesInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutRoleRatesInput | rolesUpsertWithWhereUniqueWithoutRoleRatesInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutRoleRatesInput | rolesUpdateWithWhereUniqueWithoutRoleRatesInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutRoleRatesInput | rolesUpdateManyWithWhereWithoutRoleRatesInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type rolesUncheckedUpdateManyWithoutRoleRatesNestedInput = {
    create?: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput> | rolesCreateWithoutRoleRatesInput[] | rolesUncheckedCreateWithoutRoleRatesInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutRoleRatesInput | rolesCreateOrConnectWithoutRoleRatesInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutRoleRatesInput | rolesUpsertWithWhereUniqueWithoutRoleRatesInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutRoleRatesInput | rolesUpdateWithWhereUniqueWithoutRoleRatesInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutRoleRatesInput | rolesUpdateManyWithWhereWithoutRoleRatesInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type ProjectsCreateNestedOneWithoutTravelRequestsInput = {
    create?: XOR<ProjectsCreateWithoutTravelRequestsInput, ProjectsUncheckedCreateWithoutTravelRequestsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTravelRequestsInput
    connect?: ProjectsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutTravelRequestsInput = {
    create?: XOR<UsersCreateWithoutTravelRequestsInput, UsersUncheckedCreateWithoutTravelRequestsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTravelRequestsInput
    connect?: UsersWhereUniqueInput
  }

  export type ProjectsUpdateOneRequiredWithoutTravelRequestsNestedInput = {
    create?: XOR<ProjectsCreateWithoutTravelRequestsInput, ProjectsUncheckedCreateWithoutTravelRequestsInput>
    connectOrCreate?: ProjectsCreateOrConnectWithoutTravelRequestsInput
    upsert?: ProjectsUpsertWithoutTravelRequestsInput
    connect?: ProjectsWhereUniqueInput
    update?: XOR<XOR<ProjectsUpdateToOneWithWhereWithoutTravelRequestsInput, ProjectsUpdateWithoutTravelRequestsInput>, ProjectsUncheckedUpdateWithoutTravelRequestsInput>
  }

  export type UsersUpdateOneRequiredWithoutTravelRequestsNestedInput = {
    create?: XOR<UsersCreateWithoutTravelRequestsInput, UsersUncheckedCreateWithoutTravelRequestsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTravelRequestsInput
    upsert?: UsersUpsertWithoutTravelRequestsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTravelRequestsInput, UsersUpdateWithoutTravelRequestsInput>, UsersUncheckedUpdateWithoutTravelRequestsInput>
  }

  export type UsersCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNotificationsInput
    upsert?: UsersUpsertWithoutNotificationsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutNotificationsInput, UsersUpdateWithoutNotificationsInput>, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<UsersCreateWithoutApprovalsInput, UsersUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutApprovalsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<UsersCreateWithoutApprovalsInput, UsersUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutApprovalsInput
    upsert?: UsersUpsertWithoutApprovalsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutApprovalsInput, UsersUpdateWithoutApprovalsInput>, UsersUncheckedUpdateWithoutApprovalsInput>
  }

  export type UsersCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UsersCreateWithoutAuditLogsInput, UsersUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuditLogsInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UsersCreateWithoutAuditLogsInput, UsersUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAuditLogsInput
    upsert?: UsersUpsertWithoutAuditLogsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAuditLogsInput, UsersUpdateWithoutAuditLogsInput>, UsersUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ActivitiesCreateNestedManyWithoutUsersInput = {
    create?: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput> | ActivitiesCreateWithoutUsersInput[] | ActivitiesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutUsersInput | ActivitiesCreateOrConnectWithoutUsersInput[]
    createMany?: ActivitiesCreateManyUsersInputEnvelope
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
  }

  export type BudgetAllocationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput> | BudgetAllocationsCreateWithoutUsersInput[] | BudgetAllocationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutUsersInput | BudgetAllocationsCreateOrConnectWithoutUsersInput[]
    createMany?: BudgetAllocationsCreateManyUsersInputEnvelope
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
  }

  export type BudgetsCreateNestedManyWithoutUsersInput = {
    create?: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput> | BudgetsCreateWithoutUsersInput[] | BudgetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutUsersInput | BudgetsCreateOrConnectWithoutUsersInput[]
    createMany?: BudgetsCreateManyUsersInputEnvelope
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
  }

  export type CostSplitsCreateNestedManyWithoutUsersInput = {
    create?: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput> | CostSplitsCreateWithoutUsersInput[] | CostSplitsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutUsersInput | CostSplitsCreateOrConnectWithoutUsersInput[]
    createMany?: CostSplitsCreateManyUsersInputEnvelope
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
  }

  export type ExpensesCreateNestedManyWithoutUsersInput = {
    create?: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput> | ExpensesCreateWithoutUsersInput[] | ExpensesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutUsersInput | ExpensesCreateOrConnectWithoutUsersInput[]
    createMany?: ExpensesCreateManyUsersInputEnvelope
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
  }

  export type ProjectsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ManagersCreateNestedManyWithoutUsersInput = {
    create?: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput> | ManagersCreateWithoutUsersInput[] | ManagersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutUsersInput | ManagersCreateOrConnectWithoutUsersInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type TravelRequestsCreateNestedManyWithoutUsersInput = {
    create?: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput> | TravelRequestsCreateWithoutUsersInput[] | TravelRequestsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutUsersInput | TravelRequestsCreateOrConnectWithoutUsersInput[]
    createMany?: TravelRequestsCreateManyUsersInputEnvelope
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
  }

  export type NotificationsCreateNestedManyWithoutUsersInput = {
    create?: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput> | NotificationsCreateWithoutUsersInput[] | NotificationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUsersInput | NotificationsCreateOrConnectWithoutUsersInput[]
    createMany?: NotificationsCreateManyUsersInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type ApprovalsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput> | ApprovalsCreateWithoutUsersInput[] | ApprovalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ApprovalsCreateOrConnectWithoutUsersInput | ApprovalsCreateOrConnectWithoutUsersInput[]
    createMany?: ApprovalsCreateManyUsersInputEnvelope
    connect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
  }

  export type AuditLogsCreateNestedManyWithoutUsersInput = {
    create?: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput> | AuditLogsCreateWithoutUsersInput[] | AuditLogsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AuditLogsCreateOrConnectWithoutUsersInput | AuditLogsCreateOrConnectWithoutUsersInput[]
    createMany?: AuditLogsCreateManyUsersInputEnvelope
    connect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
  }

  export type rolesCreateNestedManyWithoutUsersInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput> | rolesCreateWithoutUsersInput[] | rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput | rolesCreateOrConnectWithoutUsersInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type ActivitiesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput> | ActivitiesCreateWithoutUsersInput[] | ActivitiesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutUsersInput | ActivitiesCreateOrConnectWithoutUsersInput[]
    createMany?: ActivitiesCreateManyUsersInputEnvelope
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
  }

  export type BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput> | BudgetAllocationsCreateWithoutUsersInput[] | BudgetAllocationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutUsersInput | BudgetAllocationsCreateOrConnectWithoutUsersInput[]
    createMany?: BudgetAllocationsCreateManyUsersInputEnvelope
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
  }

  export type BudgetsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput> | BudgetsCreateWithoutUsersInput[] | BudgetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutUsersInput | BudgetsCreateOrConnectWithoutUsersInput[]
    createMany?: BudgetsCreateManyUsersInputEnvelope
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
  }

  export type CostSplitsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput> | CostSplitsCreateWithoutUsersInput[] | CostSplitsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutUsersInput | CostSplitsCreateOrConnectWithoutUsersInput[]
    createMany?: CostSplitsCreateManyUsersInputEnvelope
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
  }

  export type ExpensesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput> | ExpensesCreateWithoutUsersInput[] | ExpensesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutUsersInput | ExpensesCreateOrConnectWithoutUsersInput[]
    createMany?: ExpensesCreateManyUsersInputEnvelope
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type ManagersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput> | ManagersCreateWithoutUsersInput[] | ManagersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutUsersInput | ManagersCreateOrConnectWithoutUsersInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type TravelRequestsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput> | TravelRequestsCreateWithoutUsersInput[] | TravelRequestsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutUsersInput | TravelRequestsCreateOrConnectWithoutUsersInput[]
    createMany?: TravelRequestsCreateManyUsersInputEnvelope
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
  }

  export type NotificationsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput> | NotificationsCreateWithoutUsersInput[] | NotificationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUsersInput | NotificationsCreateOrConnectWithoutUsersInput[]
    createMany?: NotificationsCreateManyUsersInputEnvelope
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
  }

  export type ApprovalsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput> | ApprovalsCreateWithoutUsersInput[] | ApprovalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ApprovalsCreateOrConnectWithoutUsersInput | ApprovalsCreateOrConnectWithoutUsersInput[]
    createMany?: ApprovalsCreateManyUsersInputEnvelope
    connect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
  }

  export type AuditLogsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput> | AuditLogsCreateWithoutUsersInput[] | AuditLogsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AuditLogsCreateOrConnectWithoutUsersInput | AuditLogsCreateOrConnectWithoutUsersInput[]
    createMany?: AuditLogsCreateManyUsersInputEnvelope
    connect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
  }

  export type rolesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput> | rolesCreateWithoutUsersInput[] | rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput | rolesCreateOrConnectWithoutUsersInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type ActivitiesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput> | ActivitiesCreateWithoutUsersInput[] | ActivitiesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutUsersInput | ActivitiesCreateOrConnectWithoutUsersInput[]
    upsert?: ActivitiesUpsertWithWhereUniqueWithoutUsersInput | ActivitiesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ActivitiesCreateManyUsersInputEnvelope
    set?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    disconnect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    delete?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    update?: ActivitiesUpdateWithWhereUniqueWithoutUsersInput | ActivitiesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ActivitiesUpdateManyWithWhereWithoutUsersInput | ActivitiesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
  }

  export type BudgetAllocationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput> | BudgetAllocationsCreateWithoutUsersInput[] | BudgetAllocationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutUsersInput | BudgetAllocationsCreateOrConnectWithoutUsersInput[]
    upsert?: BudgetAllocationsUpsertWithWhereUniqueWithoutUsersInput | BudgetAllocationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BudgetAllocationsCreateManyUsersInputEnvelope
    set?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    disconnect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    delete?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    update?: BudgetAllocationsUpdateWithWhereUniqueWithoutUsersInput | BudgetAllocationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BudgetAllocationsUpdateManyWithWhereWithoutUsersInput | BudgetAllocationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
  }

  export type BudgetsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput> | BudgetsCreateWithoutUsersInput[] | BudgetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutUsersInput | BudgetsCreateOrConnectWithoutUsersInput[]
    upsert?: BudgetsUpsertWithWhereUniqueWithoutUsersInput | BudgetsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BudgetsCreateManyUsersInputEnvelope
    set?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    disconnect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    delete?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    update?: BudgetsUpdateWithWhereUniqueWithoutUsersInput | BudgetsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BudgetsUpdateManyWithWhereWithoutUsersInput | BudgetsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
  }

  export type CostSplitsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput> | CostSplitsCreateWithoutUsersInput[] | CostSplitsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutUsersInput | CostSplitsCreateOrConnectWithoutUsersInput[]
    upsert?: CostSplitsUpsertWithWhereUniqueWithoutUsersInput | CostSplitsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CostSplitsCreateManyUsersInputEnvelope
    set?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    disconnect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    delete?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    update?: CostSplitsUpdateWithWhereUniqueWithoutUsersInput | CostSplitsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CostSplitsUpdateManyWithWhereWithoutUsersInput | CostSplitsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
  }

  export type ExpensesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput> | ExpensesCreateWithoutUsersInput[] | ExpensesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutUsersInput | ExpensesCreateOrConnectWithoutUsersInput[]
    upsert?: ExpensesUpsertWithWhereUniqueWithoutUsersInput | ExpensesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ExpensesCreateManyUsersInputEnvelope
    set?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    disconnect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    delete?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    update?: ExpensesUpdateWithWhereUniqueWithoutUsersInput | ExpensesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ExpensesUpdateManyWithWhereWithoutUsersInput | ExpensesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
  }

  export type ProjectsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutUsersInput | ProjectsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutUsersInput | ProjectsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutUsersInput | ProjectsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type ManagersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput> | ManagersCreateWithoutUsersInput[] | ManagersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutUsersInput | ManagersCreateOrConnectWithoutUsersInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutUsersInput | ManagersUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutUsersInput | ManagersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutUsersInput | ManagersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type TravelRequestsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput> | TravelRequestsCreateWithoutUsersInput[] | TravelRequestsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutUsersInput | TravelRequestsCreateOrConnectWithoutUsersInput[]
    upsert?: TravelRequestsUpsertWithWhereUniqueWithoutUsersInput | TravelRequestsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: TravelRequestsCreateManyUsersInputEnvelope
    set?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    disconnect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    delete?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    update?: TravelRequestsUpdateWithWhereUniqueWithoutUsersInput | TravelRequestsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TravelRequestsUpdateManyWithWhereWithoutUsersInput | TravelRequestsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
  }

  export type NotificationsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput> | NotificationsCreateWithoutUsersInput[] | NotificationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUsersInput | NotificationsCreateOrConnectWithoutUsersInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutUsersInput | NotificationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: NotificationsCreateManyUsersInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutUsersInput | NotificationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutUsersInput | NotificationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type ApprovalsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput> | ApprovalsCreateWithoutUsersInput[] | ApprovalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ApprovalsCreateOrConnectWithoutUsersInput | ApprovalsCreateOrConnectWithoutUsersInput[]
    upsert?: ApprovalsUpsertWithWhereUniqueWithoutUsersInput | ApprovalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ApprovalsCreateManyUsersInputEnvelope
    set?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    disconnect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    delete?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    connect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    update?: ApprovalsUpdateWithWhereUniqueWithoutUsersInput | ApprovalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ApprovalsUpdateManyWithWhereWithoutUsersInput | ApprovalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ApprovalsScalarWhereInput | ApprovalsScalarWhereInput[]
  }

  export type AuditLogsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput> | AuditLogsCreateWithoutUsersInput[] | AuditLogsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AuditLogsCreateOrConnectWithoutUsersInput | AuditLogsCreateOrConnectWithoutUsersInput[]
    upsert?: AuditLogsUpsertWithWhereUniqueWithoutUsersInput | AuditLogsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AuditLogsCreateManyUsersInputEnvelope
    set?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    disconnect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    delete?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    connect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    update?: AuditLogsUpdateWithWhereUniqueWithoutUsersInput | AuditLogsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AuditLogsUpdateManyWithWhereWithoutUsersInput | AuditLogsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AuditLogsScalarWhereInput | AuditLogsScalarWhereInput[]
  }

  export type rolesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput> | rolesCreateWithoutUsersInput[] | rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput | rolesCreateOrConnectWithoutUsersInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutUsersInput | rolesUpsertWithWhereUniqueWithoutUsersInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutUsersInput | rolesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutUsersInput | rolesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type ActivitiesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput> | ActivitiesCreateWithoutUsersInput[] | ActivitiesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ActivitiesCreateOrConnectWithoutUsersInput | ActivitiesCreateOrConnectWithoutUsersInput[]
    upsert?: ActivitiesUpsertWithWhereUniqueWithoutUsersInput | ActivitiesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ActivitiesCreateManyUsersInputEnvelope
    set?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    disconnect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    delete?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    connect?: ActivitiesWhereUniqueInput | ActivitiesWhereUniqueInput[]
    update?: ActivitiesUpdateWithWhereUniqueWithoutUsersInput | ActivitiesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ActivitiesUpdateManyWithWhereWithoutUsersInput | ActivitiesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
  }

  export type BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput> | BudgetAllocationsCreateWithoutUsersInput[] | BudgetAllocationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetAllocationsCreateOrConnectWithoutUsersInput | BudgetAllocationsCreateOrConnectWithoutUsersInput[]
    upsert?: BudgetAllocationsUpsertWithWhereUniqueWithoutUsersInput | BudgetAllocationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BudgetAllocationsCreateManyUsersInputEnvelope
    set?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    disconnect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    delete?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    connect?: BudgetAllocationsWhereUniqueInput | BudgetAllocationsWhereUniqueInput[]
    update?: BudgetAllocationsUpdateWithWhereUniqueWithoutUsersInput | BudgetAllocationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BudgetAllocationsUpdateManyWithWhereWithoutUsersInput | BudgetAllocationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
  }

  export type BudgetsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput> | BudgetsCreateWithoutUsersInput[] | BudgetsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: BudgetsCreateOrConnectWithoutUsersInput | BudgetsCreateOrConnectWithoutUsersInput[]
    upsert?: BudgetsUpsertWithWhereUniqueWithoutUsersInput | BudgetsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: BudgetsCreateManyUsersInputEnvelope
    set?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    disconnect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    delete?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    connect?: BudgetsWhereUniqueInput | BudgetsWhereUniqueInput[]
    update?: BudgetsUpdateWithWhereUniqueWithoutUsersInput | BudgetsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: BudgetsUpdateManyWithWhereWithoutUsersInput | BudgetsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
  }

  export type CostSplitsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput> | CostSplitsCreateWithoutUsersInput[] | CostSplitsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: CostSplitsCreateOrConnectWithoutUsersInput | CostSplitsCreateOrConnectWithoutUsersInput[]
    upsert?: CostSplitsUpsertWithWhereUniqueWithoutUsersInput | CostSplitsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: CostSplitsCreateManyUsersInputEnvelope
    set?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    disconnect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    delete?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    connect?: CostSplitsWhereUniqueInput | CostSplitsWhereUniqueInput[]
    update?: CostSplitsUpdateWithWhereUniqueWithoutUsersInput | CostSplitsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: CostSplitsUpdateManyWithWhereWithoutUsersInput | CostSplitsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
  }

  export type ExpensesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput> | ExpensesCreateWithoutUsersInput[] | ExpensesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ExpensesCreateOrConnectWithoutUsersInput | ExpensesCreateOrConnectWithoutUsersInput[]
    upsert?: ExpensesUpsertWithWhereUniqueWithoutUsersInput | ExpensesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ExpensesCreateManyUsersInputEnvelope
    set?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    disconnect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    delete?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    connect?: ExpensesWhereUniqueInput | ExpensesWhereUniqueInput[]
    update?: ExpensesUpdateWithWhereUniqueWithoutUsersInput | ExpensesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ExpensesUpdateManyWithWhereWithoutUsersInput | ExpensesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput> | ProjectsCreateWithoutUsersInput[] | ProjectsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutUsersInput | ProjectsCreateOrConnectWithoutUsersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutUsersInput | ProjectsUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutUsersInput | ProjectsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutUsersInput | ProjectsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type ManagersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput> | ManagersCreateWithoutUsersInput[] | ManagersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutUsersInput | ManagersCreateOrConnectWithoutUsersInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutUsersInput | ManagersUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutUsersInput | ManagersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutUsersInput | ManagersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput> | TravelRequestsCreateWithoutUsersInput[] | TravelRequestsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: TravelRequestsCreateOrConnectWithoutUsersInput | TravelRequestsCreateOrConnectWithoutUsersInput[]
    upsert?: TravelRequestsUpsertWithWhereUniqueWithoutUsersInput | TravelRequestsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: TravelRequestsCreateManyUsersInputEnvelope
    set?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    disconnect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    delete?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    connect?: TravelRequestsWhereUniqueInput | TravelRequestsWhereUniqueInput[]
    update?: TravelRequestsUpdateWithWhereUniqueWithoutUsersInput | TravelRequestsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: TravelRequestsUpdateManyWithWhereWithoutUsersInput | TravelRequestsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
  }

  export type NotificationsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput> | NotificationsCreateWithoutUsersInput[] | NotificationsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: NotificationsCreateOrConnectWithoutUsersInput | NotificationsCreateOrConnectWithoutUsersInput[]
    upsert?: NotificationsUpsertWithWhereUniqueWithoutUsersInput | NotificationsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: NotificationsCreateManyUsersInputEnvelope
    set?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    disconnect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    delete?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    connect?: NotificationsWhereUniqueInput | NotificationsWhereUniqueInput[]
    update?: NotificationsUpdateWithWhereUniqueWithoutUsersInput | NotificationsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: NotificationsUpdateManyWithWhereWithoutUsersInput | NotificationsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
  }

  export type ApprovalsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput> | ApprovalsCreateWithoutUsersInput[] | ApprovalsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ApprovalsCreateOrConnectWithoutUsersInput | ApprovalsCreateOrConnectWithoutUsersInput[]
    upsert?: ApprovalsUpsertWithWhereUniqueWithoutUsersInput | ApprovalsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ApprovalsCreateManyUsersInputEnvelope
    set?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    disconnect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    delete?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    connect?: ApprovalsWhereUniqueInput | ApprovalsWhereUniqueInput[]
    update?: ApprovalsUpdateWithWhereUniqueWithoutUsersInput | ApprovalsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ApprovalsUpdateManyWithWhereWithoutUsersInput | ApprovalsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ApprovalsScalarWhereInput | ApprovalsScalarWhereInput[]
  }

  export type AuditLogsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput> | AuditLogsCreateWithoutUsersInput[] | AuditLogsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AuditLogsCreateOrConnectWithoutUsersInput | AuditLogsCreateOrConnectWithoutUsersInput[]
    upsert?: AuditLogsUpsertWithWhereUniqueWithoutUsersInput | AuditLogsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AuditLogsCreateManyUsersInputEnvelope
    set?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    disconnect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    delete?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    connect?: AuditLogsWhereUniqueInput | AuditLogsWhereUniqueInput[]
    update?: AuditLogsUpdateWithWhereUniqueWithoutUsersInput | AuditLogsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AuditLogsUpdateManyWithWhereWithoutUsersInput | AuditLogsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AuditLogsScalarWhereInput | AuditLogsScalarWhereInput[]
  }

  export type rolesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput> | rolesCreateWithoutUsersInput[] | rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutUsersInput | rolesCreateOrConnectWithoutUsersInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutUsersInput | rolesUpsertWithWhereUniqueWithoutUsersInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutUsersInput | rolesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutUsersInput | rolesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type UsersCreateNestedManyWithoutRolesInput = {
    create?: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput> | UsersCreateWithoutRolesInput[] | UsersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRolesInput | UsersCreateOrConnectWithoutRolesInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type RoleRatesCreateNestedManyWithoutRolesInput = {
    create?: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput> | RoleRatesCreateWithoutRolesInput[] | RoleRatesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: RoleRatesCreateOrConnectWithoutRolesInput | RoleRatesCreateOrConnectWithoutRolesInput[]
    connect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
  }

  export type ManagersCreateNestedManyWithoutRolesInput = {
    create?: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput> | ManagersCreateWithoutRolesInput[] | ManagersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutRolesInput | ManagersCreateOrConnectWithoutRolesInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput> | UsersCreateWithoutRolesInput[] | UsersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRolesInput | UsersCreateOrConnectWithoutRolesInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type RoleRatesUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput> | RoleRatesCreateWithoutRolesInput[] | RoleRatesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: RoleRatesCreateOrConnectWithoutRolesInput | RoleRatesCreateOrConnectWithoutRolesInput[]
    connect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
  }

  export type ManagersUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput> | ManagersCreateWithoutRolesInput[] | ManagersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutRolesInput | ManagersCreateOrConnectWithoutRolesInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
  }

  export type UsersUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput> | UsersCreateWithoutRolesInput[] | UsersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRolesInput | UsersCreateOrConnectWithoutRolesInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutRolesInput | UsersUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutRolesInput | UsersUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutRolesInput | UsersUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type RoleRatesUpdateManyWithoutRolesNestedInput = {
    create?: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput> | RoleRatesCreateWithoutRolesInput[] | RoleRatesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: RoleRatesCreateOrConnectWithoutRolesInput | RoleRatesCreateOrConnectWithoutRolesInput[]
    upsert?: RoleRatesUpsertWithWhereUniqueWithoutRolesInput | RoleRatesUpsertWithWhereUniqueWithoutRolesInput[]
    set?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    disconnect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    delete?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    connect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    update?: RoleRatesUpdateWithWhereUniqueWithoutRolesInput | RoleRatesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: RoleRatesUpdateManyWithWhereWithoutRolesInput | RoleRatesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: RoleRatesScalarWhereInput | RoleRatesScalarWhereInput[]
  }

  export type ManagersUpdateManyWithoutRolesNestedInput = {
    create?: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput> | ManagersCreateWithoutRolesInput[] | ManagersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutRolesInput | ManagersCreateOrConnectWithoutRolesInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutRolesInput | ManagersUpsertWithWhereUniqueWithoutRolesInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutRolesInput | ManagersUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutRolesInput | ManagersUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput> | UsersCreateWithoutRolesInput[] | UsersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutRolesInput | UsersCreateOrConnectWithoutRolesInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutRolesInput | UsersUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutRolesInput | UsersUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutRolesInput | UsersUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type RoleRatesUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput> | RoleRatesCreateWithoutRolesInput[] | RoleRatesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: RoleRatesCreateOrConnectWithoutRolesInput | RoleRatesCreateOrConnectWithoutRolesInput[]
    upsert?: RoleRatesUpsertWithWhereUniqueWithoutRolesInput | RoleRatesUpsertWithWhereUniqueWithoutRolesInput[]
    set?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    disconnect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    delete?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    connect?: RoleRatesWhereUniqueInput | RoleRatesWhereUniqueInput[]
    update?: RoleRatesUpdateWithWhereUniqueWithoutRolesInput | RoleRatesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: RoleRatesUpdateManyWithWhereWithoutRolesInput | RoleRatesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: RoleRatesScalarWhereInput | RoleRatesScalarWhereInput[]
  }

  export type ManagersUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput> | ManagersCreateWithoutRolesInput[] | ManagersUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: ManagersCreateOrConnectWithoutRolesInput | ManagersCreateOrConnectWithoutRolesInput[]
    upsert?: ManagersUpsertWithWhereUniqueWithoutRolesInput | ManagersUpsertWithWhereUniqueWithoutRolesInput[]
    set?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    disconnect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    delete?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    connect?: ManagersWhereUniqueInput | ManagersWhereUniqueInput[]
    update?: ManagersUpdateWithWhereUniqueWithoutRolesInput | ManagersUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: ManagersUpdateManyWithWhereWithoutRolesInput | ManagersUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
  }

  export type UsersCreateNestedManyWithoutManagersInput = {
    create?: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput> | UsersCreateWithoutManagersInput[] | UsersUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutManagersInput | UsersCreateOrConnectWithoutManagersInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type rolesCreateNestedManyWithoutManagersInput = {
    create?: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput> | rolesCreateWithoutManagersInput[] | rolesUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutManagersInput | rolesCreateOrConnectWithoutManagersInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type ProjectsCreateNestedManyWithoutManagersInput = {
    create?: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput> | ProjectsCreateWithoutManagersInput[] | ProjectsUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutManagersInput | ProjectsCreateOrConnectWithoutManagersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutManagersInput = {
    create?: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput> | UsersCreateWithoutManagersInput[] | UsersUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutManagersInput | UsersCreateOrConnectWithoutManagersInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type rolesUncheckedCreateNestedManyWithoutManagersInput = {
    create?: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput> | rolesCreateWithoutManagersInput[] | rolesUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutManagersInput | rolesCreateOrConnectWithoutManagersInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
  }

  export type ProjectsUncheckedCreateNestedManyWithoutManagersInput = {
    create?: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput> | ProjectsCreateWithoutManagersInput[] | ProjectsUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutManagersInput | ProjectsCreateOrConnectWithoutManagersInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
  }

  export type UsersUpdateManyWithoutManagersNestedInput = {
    create?: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput> | UsersCreateWithoutManagersInput[] | UsersUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutManagersInput | UsersCreateOrConnectWithoutManagersInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutManagersInput | UsersUpsertWithWhereUniqueWithoutManagersInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutManagersInput | UsersUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutManagersInput | UsersUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type rolesUpdateManyWithoutManagersNestedInput = {
    create?: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput> | rolesCreateWithoutManagersInput[] | rolesUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutManagersInput | rolesCreateOrConnectWithoutManagersInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutManagersInput | rolesUpsertWithWhereUniqueWithoutManagersInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutManagersInput | rolesUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutManagersInput | rolesUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type ProjectsUpdateManyWithoutManagersNestedInput = {
    create?: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput> | ProjectsCreateWithoutManagersInput[] | ProjectsUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutManagersInput | ProjectsCreateOrConnectWithoutManagersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutManagersInput | ProjectsUpsertWithWhereUniqueWithoutManagersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutManagersInput | ProjectsUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutManagersInput | ProjectsUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutManagersNestedInput = {
    create?: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput> | UsersCreateWithoutManagersInput[] | UsersUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutManagersInput | UsersCreateOrConnectWithoutManagersInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutManagersInput | UsersUpsertWithWhereUniqueWithoutManagersInput[]
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutManagersInput | UsersUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutManagersInput | UsersUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type rolesUncheckedUpdateManyWithoutManagersNestedInput = {
    create?: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput> | rolesCreateWithoutManagersInput[] | rolesUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: rolesCreateOrConnectWithoutManagersInput | rolesCreateOrConnectWithoutManagersInput[]
    upsert?: rolesUpsertWithWhereUniqueWithoutManagersInput | rolesUpsertWithWhereUniqueWithoutManagersInput[]
    set?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    disconnect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    delete?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    connect?: rolesWhereUniqueInput | rolesWhereUniqueInput[]
    update?: rolesUpdateWithWhereUniqueWithoutManagersInput | rolesUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: rolesUpdateManyWithWhereWithoutManagersInput | rolesUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: rolesScalarWhereInput | rolesScalarWhereInput[]
  }

  export type ProjectsUncheckedUpdateManyWithoutManagersNestedInput = {
    create?: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput> | ProjectsCreateWithoutManagersInput[] | ProjectsUncheckedCreateWithoutManagersInput[]
    connectOrCreate?: ProjectsCreateOrConnectWithoutManagersInput | ProjectsCreateOrConnectWithoutManagersInput[]
    upsert?: ProjectsUpsertWithWhereUniqueWithoutManagersInput | ProjectsUpsertWithWhereUniqueWithoutManagersInput[]
    set?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    disconnect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    delete?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    connect?: ProjectsWhereUniqueInput | ProjectsWhereUniqueInput[]
    update?: ProjectsUpdateWithWhereUniqueWithoutManagersInput | ProjectsUpdateWithWhereUniqueWithoutManagersInput[]
    updateMany?: ProjectsUpdateManyWithWhereWithoutManagersInput | ProjectsUpdateManyWithWhereWithoutManagersInput[]
    deleteMany?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | null
    notIn?: Uint8Array[] | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type ProjectsCreateWithoutActivitiesInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutActivitiesInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutActivitiesInput, ProjectsUncheckedCreateWithoutActivitiesInput>
  }

  export type UsersCreateWithoutActivitiesInput = {
    id?: string
    fullName: string
    email: string
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutActivitiesInput = {
    id?: string
    fullName: string
    email: string
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutActivitiesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutActivitiesInput, UsersUncheckedCreateWithoutActivitiesInput>
  }

  export type ProjectsUpsertWithoutActivitiesInput = {
    update: XOR<ProjectsUpdateWithoutActivitiesInput, ProjectsUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ProjectsCreateWithoutActivitiesInput, ProjectsUncheckedCreateWithoutActivitiesInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutActivitiesInput, ProjectsUncheckedUpdateWithoutActivitiesInput>
  }

  export type ProjectsUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type UsersUpsertWithoutActivitiesInput = {
    update: XOR<UsersUpdateWithoutActivitiesInput, UsersUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UsersCreateWithoutActivitiesInput, UsersUncheckedCreateWithoutActivitiesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutActivitiesInput, UsersUncheckedUpdateWithoutActivitiesInput>
  }

  export type UsersUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type BudgetsCreateWithoutBudgetAllocationsInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    Users: UsersCreateNestedOneWithoutBudgetsInput
    Projects: ProjectsCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetsUncheckedCreateWithoutBudgetAllocationsInput = {
    id?: string
    projectId: string
    itemType: string
    description?: string | null
    status?: string | null
    createdById: string
  }

  export type BudgetsCreateOrConnectWithoutBudgetAllocationsInput = {
    where: BudgetsWhereUniqueInput
    create: XOR<BudgetsCreateWithoutBudgetAllocationsInput, BudgetsUncheckedCreateWithoutBudgetAllocationsInput>
  }

  export type UsersCreateWithoutBudgetAllocationsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutBudgetAllocationsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutBudgetAllocationsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBudgetAllocationsInput, UsersUncheckedCreateWithoutBudgetAllocationsInput>
  }

  export type BudgetsUpsertWithoutBudgetAllocationsInput = {
    update: XOR<BudgetsUpdateWithoutBudgetAllocationsInput, BudgetsUncheckedUpdateWithoutBudgetAllocationsInput>
    create: XOR<BudgetsCreateWithoutBudgetAllocationsInput, BudgetsUncheckedCreateWithoutBudgetAllocationsInput>
    where?: BudgetsWhereInput
  }

  export type BudgetsUpdateToOneWithWhereWithoutBudgetAllocationsInput = {
    where?: BudgetsWhereInput
    data: XOR<BudgetsUpdateWithoutBudgetAllocationsInput, BudgetsUncheckedUpdateWithoutBudgetAllocationsInput>
  }

  export type BudgetsUpdateWithoutBudgetAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    Users?: UsersUpdateOneRequiredWithoutBudgetsNestedInput
    Projects?: ProjectsUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateWithoutBudgetAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpsertWithoutBudgetAllocationsInput = {
    update: XOR<UsersUpdateWithoutBudgetAllocationsInput, UsersUncheckedUpdateWithoutBudgetAllocationsInput>
    create: XOR<UsersCreateWithoutBudgetAllocationsInput, UsersUncheckedCreateWithoutBudgetAllocationsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBudgetAllocationsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBudgetAllocationsInput, UsersUncheckedUpdateWithoutBudgetAllocationsInput>
  }

  export type UsersUpdateWithoutBudgetAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutBudgetAllocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type BudgetAllocationsCreateWithoutBudgetsInput = {
    id?: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
    Users: UsersCreateNestedOneWithoutBudgetAllocationsInput
  }

  export type BudgetAllocationsUncheckedCreateWithoutBudgetsInput = {
    id?: string
    userId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsCreateOrConnectWithoutBudgetsInput = {
    where: BudgetAllocationsWhereUniqueInput
    create: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput>
  }

  export type BudgetAllocationsCreateManyBudgetsInputEnvelope = {
    data: BudgetAllocationsCreateManyBudgetsInput | BudgetAllocationsCreateManyBudgetsInput[]
  }

  export type UsersCreateWithoutBudgetsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutBudgetsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutBudgetsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBudgetsInput, UsersUncheckedCreateWithoutBudgetsInput>
  }

  export type ProjectsCreateWithoutBudgetsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutBudgetsInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutBudgetsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutBudgetsInput, ProjectsUncheckedCreateWithoutBudgetsInput>
  }

  export type BudgetAllocationsUpsertWithWhereUniqueWithoutBudgetsInput = {
    where: BudgetAllocationsWhereUniqueInput
    update: XOR<BudgetAllocationsUpdateWithoutBudgetsInput, BudgetAllocationsUncheckedUpdateWithoutBudgetsInput>
    create: XOR<BudgetAllocationsCreateWithoutBudgetsInput, BudgetAllocationsUncheckedCreateWithoutBudgetsInput>
  }

  export type BudgetAllocationsUpdateWithWhereUniqueWithoutBudgetsInput = {
    where: BudgetAllocationsWhereUniqueInput
    data: XOR<BudgetAllocationsUpdateWithoutBudgetsInput, BudgetAllocationsUncheckedUpdateWithoutBudgetsInput>
  }

  export type BudgetAllocationsUpdateManyWithWhereWithoutBudgetsInput = {
    where: BudgetAllocationsScalarWhereInput
    data: XOR<BudgetAllocationsUpdateManyMutationInput, BudgetAllocationsUncheckedUpdateManyWithoutBudgetsInput>
  }

  export type BudgetAllocationsScalarWhereInput = {
    AND?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
    OR?: BudgetAllocationsScalarWhereInput[]
    NOT?: BudgetAllocationsScalarWhereInput | BudgetAllocationsScalarWhereInput[]
    id?: StringFilter<"BudgetAllocations"> | string
    budgetId?: StringFilter<"BudgetAllocations"> | string
    userId?: StringFilter<"BudgetAllocations"> | string
    hours?: FloatFilter<"BudgetAllocations"> | number
    rate?: DecimalFilter<"BudgetAllocations"> | Decimal | DecimalJsLike | number | string
  }

  export type UsersUpsertWithoutBudgetsInput = {
    update: XOR<UsersUpdateWithoutBudgetsInput, UsersUncheckedUpdateWithoutBudgetsInput>
    create: XOR<UsersCreateWithoutBudgetsInput, UsersUncheckedCreateWithoutBudgetsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBudgetsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBudgetsInput, UsersUncheckedUpdateWithoutBudgetsInput>
  }

  export type UsersUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ProjectsUpsertWithoutBudgetsInput = {
    update: XOR<ProjectsUpdateWithoutBudgetsInput, ProjectsUncheckedUpdateWithoutBudgetsInput>
    create: XOR<ProjectsCreateWithoutBudgetsInput, ProjectsUncheckedCreateWithoutBudgetsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutBudgetsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutBudgetsInput, ProjectsUncheckedUpdateWithoutBudgetsInput>
  }

  export type ProjectsUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsCreateWithoutClientsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutClientsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput>
  }

  export type ProjectsCreateManyClientsInputEnvelope = {
    data: ProjectsCreateManyClientsInput | ProjectsCreateManyClientsInput[]
  }

  export type ProjectsUpsertWithWhereUniqueWithoutClientsInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutClientsInput, ProjectsUncheckedUpdateWithoutClientsInput>
    create: XOR<ProjectsCreateWithoutClientsInput, ProjectsUncheckedCreateWithoutClientsInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutClientsInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutClientsInput, ProjectsUncheckedUpdateWithoutClientsInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutClientsInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutClientsInput>
  }

  export type ProjectsScalarWhereInput = {
    AND?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
    OR?: ProjectsScalarWhereInput[]
    NOT?: ProjectsScalarWhereInput | ProjectsScalarWhereInput[]
    id?: StringFilter<"Projects"> | string
    name?: StringFilter<"Projects"> | string
    code?: StringFilter<"Projects"> | string
    clientId?: StringNullableFilter<"Projects"> | string | null
    startDate?: DateTimeFilter<"Projects"> | Date | string
    endDate?: DateTimeFilter<"Projects"> | Date | string
    status?: StringFilter<"Projects"> | string
    billingType?: StringFilter<"Projects"> | string
    billingRateTimePeriod?: StringFilter<"Projects"> | string
    totalContract?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFilter<"Projects"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"Projects"> | Date | string
    updatedAt?: DateTimeFilter<"Projects"> | Date | string
  }

  export type UsersCreateWithoutCostSplitsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutCostSplitsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutCostSplitsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCostSplitsInput, UsersUncheckedCreateWithoutCostSplitsInput>
  }

  export type ProjectsCreateWithoutCostSplitsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutCostSplitsInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutCostSplitsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutCostSplitsInput, ProjectsUncheckedCreateWithoutCostSplitsInput>
  }

  export type UsersUpsertWithoutCostSplitsInput = {
    update: XOR<UsersUpdateWithoutCostSplitsInput, UsersUncheckedUpdateWithoutCostSplitsInput>
    create: XOR<UsersCreateWithoutCostSplitsInput, UsersUncheckedCreateWithoutCostSplitsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCostSplitsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCostSplitsInput, UsersUncheckedUpdateWithoutCostSplitsInput>
  }

  export type UsersUpdateWithoutCostSplitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutCostSplitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ProjectsUpsertWithoutCostSplitsInput = {
    update: XOR<ProjectsUpdateWithoutCostSplitsInput, ProjectsUncheckedUpdateWithoutCostSplitsInput>
    create: XOR<ProjectsCreateWithoutCostSplitsInput, ProjectsUncheckedCreateWithoutCostSplitsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutCostSplitsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutCostSplitsInput, ProjectsUncheckedUpdateWithoutCostSplitsInput>
  }

  export type ProjectsUpdateWithoutCostSplitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutCostSplitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsCreateWithoutExpensesInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutExpensesInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutExpensesInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutExpensesInput, ProjectsUncheckedCreateWithoutExpensesInput>
  }

  export type UsersCreateWithoutExpensesInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutExpensesInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutExpensesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutExpensesInput, UsersUncheckedCreateWithoutExpensesInput>
  }

  export type ProjectsUpsertWithoutExpensesInput = {
    update: XOR<ProjectsUpdateWithoutExpensesInput, ProjectsUncheckedUpdateWithoutExpensesInput>
    create: XOR<ProjectsCreateWithoutExpensesInput, ProjectsUncheckedCreateWithoutExpensesInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutExpensesInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutExpensesInput, ProjectsUncheckedUpdateWithoutExpensesInput>
  }

  export type ProjectsUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type UsersUpsertWithoutExpensesInput = {
    update: XOR<UsersUpdateWithoutExpensesInput, UsersUncheckedUpdateWithoutExpensesInput>
    create: XOR<UsersCreateWithoutExpensesInput, UsersUncheckedCreateWithoutExpensesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutExpensesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutExpensesInput, UsersUncheckedUpdateWithoutExpensesInput>
  }

  export type UsersUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutExpensesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ActivitiesCreateWithoutProjectsInput = {
    id?: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
    Users: UsersCreateNestedOneWithoutActivitiesInput
  }

  export type ActivitiesUncheckedCreateWithoutProjectsInput = {
    id?: string
    userId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type ActivitiesCreateOrConnectWithoutProjectsInput = {
    where: ActivitiesWhereUniqueInput
    create: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput>
  }

  export type ActivitiesCreateManyProjectsInputEnvelope = {
    data: ActivitiesCreateManyProjectsInput | ActivitiesCreateManyProjectsInput[]
  }

  export type BudgetsCreateWithoutProjectsInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutBudgetsInput
    Users: UsersCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetsUncheckedCreateWithoutProjectsInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    createdById: string
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutBudgetsInput
  }

  export type BudgetsCreateOrConnectWithoutProjectsInput = {
    where: BudgetsWhereUniqueInput
    create: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput>
  }

  export type BudgetsCreateManyProjectsInputEnvelope = {
    data: BudgetsCreateManyProjectsInput | BudgetsCreateManyProjectsInput[]
  }

  export type CostSplitsCreateWithoutProjectsInput = {
    id?: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    Users?: UsersCreateNestedOneWithoutCostSplitsInput
  }

  export type CostSplitsUncheckedCreateWithoutProjectsInput = {
    id?: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    approvedBy?: string | null
  }

  export type CostSplitsCreateOrConnectWithoutProjectsInput = {
    where: CostSplitsWhereUniqueInput
    create: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput>
  }

  export type CostSplitsCreateManyProjectsInputEnvelope = {
    data: CostSplitsCreateManyProjectsInput | CostSplitsCreateManyProjectsInput[]
  }

  export type ExpensesCreateWithoutProjectsInput = {
    id?: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
    Users: UsersCreateNestedOneWithoutExpensesInput
  }

  export type ExpensesUncheckedCreateWithoutProjectsInput = {
    id?: string
    submittedBy: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type ExpensesCreateOrConnectWithoutProjectsInput = {
    where: ExpensesWhereUniqueInput
    create: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput>
  }

  export type ExpensesCreateManyProjectsInputEnvelope = {
    data: ExpensesCreateManyProjectsInput | ExpensesCreateManyProjectsInput[]
  }

  export type UsersCreateWithoutProjectsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutProjectsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutProjectsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput>
  }

  export type ClientsCreateWithoutProjectsInput = {
    id: string
    name: string
  }

  export type ClientsUncheckedCreateWithoutProjectsInput = {
    id: string
    name: string
  }

  export type ClientsCreateOrConnectWithoutProjectsInput = {
    where: ClientsWhereUniqueInput
    create: XOR<ClientsCreateWithoutProjectsInput, ClientsUncheckedCreateWithoutProjectsInput>
  }

  export type TravelRequestsCreateWithoutProjectsInput = {
    id?: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
    Users: UsersCreateNestedOneWithoutTravelRequestsInput
  }

  export type TravelRequestsUncheckedCreateWithoutProjectsInput = {
    id?: string
    requesterId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type TravelRequestsCreateOrConnectWithoutProjectsInput = {
    where: TravelRequestsWhereUniqueInput
    create: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput>
  }

  export type TravelRequestsCreateManyProjectsInputEnvelope = {
    data: TravelRequestsCreateManyProjectsInput | TravelRequestsCreateManyProjectsInput[]
  }

  export type ManagersCreateWithoutProjectsInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutManagersInput
    roles?: rolesCreateNestedManyWithoutManagersInput
  }

  export type ManagersUncheckedCreateWithoutProjectsInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutManagersInput
    roles?: rolesUncheckedCreateNestedManyWithoutManagersInput
  }

  export type ManagersCreateOrConnectWithoutProjectsInput = {
    where: ManagersWhereUniqueInput
    create: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput>
  }

  export type ActivitiesUpsertWithWhereUniqueWithoutProjectsInput = {
    where: ActivitiesWhereUniqueInput
    update: XOR<ActivitiesUpdateWithoutProjectsInput, ActivitiesUncheckedUpdateWithoutProjectsInput>
    create: XOR<ActivitiesCreateWithoutProjectsInput, ActivitiesUncheckedCreateWithoutProjectsInput>
  }

  export type ActivitiesUpdateWithWhereUniqueWithoutProjectsInput = {
    where: ActivitiesWhereUniqueInput
    data: XOR<ActivitiesUpdateWithoutProjectsInput, ActivitiesUncheckedUpdateWithoutProjectsInput>
  }

  export type ActivitiesUpdateManyWithWhereWithoutProjectsInput = {
    where: ActivitiesScalarWhereInput
    data: XOR<ActivitiesUpdateManyMutationInput, ActivitiesUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ActivitiesScalarWhereInput = {
    AND?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
    OR?: ActivitiesScalarWhereInput[]
    NOT?: ActivitiesScalarWhereInput | ActivitiesScalarWhereInput[]
    id?: StringFilter<"Activities"> | string
    projectId?: StringFilter<"Activities"> | string
    userId?: StringFilter<"Activities"> | string
    date?: DateTimeFilter<"Activities"> | Date | string
    hours?: FloatFilter<"Activities"> | number
    progress?: IntNullableFilter<"Activities"> | number | null
    notes?: StringNullableFilter<"Activities"> | string | null
  }

  export type BudgetsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: BudgetsWhereUniqueInput
    update: XOR<BudgetsUpdateWithoutProjectsInput, BudgetsUncheckedUpdateWithoutProjectsInput>
    create: XOR<BudgetsCreateWithoutProjectsInput, BudgetsUncheckedCreateWithoutProjectsInput>
  }

  export type BudgetsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: BudgetsWhereUniqueInput
    data: XOR<BudgetsUpdateWithoutProjectsInput, BudgetsUncheckedUpdateWithoutProjectsInput>
  }

  export type BudgetsUpdateManyWithWhereWithoutProjectsInput = {
    where: BudgetsScalarWhereInput
    data: XOR<BudgetsUpdateManyMutationInput, BudgetsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type BudgetsScalarWhereInput = {
    AND?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
    OR?: BudgetsScalarWhereInput[]
    NOT?: BudgetsScalarWhereInput | BudgetsScalarWhereInput[]
    id?: StringFilter<"Budgets"> | string
    projectId?: StringFilter<"Budgets"> | string
    itemType?: StringFilter<"Budgets"> | string
    description?: StringNullableFilter<"Budgets"> | string | null
    status?: StringNullableFilter<"Budgets"> | string | null
    createdById?: StringFilter<"Budgets"> | string
  }

  export type CostSplitsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: CostSplitsWhereUniqueInput
    update: XOR<CostSplitsUpdateWithoutProjectsInput, CostSplitsUncheckedUpdateWithoutProjectsInput>
    create: XOR<CostSplitsCreateWithoutProjectsInput, CostSplitsUncheckedCreateWithoutProjectsInput>
  }

  export type CostSplitsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: CostSplitsWhereUniqueInput
    data: XOR<CostSplitsUpdateWithoutProjectsInput, CostSplitsUncheckedUpdateWithoutProjectsInput>
  }

  export type CostSplitsUpdateManyWithWhereWithoutProjectsInput = {
    where: CostSplitsScalarWhereInput
    data: XOR<CostSplitsUpdateManyMutationInput, CostSplitsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type CostSplitsScalarWhereInput = {
    AND?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
    OR?: CostSplitsScalarWhereInput[]
    NOT?: CostSplitsScalarWhereInput | CostSplitsScalarWhereInput[]
    id?: StringFilter<"CostSplits"> | string
    projectId?: StringFilter<"CostSplits"> | string
    cost?: DecimalFilter<"CostSplits"> | Decimal | DecimalJsLike | number | string
    splitWith?: StringFilter<"CostSplits"> | string
    approvedBy?: StringNullableFilter<"CostSplits"> | string | null
  }

  export type ExpensesUpsertWithWhereUniqueWithoutProjectsInput = {
    where: ExpensesWhereUniqueInput
    update: XOR<ExpensesUpdateWithoutProjectsInput, ExpensesUncheckedUpdateWithoutProjectsInput>
    create: XOR<ExpensesCreateWithoutProjectsInput, ExpensesUncheckedCreateWithoutProjectsInput>
  }

  export type ExpensesUpdateWithWhereUniqueWithoutProjectsInput = {
    where: ExpensesWhereUniqueInput
    data: XOR<ExpensesUpdateWithoutProjectsInput, ExpensesUncheckedUpdateWithoutProjectsInput>
  }

  export type ExpensesUpdateManyWithWhereWithoutProjectsInput = {
    where: ExpensesScalarWhereInput
    data: XOR<ExpensesUpdateManyMutationInput, ExpensesUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ExpensesScalarWhereInput = {
    AND?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
    OR?: ExpensesScalarWhereInput[]
    NOT?: ExpensesScalarWhereInput | ExpensesScalarWhereInput[]
    id?: StringFilter<"Expenses"> | string
    projectId?: StringFilter<"Expenses"> | string
    submittedBy?: StringFilter<"Expenses"> | string
    expenseType?: StringFilter<"Expenses"> | string
    isBillable?: BoolFilter<"Expenses"> | boolean
    amount?: DecimalFilter<"Expenses"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"Expenses"> | string | null
    expenseDate?: DateTimeFilter<"Expenses"> | Date | string
  }

  export type UsersUpsertWithWhereUniqueWithoutProjectsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutProjectsInput, UsersUncheckedUpdateWithoutProjectsInput>
    create: XOR<UsersCreateWithoutProjectsInput, UsersUncheckedCreateWithoutProjectsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutProjectsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutProjectsInput, UsersUncheckedUpdateWithoutProjectsInput>
  }

  export type UsersUpdateManyWithWhereWithoutProjectsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutProjectsInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: StringFilter<"Users"> | string
    fullName?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
  }

  export type ClientsUpsertWithoutProjectsInput = {
    update: XOR<ClientsUpdateWithoutProjectsInput, ClientsUncheckedUpdateWithoutProjectsInput>
    create: XOR<ClientsCreateWithoutProjectsInput, ClientsUncheckedCreateWithoutProjectsInput>
    where?: ClientsWhereInput
  }

  export type ClientsUpdateToOneWithWhereWithoutProjectsInput = {
    where?: ClientsWhereInput
    data: XOR<ClientsUpdateWithoutProjectsInput, ClientsUncheckedUpdateWithoutProjectsInput>
  }

  export type ClientsUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClientsUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TravelRequestsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: TravelRequestsWhereUniqueInput
    update: XOR<TravelRequestsUpdateWithoutProjectsInput, TravelRequestsUncheckedUpdateWithoutProjectsInput>
    create: XOR<TravelRequestsCreateWithoutProjectsInput, TravelRequestsUncheckedCreateWithoutProjectsInput>
  }

  export type TravelRequestsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: TravelRequestsWhereUniqueInput
    data: XOR<TravelRequestsUpdateWithoutProjectsInput, TravelRequestsUncheckedUpdateWithoutProjectsInput>
  }

  export type TravelRequestsUpdateManyWithWhereWithoutProjectsInput = {
    where: TravelRequestsScalarWhereInput
    data: XOR<TravelRequestsUpdateManyMutationInput, TravelRequestsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type TravelRequestsScalarWhereInput = {
    AND?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
    OR?: TravelRequestsScalarWhereInput[]
    NOT?: TravelRequestsScalarWhereInput | TravelRequestsScalarWhereInput[]
    id?: StringFilter<"TravelRequests"> | string
    projectId?: StringFilter<"TravelRequests"> | string
    requesterId?: StringFilter<"TravelRequests"> | string
    destination?: StringFilter<"TravelRequests"> | string
    purpose?: StringFilter<"TravelRequests"> | string
    cost?: DecimalFilter<"TravelRequests"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"TravelRequests"> | string | null
  }

  export type ManagersUpsertWithWhereUniqueWithoutProjectsInput = {
    where: ManagersWhereUniqueInput
    update: XOR<ManagersUpdateWithoutProjectsInput, ManagersUncheckedUpdateWithoutProjectsInput>
    create: XOR<ManagersCreateWithoutProjectsInput, ManagersUncheckedCreateWithoutProjectsInput>
  }

  export type ManagersUpdateWithWhereUniqueWithoutProjectsInput = {
    where: ManagersWhereUniqueInput
    data: XOR<ManagersUpdateWithoutProjectsInput, ManagersUncheckedUpdateWithoutProjectsInput>
  }

  export type ManagersUpdateManyWithWhereWithoutProjectsInput = {
    where: ManagersScalarWhereInput
    data: XOR<ManagersUpdateManyMutationInput, ManagersUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ManagersScalarWhereInput = {
    AND?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
    OR?: ManagersScalarWhereInput[]
    NOT?: ManagersScalarWhereInput | ManagersScalarWhereInput[]
    id?: StringFilter<"Managers"> | string
    name?: StringFilter<"Managers"> | string
  }

  export type rolesCreateWithoutRoleRatesInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutRolesInput
    Managers?: ManagersCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateWithoutRoleRatesInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutRolesInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesCreateOrConnectWithoutRoleRatesInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput>
  }

  export type rolesUpsertWithWhereUniqueWithoutRoleRatesInput = {
    where: rolesWhereUniqueInput
    update: XOR<rolesUpdateWithoutRoleRatesInput, rolesUncheckedUpdateWithoutRoleRatesInput>
    create: XOR<rolesCreateWithoutRoleRatesInput, rolesUncheckedCreateWithoutRoleRatesInput>
  }

  export type rolesUpdateWithWhereUniqueWithoutRoleRatesInput = {
    where: rolesWhereUniqueInput
    data: XOR<rolesUpdateWithoutRoleRatesInput, rolesUncheckedUpdateWithoutRoleRatesInput>
  }

  export type rolesUpdateManyWithWhereWithoutRoleRatesInput = {
    where: rolesScalarWhereInput
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyWithoutRoleRatesInput>
  }

  export type rolesScalarWhereInput = {
    AND?: rolesScalarWhereInput | rolesScalarWhereInput[]
    OR?: rolesScalarWhereInput[]
    NOT?: rolesScalarWhereInput | rolesScalarWhereInput[]
    id?: StringFilter<"roles"> | string
    name?: StringFilter<"roles"> | string
  }

  export type ProjectsCreateWithoutTravelRequestsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutTravelRequestsInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutTravelRequestsInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutTravelRequestsInput, ProjectsUncheckedCreateWithoutTravelRequestsInput>
  }

  export type UsersCreateWithoutTravelRequestsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutTravelRequestsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutTravelRequestsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTravelRequestsInput, UsersUncheckedCreateWithoutTravelRequestsInput>
  }

  export type ProjectsUpsertWithoutTravelRequestsInput = {
    update: XOR<ProjectsUpdateWithoutTravelRequestsInput, ProjectsUncheckedUpdateWithoutTravelRequestsInput>
    create: XOR<ProjectsCreateWithoutTravelRequestsInput, ProjectsUncheckedCreateWithoutTravelRequestsInput>
    where?: ProjectsWhereInput
  }

  export type ProjectsUpdateToOneWithWhereWithoutTravelRequestsInput = {
    where?: ProjectsWhereInput
    data: XOR<ProjectsUpdateWithoutTravelRequestsInput, ProjectsUncheckedUpdateWithoutTravelRequestsInput>
  }

  export type ProjectsUpdateWithoutTravelRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutTravelRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type UsersUpsertWithoutTravelRequestsInput = {
    update: XOR<UsersUpdateWithoutTravelRequestsInput, UsersUncheckedUpdateWithoutTravelRequestsInput>
    create: XOR<UsersCreateWithoutTravelRequestsInput, UsersUncheckedCreateWithoutTravelRequestsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTravelRequestsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTravelRequestsInput, UsersUncheckedUpdateWithoutTravelRequestsInput>
  }

  export type UsersUpdateWithoutTravelRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutTravelRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutNotificationsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutNotificationsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutNotificationsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
  }

  export type UsersUpsertWithoutNotificationsInput = {
    update: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UsersCreateWithoutNotificationsInput, UsersUncheckedCreateWithoutNotificationsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutNotificationsInput, UsersUncheckedUpdateWithoutNotificationsInput>
  }

  export type UsersUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutApprovalsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutApprovalsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutApprovalsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutApprovalsInput, UsersUncheckedCreateWithoutApprovalsInput>
  }

  export type UsersUpsertWithoutApprovalsInput = {
    update: XOR<UsersUpdateWithoutApprovalsInput, UsersUncheckedUpdateWithoutApprovalsInput>
    create: XOR<UsersCreateWithoutApprovalsInput, UsersUncheckedCreateWithoutApprovalsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutApprovalsInput, UsersUncheckedUpdateWithoutApprovalsInput>
  }

  export type UsersUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateWithoutAuditLogsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutAuditLogsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAuditLogsInput, UsersUncheckedCreateWithoutAuditLogsInput>
  }

  export type UsersUpsertWithoutAuditLogsInput = {
    update: XOR<UsersUpdateWithoutAuditLogsInput, UsersUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UsersCreateWithoutAuditLogsInput, UsersUncheckedCreateWithoutAuditLogsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAuditLogsInput, UsersUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UsersUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ActivitiesCreateWithoutUsersInput = {
    id?: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
    Projects: ProjectsCreateNestedOneWithoutActivitiesInput
  }

  export type ActivitiesUncheckedCreateWithoutUsersInput = {
    id?: string
    projectId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type ActivitiesCreateOrConnectWithoutUsersInput = {
    where: ActivitiesWhereUniqueInput
    create: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput>
  }

  export type ActivitiesCreateManyUsersInputEnvelope = {
    data: ActivitiesCreateManyUsersInput | ActivitiesCreateManyUsersInput[]
  }

  export type BudgetAllocationsCreateWithoutUsersInput = {
    id?: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
    Budgets: BudgetsCreateNestedOneWithoutBudgetAllocationsInput
  }

  export type BudgetAllocationsUncheckedCreateWithoutUsersInput = {
    id?: string
    budgetId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsCreateOrConnectWithoutUsersInput = {
    where: BudgetAllocationsWhereUniqueInput
    create: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput>
  }

  export type BudgetAllocationsCreateManyUsersInputEnvelope = {
    data: BudgetAllocationsCreateManyUsersInput | BudgetAllocationsCreateManyUsersInput[]
  }

  export type BudgetsCreateWithoutUsersInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutBudgetsInput
    Projects: ProjectsCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetsUncheckedCreateWithoutUsersInput = {
    id?: string
    projectId: string
    itemType: string
    description?: string | null
    status?: string | null
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutBudgetsInput
  }

  export type BudgetsCreateOrConnectWithoutUsersInput = {
    where: BudgetsWhereUniqueInput
    create: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput>
  }

  export type BudgetsCreateManyUsersInputEnvelope = {
    data: BudgetsCreateManyUsersInput | BudgetsCreateManyUsersInput[]
  }

  export type CostSplitsCreateWithoutUsersInput = {
    id?: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    Projects: ProjectsCreateNestedOneWithoutCostSplitsInput
  }

  export type CostSplitsUncheckedCreateWithoutUsersInput = {
    id?: string
    projectId: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
  }

  export type CostSplitsCreateOrConnectWithoutUsersInput = {
    where: CostSplitsWhereUniqueInput
    create: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput>
  }

  export type CostSplitsCreateManyUsersInputEnvelope = {
    data: CostSplitsCreateManyUsersInput | CostSplitsCreateManyUsersInput[]
  }

  export type ExpensesCreateWithoutUsersInput = {
    id?: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
    Projects: ProjectsCreateNestedOneWithoutExpensesInput
  }

  export type ExpensesUncheckedCreateWithoutUsersInput = {
    id?: string
    projectId: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type ExpensesCreateOrConnectWithoutUsersInput = {
    where: ExpensesWhereUniqueInput
    create: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput>
  }

  export type ExpensesCreateManyUsersInputEnvelope = {
    data: ExpensesCreateManyUsersInput | ExpensesCreateManyUsersInput[]
  }

  export type ProjectsCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
    Managers?: ManagersCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput>
  }

  export type ManagersCreateWithoutUsersInput = {
    id: string
    name: string
    roles?: rolesCreateNestedManyWithoutManagersInput
    Projects?: ProjectsCreateNestedManyWithoutManagersInput
  }

  export type ManagersUncheckedCreateWithoutUsersInput = {
    id: string
    name: string
    roles?: rolesUncheckedCreateNestedManyWithoutManagersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutManagersInput
  }

  export type ManagersCreateOrConnectWithoutUsersInput = {
    where: ManagersWhereUniqueInput
    create: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput>
  }

  export type TravelRequestsCreateWithoutUsersInput = {
    id?: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
    Projects: ProjectsCreateNestedOneWithoutTravelRequestsInput
  }

  export type TravelRequestsUncheckedCreateWithoutUsersInput = {
    id?: string
    projectId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type TravelRequestsCreateOrConnectWithoutUsersInput = {
    where: TravelRequestsWhereUniqueInput
    create: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput>
  }

  export type TravelRequestsCreateManyUsersInputEnvelope = {
    data: TravelRequestsCreateManyUsersInput | TravelRequestsCreateManyUsersInput[]
  }

  export type NotificationsCreateWithoutUsersInput = {
    id?: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationsUncheckedCreateWithoutUsersInput = {
    id?: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationsCreateOrConnectWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    create: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput>
  }

  export type NotificationsCreateManyUsersInputEnvelope = {
    data: NotificationsCreateManyUsersInput | NotificationsCreateManyUsersInput[]
  }

  export type ApprovalsCreateWithoutUsersInput = {
    id?: string
    entityId: string
    entityType: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
  }

  export type ApprovalsUncheckedCreateWithoutUsersInput = {
    id?: string
    entityId: string
    entityType: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
  }

  export type ApprovalsCreateOrConnectWithoutUsersInput = {
    where: ApprovalsWhereUniqueInput
    create: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput>
  }

  export type ApprovalsCreateManyUsersInputEnvelope = {
    data: ApprovalsCreateManyUsersInput | ApprovalsCreateManyUsersInput[]
  }

  export type AuditLogsCreateWithoutUsersInput = {
    id?: string
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
  }

  export type AuditLogsUncheckedCreateWithoutUsersInput = {
    id?: string
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
  }

  export type AuditLogsCreateOrConnectWithoutUsersInput = {
    where: AuditLogsWhereUniqueInput
    create: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput>
  }

  export type AuditLogsCreateManyUsersInputEnvelope = {
    data: AuditLogsCreateManyUsersInput | AuditLogsCreateManyUsersInput[]
  }

  export type rolesCreateWithoutUsersInput = {
    id: string
    name: string
    RoleRates?: RoleRatesCreateNestedManyWithoutRolesInput
    Managers?: ManagersCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateWithoutUsersInput = {
    id: string
    name: string
    RoleRates?: RoleRatesUncheckedCreateNestedManyWithoutRolesInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesCreateOrConnectWithoutUsersInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
  }

  export type ActivitiesUpsertWithWhereUniqueWithoutUsersInput = {
    where: ActivitiesWhereUniqueInput
    update: XOR<ActivitiesUpdateWithoutUsersInput, ActivitiesUncheckedUpdateWithoutUsersInput>
    create: XOR<ActivitiesCreateWithoutUsersInput, ActivitiesUncheckedCreateWithoutUsersInput>
  }

  export type ActivitiesUpdateWithWhereUniqueWithoutUsersInput = {
    where: ActivitiesWhereUniqueInput
    data: XOR<ActivitiesUpdateWithoutUsersInput, ActivitiesUncheckedUpdateWithoutUsersInput>
  }

  export type ActivitiesUpdateManyWithWhereWithoutUsersInput = {
    where: ActivitiesScalarWhereInput
    data: XOR<ActivitiesUpdateManyMutationInput, ActivitiesUncheckedUpdateManyWithoutUsersInput>
  }

  export type BudgetAllocationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: BudgetAllocationsWhereUniqueInput
    update: XOR<BudgetAllocationsUpdateWithoutUsersInput, BudgetAllocationsUncheckedUpdateWithoutUsersInput>
    create: XOR<BudgetAllocationsCreateWithoutUsersInput, BudgetAllocationsUncheckedCreateWithoutUsersInput>
  }

  export type BudgetAllocationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: BudgetAllocationsWhereUniqueInput
    data: XOR<BudgetAllocationsUpdateWithoutUsersInput, BudgetAllocationsUncheckedUpdateWithoutUsersInput>
  }

  export type BudgetAllocationsUpdateManyWithWhereWithoutUsersInput = {
    where: BudgetAllocationsScalarWhereInput
    data: XOR<BudgetAllocationsUpdateManyMutationInput, BudgetAllocationsUncheckedUpdateManyWithoutUsersInput>
  }

  export type BudgetsUpsertWithWhereUniqueWithoutUsersInput = {
    where: BudgetsWhereUniqueInput
    update: XOR<BudgetsUpdateWithoutUsersInput, BudgetsUncheckedUpdateWithoutUsersInput>
    create: XOR<BudgetsCreateWithoutUsersInput, BudgetsUncheckedCreateWithoutUsersInput>
  }

  export type BudgetsUpdateWithWhereUniqueWithoutUsersInput = {
    where: BudgetsWhereUniqueInput
    data: XOR<BudgetsUpdateWithoutUsersInput, BudgetsUncheckedUpdateWithoutUsersInput>
  }

  export type BudgetsUpdateManyWithWhereWithoutUsersInput = {
    where: BudgetsScalarWhereInput
    data: XOR<BudgetsUpdateManyMutationInput, BudgetsUncheckedUpdateManyWithoutUsersInput>
  }

  export type CostSplitsUpsertWithWhereUniqueWithoutUsersInput = {
    where: CostSplitsWhereUniqueInput
    update: XOR<CostSplitsUpdateWithoutUsersInput, CostSplitsUncheckedUpdateWithoutUsersInput>
    create: XOR<CostSplitsCreateWithoutUsersInput, CostSplitsUncheckedCreateWithoutUsersInput>
  }

  export type CostSplitsUpdateWithWhereUniqueWithoutUsersInput = {
    where: CostSplitsWhereUniqueInput
    data: XOR<CostSplitsUpdateWithoutUsersInput, CostSplitsUncheckedUpdateWithoutUsersInput>
  }

  export type CostSplitsUpdateManyWithWhereWithoutUsersInput = {
    where: CostSplitsScalarWhereInput
    data: XOR<CostSplitsUpdateManyMutationInput, CostSplitsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ExpensesUpsertWithWhereUniqueWithoutUsersInput = {
    where: ExpensesWhereUniqueInput
    update: XOR<ExpensesUpdateWithoutUsersInput, ExpensesUncheckedUpdateWithoutUsersInput>
    create: XOR<ExpensesCreateWithoutUsersInput, ExpensesUncheckedCreateWithoutUsersInput>
  }

  export type ExpensesUpdateWithWhereUniqueWithoutUsersInput = {
    where: ExpensesWhereUniqueInput
    data: XOR<ExpensesUpdateWithoutUsersInput, ExpensesUncheckedUpdateWithoutUsersInput>
  }

  export type ExpensesUpdateManyWithWhereWithoutUsersInput = {
    where: ExpensesScalarWhereInput
    data: XOR<ExpensesUpdateManyMutationInput, ExpensesUncheckedUpdateManyWithoutUsersInput>
  }

  export type ProjectsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutUsersInput, ProjectsUncheckedUpdateWithoutUsersInput>
    create: XOR<ProjectsCreateWithoutUsersInput, ProjectsUncheckedCreateWithoutUsersInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutUsersInput, ProjectsUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutUsersInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ManagersUpsertWithWhereUniqueWithoutUsersInput = {
    where: ManagersWhereUniqueInput
    update: XOR<ManagersUpdateWithoutUsersInput, ManagersUncheckedUpdateWithoutUsersInput>
    create: XOR<ManagersCreateWithoutUsersInput, ManagersUncheckedCreateWithoutUsersInput>
  }

  export type ManagersUpdateWithWhereUniqueWithoutUsersInput = {
    where: ManagersWhereUniqueInput
    data: XOR<ManagersUpdateWithoutUsersInput, ManagersUncheckedUpdateWithoutUsersInput>
  }

  export type ManagersUpdateManyWithWhereWithoutUsersInput = {
    where: ManagersScalarWhereInput
    data: XOR<ManagersUpdateManyMutationInput, ManagersUncheckedUpdateManyWithoutUsersInput>
  }

  export type TravelRequestsUpsertWithWhereUniqueWithoutUsersInput = {
    where: TravelRequestsWhereUniqueInput
    update: XOR<TravelRequestsUpdateWithoutUsersInput, TravelRequestsUncheckedUpdateWithoutUsersInput>
    create: XOR<TravelRequestsCreateWithoutUsersInput, TravelRequestsUncheckedCreateWithoutUsersInput>
  }

  export type TravelRequestsUpdateWithWhereUniqueWithoutUsersInput = {
    where: TravelRequestsWhereUniqueInput
    data: XOR<TravelRequestsUpdateWithoutUsersInput, TravelRequestsUncheckedUpdateWithoutUsersInput>
  }

  export type TravelRequestsUpdateManyWithWhereWithoutUsersInput = {
    where: TravelRequestsScalarWhereInput
    data: XOR<TravelRequestsUpdateManyMutationInput, TravelRequestsUncheckedUpdateManyWithoutUsersInput>
  }

  export type NotificationsUpsertWithWhereUniqueWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    update: XOR<NotificationsUpdateWithoutUsersInput, NotificationsUncheckedUpdateWithoutUsersInput>
    create: XOR<NotificationsCreateWithoutUsersInput, NotificationsUncheckedCreateWithoutUsersInput>
  }

  export type NotificationsUpdateWithWhereUniqueWithoutUsersInput = {
    where: NotificationsWhereUniqueInput
    data: XOR<NotificationsUpdateWithoutUsersInput, NotificationsUncheckedUpdateWithoutUsersInput>
  }

  export type NotificationsUpdateManyWithWhereWithoutUsersInput = {
    where: NotificationsScalarWhereInput
    data: XOR<NotificationsUpdateManyMutationInput, NotificationsUncheckedUpdateManyWithoutUsersInput>
  }

  export type NotificationsScalarWhereInput = {
    AND?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    OR?: NotificationsScalarWhereInput[]
    NOT?: NotificationsScalarWhereInput | NotificationsScalarWhereInput[]
    id?: StringFilter<"Notifications"> | string
    userId?: StringFilter<"Notifications"> | string
    type?: StringFilter<"Notifications"> | string
    message?: StringFilter<"Notifications"> | string
    isRead?: BoolFilter<"Notifications"> | boolean
    createdAt?: DateTimeFilter<"Notifications"> | Date | string
  }

  export type ApprovalsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ApprovalsWhereUniqueInput
    update: XOR<ApprovalsUpdateWithoutUsersInput, ApprovalsUncheckedUpdateWithoutUsersInput>
    create: XOR<ApprovalsCreateWithoutUsersInput, ApprovalsUncheckedCreateWithoutUsersInput>
  }

  export type ApprovalsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ApprovalsWhereUniqueInput
    data: XOR<ApprovalsUpdateWithoutUsersInput, ApprovalsUncheckedUpdateWithoutUsersInput>
  }

  export type ApprovalsUpdateManyWithWhereWithoutUsersInput = {
    where: ApprovalsScalarWhereInput
    data: XOR<ApprovalsUpdateManyMutationInput, ApprovalsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ApprovalsScalarWhereInput = {
    AND?: ApprovalsScalarWhereInput | ApprovalsScalarWhereInput[]
    OR?: ApprovalsScalarWhereInput[]
    NOT?: ApprovalsScalarWhereInput | ApprovalsScalarWhereInput[]
    id?: StringFilter<"Approvals"> | string
    entityId?: StringFilter<"Approvals"> | string
    entityType?: StringFilter<"Approvals"> | string
    approverId?: StringFilter<"Approvals"> | string
    status?: StringFilter<"Approvals"> | string
    comment?: StringNullableFilter<"Approvals"> | string | null
    updatedAt?: DateTimeFilter<"Approvals"> | Date | string
  }

  export type AuditLogsUpsertWithWhereUniqueWithoutUsersInput = {
    where: AuditLogsWhereUniqueInput
    update: XOR<AuditLogsUpdateWithoutUsersInput, AuditLogsUncheckedUpdateWithoutUsersInput>
    create: XOR<AuditLogsCreateWithoutUsersInput, AuditLogsUncheckedCreateWithoutUsersInput>
  }

  export type AuditLogsUpdateWithWhereUniqueWithoutUsersInput = {
    where: AuditLogsWhereUniqueInput
    data: XOR<AuditLogsUpdateWithoutUsersInput, AuditLogsUncheckedUpdateWithoutUsersInput>
  }

  export type AuditLogsUpdateManyWithWhereWithoutUsersInput = {
    where: AuditLogsScalarWhereInput
    data: XOR<AuditLogsUpdateManyMutationInput, AuditLogsUncheckedUpdateManyWithoutUsersInput>
  }

  export type AuditLogsScalarWhereInput = {
    AND?: AuditLogsScalarWhereInput | AuditLogsScalarWhereInput[]
    OR?: AuditLogsScalarWhereInput[]
    NOT?: AuditLogsScalarWhereInput | AuditLogsScalarWhereInput[]
    id?: StringFilter<"AuditLogs"> | string
    userId?: StringNullableFilter<"AuditLogs"> | string | null
    actionType?: StringFilter<"AuditLogs"> | string
    entityType?: StringFilter<"AuditLogs"> | string
    entityId?: StringFilter<"AuditLogs"> | string
    description?: StringFilter<"AuditLogs"> | string
    timestamp?: DateTimeFilter<"AuditLogs"> | Date | string
  }

  export type rolesUpsertWithWhereUniqueWithoutUsersInput = {
    where: rolesWhereUniqueInput
    update: XOR<rolesUpdateWithoutUsersInput, rolesUncheckedUpdateWithoutUsersInput>
    create: XOR<rolesCreateWithoutUsersInput, rolesUncheckedCreateWithoutUsersInput>
  }

  export type rolesUpdateWithWhereUniqueWithoutUsersInput = {
    where: rolesWhereUniqueInput
    data: XOR<rolesUpdateWithoutUsersInput, rolesUncheckedUpdateWithoutUsersInput>
  }

  export type rolesUpdateManyWithWhereWithoutUsersInput = {
    where: rolesScalarWhereInput
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyWithoutUsersInput>
  }

  export type UsersCreateWithoutRolesInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    Managers?: ManagersCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutRolesInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    Managers?: ManagersUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutRolesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput>
  }

  export type RoleRatesCreateWithoutRolesInput = {
    id?: string
    rate: Decimal | DecimalJsLike | number | string
    validFrom: Date | string
  }

  export type RoleRatesUncheckedCreateWithoutRolesInput = {
    id?: string
    rate: Decimal | DecimalJsLike | number | string
    validFrom: Date | string
  }

  export type RoleRatesCreateOrConnectWithoutRolesInput = {
    where: RoleRatesWhereUniqueInput
    create: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput>
  }

  export type ManagersCreateWithoutRolesInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutManagersInput
    Projects?: ProjectsCreateNestedManyWithoutManagersInput
  }

  export type ManagersUncheckedCreateWithoutRolesInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutManagersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutManagersInput
  }

  export type ManagersCreateOrConnectWithoutRolesInput = {
    where: ManagersWhereUniqueInput
    create: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutRolesInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutRolesInput, UsersUncheckedUpdateWithoutRolesInput>
    create: XOR<UsersCreateWithoutRolesInput, UsersUncheckedCreateWithoutRolesInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutRolesInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutRolesInput, UsersUncheckedUpdateWithoutRolesInput>
  }

  export type UsersUpdateManyWithWhereWithoutRolesInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutRolesInput>
  }

  export type RoleRatesUpsertWithWhereUniqueWithoutRolesInput = {
    where: RoleRatesWhereUniqueInput
    update: XOR<RoleRatesUpdateWithoutRolesInput, RoleRatesUncheckedUpdateWithoutRolesInput>
    create: XOR<RoleRatesCreateWithoutRolesInput, RoleRatesUncheckedCreateWithoutRolesInput>
  }

  export type RoleRatesUpdateWithWhereUniqueWithoutRolesInput = {
    where: RoleRatesWhereUniqueInput
    data: XOR<RoleRatesUpdateWithoutRolesInput, RoleRatesUncheckedUpdateWithoutRolesInput>
  }

  export type RoleRatesUpdateManyWithWhereWithoutRolesInput = {
    where: RoleRatesScalarWhereInput
    data: XOR<RoleRatesUpdateManyMutationInput, RoleRatesUncheckedUpdateManyWithoutRolesInput>
  }

  export type RoleRatesScalarWhereInput = {
    AND?: RoleRatesScalarWhereInput | RoleRatesScalarWhereInput[]
    OR?: RoleRatesScalarWhereInput[]
    NOT?: RoleRatesScalarWhereInput | RoleRatesScalarWhereInput[]
    id?: StringFilter<"RoleRates"> | string
    rate?: DecimalFilter<"RoleRates"> | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFilter<"RoleRates"> | Date | string
  }

  export type ManagersUpsertWithWhereUniqueWithoutRolesInput = {
    where: ManagersWhereUniqueInput
    update: XOR<ManagersUpdateWithoutRolesInput, ManagersUncheckedUpdateWithoutRolesInput>
    create: XOR<ManagersCreateWithoutRolesInput, ManagersUncheckedCreateWithoutRolesInput>
  }

  export type ManagersUpdateWithWhereUniqueWithoutRolesInput = {
    where: ManagersWhereUniqueInput
    data: XOR<ManagersUpdateWithoutRolesInput, ManagersUncheckedUpdateWithoutRolesInput>
  }

  export type ManagersUpdateManyWithWhereWithoutRolesInput = {
    where: ManagersScalarWhereInput
    data: XOR<ManagersUpdateManyMutationInput, ManagersUncheckedUpdateManyWithoutRolesInput>
  }

  export type UsersCreateWithoutManagersInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesCreateNestedManyWithoutUsersInput
    Projects?: ProjectsCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsCreateNestedManyWithoutUsersInput
    roles?: rolesCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutManagersInput = {
    id?: string
    fullName: string
    email: string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutUsersInput
    BudgetAllocations?: BudgetAllocationsUncheckedCreateNestedManyWithoutUsersInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutUsersInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutUsersInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutUsersInput
    Projects?: ProjectsUncheckedCreateNestedManyWithoutUsersInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutUsersInput
    Notifications?: NotificationsUncheckedCreateNestedManyWithoutUsersInput
    Approvals?: ApprovalsUncheckedCreateNestedManyWithoutUsersInput
    AuditLogs?: AuditLogsUncheckedCreateNestedManyWithoutUsersInput
    roles?: rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutManagersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput>
  }

  export type rolesCreateWithoutManagersInput = {
    id: string
    name: string
    Users?: UsersCreateNestedManyWithoutRolesInput
    RoleRates?: RoleRatesCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateWithoutManagersInput = {
    id: string
    name: string
    Users?: UsersUncheckedCreateNestedManyWithoutRolesInput
    RoleRates?: RoleRatesUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesCreateOrConnectWithoutManagersInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput>
  }

  export type ProjectsCreateWithoutManagersInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesCreateNestedManyWithoutProjectsInput
    users?: UsersCreateNestedManyWithoutProjectsInput
    Clients?: ClientsCreateNestedOneWithoutProjectsInput
    TravelRequests?: TravelRequestsCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsUncheckedCreateWithoutManagersInput = {
    id?: string
    name: string
    code: string
    clientId?: string | null
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Activities?: ActivitiesUncheckedCreateNestedManyWithoutProjectsInput
    Budgets?: BudgetsUncheckedCreateNestedManyWithoutProjectsInput
    CostSplits?: CostSplitsUncheckedCreateNestedManyWithoutProjectsInput
    Expenses?: ExpensesUncheckedCreateNestedManyWithoutProjectsInput
    users?: UsersUncheckedCreateNestedManyWithoutProjectsInput
    TravelRequests?: TravelRequestsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectsCreateOrConnectWithoutManagersInput = {
    where: ProjectsWhereUniqueInput
    create: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput>
  }

  export type UsersUpsertWithWhereUniqueWithoutManagersInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutManagersInput, UsersUncheckedUpdateWithoutManagersInput>
    create: XOR<UsersCreateWithoutManagersInput, UsersUncheckedCreateWithoutManagersInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutManagersInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutManagersInput, UsersUncheckedUpdateWithoutManagersInput>
  }

  export type UsersUpdateManyWithWhereWithoutManagersInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutManagersInput>
  }

  export type rolesUpsertWithWhereUniqueWithoutManagersInput = {
    where: rolesWhereUniqueInput
    update: XOR<rolesUpdateWithoutManagersInput, rolesUncheckedUpdateWithoutManagersInput>
    create: XOR<rolesCreateWithoutManagersInput, rolesUncheckedCreateWithoutManagersInput>
  }

  export type rolesUpdateWithWhereUniqueWithoutManagersInput = {
    where: rolesWhereUniqueInput
    data: XOR<rolesUpdateWithoutManagersInput, rolesUncheckedUpdateWithoutManagersInput>
  }

  export type rolesUpdateManyWithWhereWithoutManagersInput = {
    where: rolesScalarWhereInput
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyWithoutManagersInput>
  }

  export type ProjectsUpsertWithWhereUniqueWithoutManagersInput = {
    where: ProjectsWhereUniqueInput
    update: XOR<ProjectsUpdateWithoutManagersInput, ProjectsUncheckedUpdateWithoutManagersInput>
    create: XOR<ProjectsCreateWithoutManagersInput, ProjectsUncheckedCreateWithoutManagersInput>
  }

  export type ProjectsUpdateWithWhereUniqueWithoutManagersInput = {
    where: ProjectsWhereUniqueInput
    data: XOR<ProjectsUpdateWithoutManagersInput, ProjectsUncheckedUpdateWithoutManagersInput>
  }

  export type ProjectsUpdateManyWithWhereWithoutManagersInput = {
    where: ProjectsScalarWhereInput
    data: XOR<ProjectsUpdateManyMutationInput, ProjectsUncheckedUpdateManyWithoutManagersInput>
  }

  export type BudgetAllocationsCreateManyBudgetsInput = {
    id?: string
    userId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Users?: UsersUpdateOneRequiredWithoutBudgetAllocationsNestedInput
  }

  export type BudgetAllocationsUncheckedUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUncheckedUpdateManyWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ProjectsCreateManyClientsInput = {
    id?: string
    name: string
    code: string
    startDate: Date | string
    endDate: Date | string
    status: string
    billingType: string
    billingRateTimePeriod: string
    totalContract: Decimal | DecimalJsLike | number | string
    approvedBudget: Decimal | DecimalJsLike | number | string
    allocatedBudget: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectsUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitiesCreateManyProjectsInput = {
    id?: string
    userId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type BudgetsCreateManyProjectsInput = {
    id?: string
    itemType: string
    description?: string | null
    status?: string | null
    createdById: string
  }

  export type CostSplitsCreateManyProjectsInput = {
    id?: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
    approvedBy?: string | null
  }

  export type ExpensesCreateManyProjectsInput = {
    id?: string
    submittedBy: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type TravelRequestsCreateManyProjectsInput = {
    id?: string
    requesterId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type ActivitiesUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    Users?: UsersUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivitiesUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivitiesUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BudgetsUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutBudgetsNestedInput
    Users?: UsersUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CostSplitsUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateOneWithoutCostSplitsNestedInput
  }

  export type CostSplitsUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CostSplitsUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExpensesUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Users?: UsersUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpensesUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpensesUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedBy?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type TravelRequestsUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    Users?: UsersUpdateOneRequiredWithoutTravelRequestsNestedInput
  }

  export type TravelRequestsUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelRequestsUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    requesterId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagersUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutManagersNestedInput
    roles?: rolesUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutManagersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUpdateWithoutRoleRatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateWithoutRoleRatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateManyWithoutRoleRatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ActivitiesCreateManyUsersInput = {
    id?: string
    projectId: string
    date: Date | string
    hours: number
    progress?: number | null
    notes?: string | null
  }

  export type BudgetAllocationsCreateManyUsersInput = {
    id?: string
    budgetId: string
    hours: number
    rate: Decimal | DecimalJsLike | number | string
  }

  export type BudgetsCreateManyUsersInput = {
    id?: string
    projectId: string
    itemType: string
    description?: string | null
    status?: string | null
  }

  export type CostSplitsCreateManyUsersInput = {
    id?: string
    projectId: string
    cost: Decimal | DecimalJsLike | number | string
    splitWith: string
  }

  export type ExpensesCreateManyUsersInput = {
    id?: string
    projectId: string
    expenseType: string
    isBillable: boolean
    amount: Decimal | DecimalJsLike | number | string
    description?: string | null
    expenseDate: Date | string
  }

  export type TravelRequestsCreateManyUsersInput = {
    id?: string
    projectId: string
    destination: string
    purpose: string
    cost: Decimal | DecimalJsLike | number | string
    status?: string | null
  }

  export type NotificationsCreateManyUsersInput = {
    id?: string
    type: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ApprovalsCreateManyUsersInput = {
    id?: string
    entityId: string
    entityType: string
    status: string
    comment?: string | null
    updatedAt?: Date | string
  }

  export type AuditLogsCreateManyUsersInput = {
    id?: string
    actionType: string
    entityType: string
    entityId: string
    description: string
    timestamp?: Date | string
  }

  export type ActivitiesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    Projects?: ProjectsUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivitiesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivitiesUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    hours?: FloatFieldUpdateOperationsInput | number
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BudgetAllocationsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    Budgets?: BudgetsUpdateOneRequiredWithoutBudgetAllocationsNestedInput
  }

  export type BudgetAllocationsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetAllocationsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    budgetId?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type BudgetsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutBudgetsNestedInput
    Projects?: ProjectsUpdateOneRequiredWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutBudgetsNestedInput
  }

  export type BudgetsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    itemType?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CostSplitsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
    Projects?: ProjectsUpdateOneRequiredWithoutCostSplitsNestedInput
  }

  export type CostSplitsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
  }

  export type CostSplitsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    splitWith?: StringFieldUpdateOperationsInput | string
  }

  export type ExpensesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Projects?: ProjectsUpdateOneRequiredWithoutExpensesNestedInput
  }

  export type ExpensesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExpensesUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    expenseType?: StringFieldUpdateOperationsInput | string
    isBillable?: BoolFieldUpdateOperationsInput | boolean
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    expenseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManagersUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    roles?: rolesUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    roles?: rolesUncheckedUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TravelRequestsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    Projects?: ProjectsUpdateOneRequiredWithoutTravelRequestsNestedInput
  }

  export type TravelRequestsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TravelRequestsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    destination?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogsUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rolesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    RoleRates?: RoleRatesUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    RoleRates?: RoleRatesUncheckedUpdateManyWithoutRolesNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    Managers?: ManagersUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type RoleRatesUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleRatesUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleRatesUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManagersUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutManagersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutManagersNestedInput
  }

  export type ManagersUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUpdateManyWithoutUsersNestedInput
    roles?: rolesUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutUsersNestedInput
    BudgetAllocations?: BudgetAllocationsUncheckedUpdateManyWithoutUsersNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutUsersNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutUsersNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutUsersNestedInput
    Projects?: ProjectsUncheckedUpdateManyWithoutUsersNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutUsersNestedInput
    Notifications?: NotificationsUncheckedUpdateManyWithoutUsersNestedInput
    Approvals?: ApprovalsUncheckedUpdateManyWithoutUsersNestedInput
    AuditLogs?: AuditLogsUncheckedUpdateManyWithoutUsersNestedInput
    roles?: rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUpdateManyWithoutRolesNestedInput
    RoleRates?: RoleRatesUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    Users?: UsersUncheckedUpdateManyWithoutRolesNestedInput
    RoleRates?: RoleRatesUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateManyWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectsUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUpdateManyWithoutProjectsNestedInput
    users?: UsersUpdateManyWithoutProjectsNestedInput
    Clients?: ClientsUpdateOneWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Activities?: ActivitiesUncheckedUpdateManyWithoutProjectsNestedInput
    Budgets?: BudgetsUncheckedUpdateManyWithoutProjectsNestedInput
    CostSplits?: CostSplitsUncheckedUpdateManyWithoutProjectsNestedInput
    Expenses?: ExpensesUncheckedUpdateManyWithoutProjectsNestedInput
    users?: UsersUncheckedUpdateManyWithoutProjectsNestedInput
    TravelRequests?: TravelRequestsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectsUncheckedUpdateManyWithoutManagersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    billingType?: StringFieldUpdateOperationsInput | string
    billingRateTimePeriod?: StringFieldUpdateOperationsInput | string
    totalContract?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    approvedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    allocatedBudget?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}