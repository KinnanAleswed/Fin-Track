generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Activities {
  id        String   @id(map: "PK__Activiti__3213E83F01D46A32") @default(dbgenerated("newid()"), map: "DF__Activities__id__25518C17") @db.UniqueIdentifier
  projectId String   @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  date      DateTime @db.DateTime
  hours     Float
  progress  Int?
  notes     String?
  Projects  Projects @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK__Activitie__proje__2645B050")
  Users     Users    @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK__Activitie__userI__2739D489")
}

model BudgetAllocations {
  id       String  @id(map: "PK__BudgetAl__3213E83FA1FE8038") @default(dbgenerated("newid()"), map: "DF__BudgetAlloca__id__1BC821DD") @db.UniqueIdentifier
  budgetId String  @db.UniqueIdentifier
  userId   String  @db.UniqueIdentifier
  hours    Float
  rate     Decimal @db.Decimal(10, 2)
  Budgets  Budgets @relation(fields: [budgetId], references: [id], onUpdate: NoAction, map: "FK__BudgetAll__budge__1CBC4616")
  Users    Users   @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "FK__BudgetAll__userI__1DB06A4F")
}

model Budgets {
  id                String              @id(map: "PK__Budgets__3213E83FAE21337F") @default(dbgenerated("newid()"), map: "DF__Budgets__id__160F4887") @db.UniqueIdentifier
  projectId         String              @db.UniqueIdentifier
  itemType          String              @db.NVarChar(100)
  description       String?
  status            String?             @default("OPEN", map: "DF__Budgets__status__17036CC0") @db.NVarChar(50)
  createdById       String              @db.UniqueIdentifier
  BudgetAllocations BudgetAllocations[]
  Users             Users               @relation(fields: [createdById], references: [id], onUpdate: NoAction, map: "FK__Budgets__created__18EBB532")
  Projects          Projects            @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK__Budgets__project__17F790F9")
}

model Clients {
  id       String     @id(map: "PK__Clients__3213E83F7E4EF78B") @default(dbgenerated("newid()"), map: "DF__Clients__id__07C12930") @db.UniqueIdentifier
  name     String     @db.NVarChar(255)
  Projects Projects[]
}

model CostSplits {
  id         String   @id(map: "PK__CostSpli__3213E83F5F228E23") @default(dbgenerated("newid()"), map: "DF__CostSplits__id__2FCF1A8A") @db.UniqueIdentifier
  projectId  String   @db.UniqueIdentifier
  cost       Decimal  @db.Decimal(18, 2)
  splitWith  String   @db.NVarChar(Max)
  approvedBy String?  @db.UniqueIdentifier
  Users      Users?   @relation(fields: [approvedBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__CostSplit__appro__31B762FC")
  Projects   Projects @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK__CostSplit__proje__30C33EC3")
}

model ExchangeRates {
  id        String    @id(map: "PK__Exchange__3213E83FD3DAAEA4") @default(dbgenerated("newid()"), map: "DF__ExchangeRate__id__3493CFA7") @db.UniqueIdentifier
  currency  String    @db.NVarChar(10)
  rate      Decimal   @db.Decimal(10, 4)
  createdAt DateTime? @default(now(), map: "DF__ExchangeR__creat__3587F3E0") @db.DateTime
}

model Expenses {
  id          String   @id(map: "PK__Expenses__3213E83F95C50797") @default(dbgenerated("newid()"), map: "DF__Expenses__id__208CD6FA") @db.UniqueIdentifier
  projectId   String   @db.UniqueIdentifier
  submittedBy String   @db.UniqueIdentifier
  expenseType String   @db.NVarChar(50)
  isBillable  Boolean
  amount      Decimal  @db.Decimal(18, 2)
  description String?
  expenseDate DateTime @db.DateTime
  Projects    Projects @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK__Expenses__projec__2180FB33")
  Users       Users    @relation(fields: [submittedBy], references: [id], onUpdate: NoAction, map: "FK__Expenses__submit__22751F6C")
}

model Projects {
  id                    String   @id(map: "PK__Projects__3213E83FDFB1A0FD") @default(dbgenerated("newid()"), map: "DF__Projects__id__0F624AF8") @db.UniqueIdentifier
  name                  String   @db.NVarChar(255)
  code                  String   @unique(map: "UQ__Projects__357D4CF98DAC9E13") @db.NVarChar(50)
  clientId              String?  @db.UniqueIdentifier
  startDate             DateTime @db.DateTime
  endDate               DateTime @db.DateTime
  status                String   @db.NVarChar(50)
  billingType           String   @db.NVarChar(50)
  billingRateTimePeriod String   @db.NVarChar(50)
  managerId             String?  @db.UniqueIdentifier
  totalContract         Decimal  @db.Decimal(18, 2)
  approvedBudget        Decimal  @db.Decimal(18, 2)
  allocatedBudget       Decimal  @db.Decimal(18, 2)
  createdAt             DateTime @default(now(), map: "DF__Projects__create__10566F31") @db.DateTime
  updatedAt             DateTime @default(now(), map: "DF__Projects__update__114A936A") @db.DateTime

  Activities Activities[]
  Budgets    Budgets[]
  CostSplits CostSplits[]
  Expenses   Expenses[]

  Clients Clients? @relation(fields: [clientId], references: [id], onUpdate: NoAction, map: "FK__Projects__client__123EB7A3")
  Users   Users?   @relation(fields: [managerId], references: [id], onUpdate: NoAction, map: "FK__Projects__manage__1332DBDC")

  TravelRequests TravelRequests[]
}

model RoleRates {
  id        String   @id(map: "PK__RoleRate__3213E83F35863CD4") @default(dbgenerated("newid()"), map: "DF__RoleRates__id__3864608B") @db.UniqueIdentifier
  rate      Decimal  @db.Decimal(10, 2)
  validFrom DateTime @db.DateTime
  roles     roles[]  @relation("RoleRateRoles")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B618B44F901") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model TravelRequests {
  id          String   @id(map: "PK__TravelRe__3213E83F5FB1491E") @default(dbgenerated("newid()"), map: "DF__TravelReques__id__2A164134") @db.UniqueIdentifier
  projectId   String   @db.UniqueIdentifier
  requesterId String   @db.UniqueIdentifier
  destination String   @db.NVarChar(255)
  purpose     String
  cost        Decimal  @db.Decimal(18, 2)
  status      String?  @default("PENDING", map: "DF__TravelReq__statu__2B0A656D") @db.NVarChar(50)
  Projects    Projects @relation(fields: [projectId], references: [id], onUpdate: NoAction, map: "FK__TravelReq__proje__2BFE89A6")
  Users       Users    @relation(fields: [requesterId], references: [id], onUpdate: NoAction, map: "FK__TravelReq__reque__2CF2ADDF")
}

/// Notifications and alerts generated for users
model Notifications {
  id        String   @id(map: "PK__Notifica__3213E83F") @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId    String   @db.UniqueIdentifier
  type      String   @db.NVarChar(50) // INFO, WARNING, ERROR, TASK, REMINDER
  message   String   @db.NVarChar(1000)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.DateTime
  Users     Users    @relation("UserNotifications", fields: [userId], references: [id])
}

/// Records of approval workflow actions and decisions
model Approvals {
  id         String   @id(map: "PK__Approval__3213E83F") @default(dbgenerated("newid()")) @db.UniqueIdentifier
  entityId   String   @db.UniqueIdentifier // ID of the entity being approved (Budget, TravelRequest, etc.)
  entityType String   @db.NVarChar(100) // E.g., 'Budget', 'TravelRequest'
  approverId String   @db.UniqueIdentifier
  status     String   @db.NVarChar(50) // APPROVED, REJECTED, PENDING
  comment    String?  @db.NVarChar(1000)
  updatedAt  DateTime @default(now()) @db.DateTime
  Users      Users    @relation("Approver", fields: [approverId], references: [id])
}

/// System audit log entries (changes, events)
model AuditLogs {
  id          String   @id(map: "PK__AuditLog__3213E83F") @default(dbgenerated("newid()")) @db.UniqueIdentifier
  userId      String?  @db.UniqueIdentifier
  actionType  String   @db.NVarChar(100) // CREATE, UPDATE, DELETE, LOGIN, etc.
  entityType  String   @db.NVarChar(100)
  entityId    String   @db.NVarChar(100)
  description String   @db.NVarChar(1000)
  timestamp   DateTime @default(now()) @db.DateTime
  Users       Users?   @relation("UserAuditLogs", fields: [userId], references: [id])
}

/// Key-value lookup options (for dropdowns, types, etc.)
model Lookups {
  id        String  @id(map: "PK__Lookups__3213E83F") @default(dbgenerated("newid()")) @db.UniqueIdentifier
  category  String  @db.NVarChar(100) // E.g., 'ExpenseType', 'ProjectStatus'
  code      String  @db.NVarChar(100)
  label     String  @db.NVarChar(255)
  isActive  Boolean @default(true)
  sortOrder Int?
}

model Users {
  id                String              @id(map: "PK__Users__3213E83F861CB477") @default(dbgenerated("newid()"), map: "DF__Users__id__0B91BA14") @db.UniqueIdentifier
  fullName          String              @db.NVarChar(255)
  email             String              @unique(map: "UQ__Users__AB6E6164120FB4DB") @db.NVarChar(255)
  Activities        Activities[]
  BudgetAllocations BudgetAllocations[]
  Budgets           Budgets[]
  CostSplits        CostSplits[]
  Expenses          Expenses[]
  Projects          Projects[]
  TravelRequests    TravelRequests[]
  Notifications     Notifications[]     @relation("UserNotifications")
  Approvals         Approvals[]         @relation("Approver")
  AuditLogs         AuditLogs[]         @relation("UserAuditLogs")
  roles             roles[]             @relation("UserRoles")
}

// add a role model relation with rolerate and users model

model roles {
  id   String @id
  name String @db.NVarChar(50)

  Users     Users[]     @relation("UserRoles")
  RoleRates RoleRates[] @relation("RoleRateRoles")
}
